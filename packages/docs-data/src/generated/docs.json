{
  "nav": [
    {
      "children": [
        {
          "title": "Quick start",
          "level": 2,
          "route": "blueprint.quick-start"
        },
        {
          "title": "Browser support",
          "level": 2,
          "route": "blueprint.browser-support"
        },
        {
          "children": [
            {
              "title": "Installing Blueprint",
              "level": 3,
              "route": "blueprint/getting-started.installing-blueprint"
            },
            {
              "title": "NPM packages",
              "level": 4,
              "route": "blueprint/getting-started.npm-packages"
            },
            {
              "title": "CDN consumption",
              "level": 4,
              "route": "blueprint/getting-started.cdn-consumption"
            },
            {
              "title": "JS environment",
              "level": 3,
              "route": "blueprint/getting-started.js-environment"
            },
            {
              "title": "Language features",
              "level": 4,
              "route": "blueprint/getting-started.language-features"
            },
            {
              "title": "DOM4",
              "level": 4,
              "route": "blueprint/getting-started.dom4"
            },
            {
              "title": "TypeScript",
              "level": 3,
              "route": "blueprint/getting-started.typescript"
            },
            {
              "title": "Vanilla JS APIs",
              "level": 3,
              "route": "blueprint/getting-started.vanilla-js-apis"
            }
          ],
          "level": 2,
          "reference": "getting-started",
          "route": "blueprint/getting-started",
          "title": "Getting started"
        },
        {
          "children": [
            {
              "title": "Understanding TypeScript",
              "level": 3,
              "route": "blueprint/reading-the-docs.understanding-typescript"
            }
          ],
          "level": 2,
          "reference": "reading-the-docs",
          "route": "blueprint/reading-the-docs",
          "title": "Reading the documentation"
        },
        {
          "children": [],
          "level": 2,
          "reference": "whats-new-2.0",
          "route": "blueprint/whats-new-2.0",
          "title": "What's new in 2.0"
        },
        {
          "children": [],
          "level": 2,
          "reference": "whats-new-3.0",
          "route": "blueprint/whats-new-3.0",
          "title": "What's new in 3.0"
        }
      ],
      "level": 1,
      "reference": "blueprint",
      "route": "blueprint",
      "title": "Blueprint"
    },
    {
      "children": [
        {
          "children": [
            {
              "title": "Focus management",
              "level": 3,
              "route": "core/accessibility.focus-management"
            },
            {
              "title": "JavaScript API",
              "level": 4,
              "route": "core/accessibility.javascript-api"
            },
            {
              "title": "Color contrast",
              "level": 3,
              "route": "core/accessibility.color-contrast"
            }
          ],
          "level": 2,
          "reference": "accessibility",
          "route": "core/accessibility",
          "title": "Accessibility"
        },
        {
          "children": [
            {
              "title": "Modifiers",
              "level": 3,
              "route": "core/classes.modifiers"
            },
            {
              "title": "Namespacing",
              "level": 3,
              "route": "core/classes.namespacing"
            },
            {
              "title": "Linting",
              "level": 3,
              "route": "core/classes.linting"
            }
          ],
          "level": 2,
          "reference": "classes",
          "route": "core/classes",
          "title": "Classes"
        },
        {
          "children": [
            {
              "title": "Gray scale",
              "level": 3,
              "route": "core/colors.gray-scale"
            },
            {
              "title": "Core colors",
              "level": 3,
              "route": "core/colors.core-colors"
            },
            {
              "title": "Extended colors",
              "level": 3,
              "route": "core/colors.extended-colors"
            },
            {
              "title": "Usage",
              "level": 3,
              "route": "core/colors.usage"
            },
            {
              "title": "Color schemes",
              "level": 3,
              "route": "core/colors.color-schemes"
            },
            {
              "title": "Sequential color schemes",
              "level": 4,
              "route": "core/colors.sequential-color-schemes"
            },
            {
              "title": "Diverging color schemes",
              "level": 4,
              "route": "core/colors.diverging-color-schemes"
            },
            {
              "title": "Qualitative color schemes",
              "level": 4,
              "route": "core/colors.qualitative-color-schemes"
            }
          ],
          "level": 2,
          "reference": "colors",
          "route": "core/colors",
          "title": "Colors"
        },
        {
          "children": [
            {
              "title": "Usage",
              "level": 3,
              "route": "core/typography.usage"
            },
            {
              "title": "UI text",
              "level": 3,
              "route": "core/typography.ui-text"
            },
            {
              "title": "Running text",
              "level": 3,
              "route": "core/typography.running-text"
            },
            {
              "title": "Headings",
              "level": 3,
              "route": "core/typography.headings"
            },
            {
              "title": "Links",
              "level": 3,
              "route": "core/typography.links"
            },
            {
              "title": "Preformatted text",
              "level": 3,
              "route": "core/typography.preformatted-text"
            },
            {
              "title": "Block quotes",
              "level": 3,
              "route": "core/typography.block-quotes"
            },
            {
              "title": "Lists",
              "level": 3,
              "route": "core/typography.lists"
            },
            {
              "title": "Internationalization",
              "level": 3,
              "route": "core/typography.internationalization"
            },
            {
              "title": "Right-to-left text",
              "level": 4,
              "route": "core/typography.right-to-left-text"
            },
            {
              "title": "Dark theme",
              "level": 3,
              "route": "core/typography.dark-theme"
            }
          ],
          "level": 2,
          "reference": "typography",
          "route": "core/typography",
          "title": "Typography"
        },
        {
          "children": [
            {
              "title": "Font variables",
              "level": 3,
              "route": "core/variables.font-variables"
            },
            {
              "title": "Icon variables",
              "level": 3,
              "route": "core/variables.icon-variables"
            },
            {
              "title": "Grids & dimensions",
              "level": 3,
              "route": "core/variables.grids---dimensions"
            },
            {
              "title": "Grid system",
              "level": 4,
              "route": "core/variables.grid-system"
            },
            {
              "title": "Layering",
              "level": 3,
              "route": "core/variables.layering"
            },
            {
              "title": "Light theme styles",
              "level": 3,
              "route": "core/variables.light-theme-styles"
            },
            {
              "title": "Dark theme styles",
              "level": 3,
              "route": "core/variables.dark-theme-styles"
            },
            {
              "title": "Elevation drop shadows",
              "level": 3,
              "route": "core/variables.elevation-drop-shadows"
            },
            {
              "title": "Color aliases",
              "level": 3,
              "route": "core/variables.color-aliases"
            }
          ],
          "level": 2,
          "reference": "variables",
          "route": "core/variables",
          "title": "Variables"
        },
        {
          "children": [
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/breadcrumbs.props"
                },
                {
                  "title": "Breadcrumbs",
                  "level": 5,
                  "route": "core/components/breadcrumbs.breadcrumbs"
                },
                {
                  "title": "Breadcrumb",
                  "level": 5,
                  "route": "core/components/breadcrumbs.breadcrumb"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/breadcrumbs.css"
                }
              ],
              "level": 3,
              "reference": "breadcrumbs",
              "route": "core/components/breadcrumbs",
              "title": "Breadcrumbs"
            },
            {
              "children": [
                {
                  "title": "Adding icons",
                  "level": 4,
                  "route": "core/components/button.adding-icons"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/button.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/button.css"
                }
              ],
              "level": 3,
              "reference": "button",
              "route": "core/components/button",
              "title": "Button"
            },
            {
              "children": [
                {
                  "title": "Usage with popovers",
                  "level": 4,
                  "route": "core/components/button-group.usage-with-popovers"
                },
                {
                  "title": "Flex layout",
                  "level": 4,
                  "route": "core/components/button-group.flex-layout"
                },
                {
                  "title": "Vertical layout",
                  "level": 4,
                  "route": "core/components/button-group.vertical-layout"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/button-group.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/button-group.css"
                }
              ],
              "level": 3,
              "reference": "button-group",
              "route": "core/components/button-group",
              "title": "Button group"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/callout.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/callout.css"
                }
              ],
              "level": 3,
              "reference": "callout",
              "route": "core/components/callout",
              "title": "Callout"
            },
            {
              "children": [
                {
                  "title": "Elevation",
                  "level": 4,
                  "route": "core/components/card.elevation"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/card.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/card.css"
                }
              ],
              "level": 3,
              "reference": "card",
              "route": "core/components/card",
              "title": "Card"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/collapse.props"
                }
              ],
              "level": 3,
              "reference": "collapse",
              "route": "core/components/collapse",
              "title": "Collapse"
            },
            {
              "children": [
                {
                  "title": "Separators",
                  "level": 4,
                  "route": "core/components/collapsible-list.separators"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/collapsible-list.props"
                }
              ],
              "level": 3,
              "reference": "collapsible-list",
              "route": "core/components/collapsible-list",
              "title": "Collapsible list"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/divider.props"
                }
              ],
              "level": 3,
              "reference": "divider",
              "route": "core/components/divider",
              "title": "Divider"
            },
            {
              "children": [
                {
                  "title": "Multiline mode",
                  "level": 4,
                  "route": "core/components/editable-text.multiline-mode"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/editable-text.props"
                }
              ],
              "level": 3,
              "reference": "editable-text",
              "route": "core/components/editable-text",
              "title": "Editable text"
            },
            {
              "children": [
                {
                  "title": "Nested usage",
                  "level": 4,
                  "route": "core/components/html.nested-usage"
                },
                {
                  "title": "Linting",
                  "level": 4,
                  "route": "core/components/html.linting"
                }
              ],
              "level": 3,
              "reference": "html",
              "route": "core/components/html",
              "title": "HTML elements"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/html-table.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/html-table.css"
                }
              ],
              "level": 3,
              "reference": "html-table",
              "route": "core/components/html-table",
              "title": "HTML table"
            },
            {
              "children": [
                {
                  "title": "Usage",
                  "level": 4,
                  "route": "core/components/hotkeys.usage"
                },
                {
                  "title": "Decorator",
                  "level": 5,
                  "route": "core/components/hotkeys.decorator"
                },
                {
                  "title": "Props",
                  "level": 5,
                  "route": "core/components/hotkeys.props"
                },
                {
                  "title": "Scope",
                  "level": 4,
                  "route": "core/components/hotkeys.scope"
                },
                {
                  "title": "Dialog",
                  "level": 4,
                  "route": "core/components/hotkeys.dialog"
                },
                {
                  "title": "Key combos",
                  "level": 4,
                  "route": "core/components/hotkeys.key-combos"
                }
              ],
              "level": 3,
              "reference": "hotkeys",
              "route": "core/components/hotkeys",
              "title": "Hotkeys"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/icon.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/icon.css"
                }
              ],
              "level": 3,
              "reference": "icon",
              "route": "core/components/icon",
              "title": "Icon"
            },
            {
              "children": [
                {
                  "title": "Dropdowns",
                  "level": 4,
                  "route": "core/components/menu.dropdowns"
                },
                {
                  "title": "Submenus",
                  "level": 4,
                  "route": "core/components/menu.submenus"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/menu.props"
                },
                {
                  "title": "Menu",
                  "level": 5,
                  "route": "core/components/menu.menu"
                },
                {
                  "title": "Menu item",
                  "level": 5,
                  "route": "core/components/menu.menu-item"
                },
                {
                  "title": "Menu divider",
                  "level": 5,
                  "route": "core/components/menu.menu-divider"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/menu.css"
                },
                {
                  "title": "Section headers",
                  "level": 5,
                  "route": "core/components/menu.section-headers"
                }
              ],
              "level": 3,
              "reference": "menu",
              "route": "core/components/menu",
              "title": "Menu"
            },
            {
              "children": [
                {
                  "title": "Fixed to viewport top",
                  "level": 5,
                  "route": "core/components/navbar.fixed-to-viewport-top"
                },
                {
                  "title": "Fixed width",
                  "level": 5,
                  "route": "core/components/navbar.fixed-width"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/navbar.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/navbar.css"
                }
              ],
              "level": 3,
              "reference": "navbar",
              "route": "core/components/navbar",
              "title": "Navbar"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/non-ideal-state.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/non-ideal-state.css"
                }
              ],
              "level": 3,
              "reference": "non-ideal-state",
              "route": "core/components/non-ideal-state",
              "title": "Non-ideal state"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/overflow-list.props"
                }
              ],
              "level": 3,
              "reference": "overflow-list",
              "route": "core/components/overflow-list",
              "title": "Overflow list"
            },
            {
              "children": [
                {
                  "title": "Panels",
                  "level": 4,
                  "route": "core/components/panel-stack.panels"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/panel-stack.props"
                }
              ],
              "level": 3,
              "reference": "panel-stack",
              "route": "core/components/panel-stack",
              "title": "Panel stack"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/progress-bar.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/progress-bar.css"
                }
              ],
              "level": 3,
              "reference": "progress-bar",
              "route": "core/components/progress-bar",
              "title": "Progress bar"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/resize-sensor.props"
                }
              ],
              "level": 3,
              "reference": "resize-sensor",
              "route": "core/components/resize-sensor",
              "title": "Resize sensor"
            },
            {
              "children": [
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/skeleton.css"
                }
              ],
              "level": 3,
              "reference": "skeleton",
              "route": "core/components/skeleton",
              "title": "Skeleton"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/spinner.props"
                }
              ],
              "level": 3,
              "reference": "spinner",
              "route": "core/components/spinner",
              "title": "Spinner"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/tabs.props"
                },
                {
                  "title": "Tabs",
                  "level": 5,
                  "route": "core/components/tabs.tabs"
                },
                {
                  "title": "Tab",
                  "level": 5,
                  "route": "core/components/tabs.tab"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/tabs.css"
                }
              ],
              "level": 3,
              "reference": "tabs",
              "route": "core/components/tabs",
              "title": "Tabs"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/tag.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/tag.css"
                }
              ],
              "level": 3,
              "reference": "tag",
              "route": "core/components/tag",
              "title": "Tag"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/text.props"
                }
              ],
              "level": 3,
              "reference": "text",
              "route": "core/components/text",
              "title": "Text"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/tree.props"
                },
                {
                  "title": "Instance methods",
                  "level": 5,
                  "route": "core/components/tree.instance-methods"
                },
                {
                  "title": "Tree node",
                  "level": 5,
                  "route": "core/components/tree.tree-node"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/tree.css"
                }
              ],
              "level": 3,
              "reference": "tree",
              "route": "core/components/tree",
              "title": "Tree"
            },
            {
              "title": "Form controls",
              "level": 3,
              "route": "core/components.form-controls"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/form-group.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/form-group.css"
                }
              ],
              "level": 3,
              "reference": "form-group",
              "route": "core/components/form-group",
              "title": "Form group"
            },
            {
              "children": [
                {
                  "title": "Flex layout",
                  "level": 4,
                  "route": "core/components/control-group.flex-layout"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/control-group.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/control-group.css"
                }
              ],
              "level": 3,
              "reference": "control-group",
              "route": "core/components/control-group",
              "title": "Control group"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/label.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/label.css"
                }
              ],
              "level": 3,
              "reference": "label",
              "route": "core/components/label",
              "title": "Label"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/checkbox.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/checkbox.css"
                }
              ],
              "level": 3,
              "reference": "checkbox",
              "route": "core/components/checkbox",
              "title": "Checkbox"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/radio.props"
                },
                {
                  "title": "RadioGroup",
                  "level": 5,
                  "route": "core/components/radio.radiogroup"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/radio.css"
                }
              ],
              "level": 3,
              "reference": "radio",
              "route": "core/components/radio",
              "title": "Radio"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/html-select.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/html-select.css"
                }
              ],
              "level": 3,
              "reference": "html-select",
              "route": "core/components/html-select",
              "title": "HTML select"
            },
            {
              "children": [
                {
                  "title": "Slider",
                  "level": 4,
                  "route": "core/components/sliders.slider"
                },
                {
                  "title": "Range slider",
                  "level": 4,
                  "route": "core/components/sliders.range-slider"
                },
                {
                  "title": "Multi slider",
                  "level": 4,
                  "route": "core/components/sliders.multi-slider"
                },
                {
                  "title": "Handle",
                  "level": 5,
                  "route": "core/components/sliders.handle"
                }
              ],
              "level": 3,
              "reference": "sliders",
              "route": "core/components/sliders",
              "title": "Slider"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/switch.props"
                },
                {
                  "title": "CSS API",
                  "level": 4,
                  "route": "core/components/switch.css-api"
                }
              ],
              "level": 3,
              "reference": "switch",
              "route": "core/components/switch",
              "title": "Switch"
            },
            {
              "title": "Form inputs",
              "level": 3,
              "route": "core/components.form-inputs"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/file-input.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/file-input.css"
                }
              ],
              "level": 3,
              "reference": "file-input",
              "route": "core/components/file-input",
              "title": "File input"
            },
            {
              "children": [
                {
                  "title": "Interactions",
                  "level": 4,
                  "route": "core/components/numeric-input.interactions"
                },
                {
                  "title": "Basic example",
                  "level": 4,
                  "route": "core/components/numeric-input.basic-example"
                },
                {
                  "title": "Extended example",
                  "level": 4,
                  "route": "core/components/numeric-input.extended-example"
                },
                {
                  "title": "JavaScript API",
                  "level": 4,
                  "route": "core/components/numeric-input.javascript-api"
                },
                {
                  "title": "Responsive numeric inputs",
                  "level": 5,
                  "route": "core/components/numeric-input.responsive-numeric-inputs"
                },
                {
                  "title": "Uncontrolled mode",
                  "level": 5,
                  "route": "core/components/numeric-input.uncontrolled-mode"
                },
                {
                  "title": "Controlled mode",
                  "level": 5,
                  "route": "core/components/numeric-input.controlled-mode"
                }
              ],
              "level": 3,
              "reference": "numeric-input",
              "route": "core/components/numeric-input",
              "title": "Numeric input"
            },
            {
              "children": [
                {
                  "title": "Input group",
                  "level": 4,
                  "route": "core/components/text-inputs.input-group"
                },
                {
                  "title": "Props",
                  "level": 5,
                  "route": "core/components/text-inputs.props"
                },
                {
                  "title": "CSS",
                  "level": 5,
                  "route": "core/components/text-inputs.css"
                },
                {
                  "title": "HTML input",
                  "level": 4,
                  "route": "core/components/text-inputs.html-input"
                },
                {
                  "title": "Text area",
                  "level": 4,
                  "route": "core/components/text-inputs.text-area"
                },
                {
                  "title": "Search field",
                  "level": 4,
                  "route": "core/components/text-inputs.search-field"
                }
              ],
              "level": 3,
              "reference": "text-inputs",
              "route": "core/components/text-inputs",
              "title": "Text inputs"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/tag-input.props"
                }
              ],
              "level": 3,
              "reference": "tag-input",
              "route": "core/components/tag-input",
              "title": "Tag input"
            },
            {
              "title": "Overlays",
              "level": 3,
              "route": "core/components.overlays"
            },
            {
              "children": [
                {
                  "title": "Scroll support",
                  "level": 4,
                  "route": "core/components/overlay.scroll-support"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/overlay.props"
                }
              ],
              "level": 3,
              "reference": "overlay",
              "route": "core/components/overlay",
              "title": "Overlay"
            },
            {
              "children": [
                {
                  "title": "React 15",
                  "level": 4,
                  "route": "core/components/portal.react-15"
                },
                {
                  "title": "React context",
                  "level": 4,
                  "route": "core/components/portal.react-context"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/portal.props"
                }
              ],
              "level": 3,
              "reference": "portal",
              "route": "core/components/portal",
              "title": "Portal"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/alert.props"
                }
              ],
              "level": 3,
              "reference": "alert",
              "route": "core/components/alert",
              "title": "Alert"
            },
            {
              "children": [
                {
                  "title": "Decorator usage",
                  "level": 4,
                  "route": "core/components/context-menu.decorator-usage"
                },
                {
                  "title": "Imperative usage",
                  "level": 4,
                  "route": "core/components/context-menu.imperative-usage"
                }
              ],
              "level": 3,
              "reference": "context-menu",
              "route": "core/components/context-menu",
              "title": "Context menu"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/dialog.props"
                },
                {
                  "title": "CSS",
                  "level": 4,
                  "route": "core/components/dialog.css"
                }
              ],
              "level": 3,
              "reference": "dialog",
              "route": "core/components/dialog",
              "title": "Dialog"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/popover.props"
                },
                {
                  "title": "Concepts",
                  "level": 4,
                  "route": "core/components/popover.concepts"
                },
                {
                  "title": "Structure",
                  "level": 5,
                  "route": "core/components/popover.structure"
                },
                {
                  "title": "Position",
                  "level": 5,
                  "route": "core/components/popover.position"
                },
                {
                  "title": "Modifiers",
                  "level": 5,
                  "route": "core/components/popover.modifiers"
                },
                {
                  "title": "Controlled mode",
                  "level": 5,
                  "route": "core/components/popover.controlled-mode"
                },
                {
                  "title": "Interactions",
                  "level": 5,
                  "route": "core/components/popover.interactions"
                },
                {
                  "title": "Closing on click",
                  "level": 5,
                  "route": "core/components/popover.closing-on-click"
                },
                {
                  "title": "Backdrop",
                  "level": 5,
                  "route": "core/components/popover.backdrop"
                },
                {
                  "title": "Portal rendering",
                  "level": 5,
                  "route": "core/components/popover.portal-rendering"
                },
                {
                  "title": "Style",
                  "level": 4,
                  "route": "core/components/popover.style"
                },
                {
                  "title": "Dark theme",
                  "level": 5,
                  "route": "core/components/popover.dark-theme"
                },
                {
                  "title": "Sizing",
                  "level": 5,
                  "route": "core/components/popover.sizing"
                },
                {
                  "title": "Minimal style",
                  "level": 5,
                  "route": "core/components/popover.minimal-style"
                },
                {
                  "title": "Testing",
                  "level": 4,
                  "route": "core/components/popover.testing"
                }
              ],
              "level": 3,
              "reference": "popover",
              "route": "core/components/popover",
              "title": "Popover"
            },
            {
              "children": [
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/toast.props"
                },
                {
                  "title": "Toast",
                  "level": 5,
                  "route": "core/components/toast.toast"
                },
                {
                  "title": "Toaster",
                  "level": 5,
                  "route": "core/components/toast.toaster"
                },
                {
                  "title": "Static usage",
                  "level": 4,
                  "route": "core/components/toast.static-usage"
                },
                {
                  "title": "Example",
                  "level": 5,
                  "route": "core/components/toast.example"
                },
                {
                  "title": "React component usage",
                  "level": 4,
                  "route": "core/components/toast.react-component-usage"
                }
              ],
              "level": 3,
              "reference": "toast",
              "route": "core/components/toast",
              "title": "Toast"
            },
            {
              "children": [
                {
                  "title": "Combining with popover",
                  "level": 4,
                  "route": "core/components/tooltip.combining-with-popover"
                },
                {
                  "title": "Props",
                  "level": 4,
                  "route": "core/components/tooltip.props"
                }
              ],
              "level": 3,
              "reference": "tooltip",
              "route": "core/components/tooltip",
              "title": "Tooltip"
            }
          ],
          "level": 2,
          "reference": "components",
          "route": "core/components",
          "title": "Components"
        }
      ],
      "level": 1,
      "reference": "core",
      "route": "core",
      "title": "Core"
    },
    {
      "children": [
        {
          "children": [
            {
              "title": "Modifiers",
              "level": 3,
              "route": "datetime/datepicker.modifiers"
            },
            {
              "title": "Props",
              "level": 3,
              "route": "datetime/datepicker.props"
            }
          ],
          "level": 2,
          "reference": "datepicker",
          "route": "datetime/datepicker",
          "title": "Date picker"
        },
        {
          "children": [
            {
              "title": "Date ranges",
              "level": 3,
              "route": "datetime/daterangepicker.date-ranges"
            },
            {
              "title": "Props",
              "level": 3,
              "route": "datetime/daterangepicker.props"
            }
          ],
          "level": 2,
          "reference": "daterangepicker",
          "route": "datetime/daterangepicker",
          "title": "Date range picker"
        },
        {
          "children": [
            {
              "title": "Props",
              "level": 3,
              "route": "datetime/timepicker.props"
            }
          ],
          "level": 2,
          "reference": "timepicker",
          "route": "datetime/timepicker",
          "title": "Time picker"
        },
        {
          "children": [
            {
              "title": "Props",
              "level": 3,
              "route": "datetime/datetimepicker.props"
            }
          ],
          "level": 2,
          "reference": "datetimepicker",
          "route": "datetime/datetimepicker",
          "title": "Date time picker"
        },
        {
          "children": [
            {
              "title": "Date formatting",
              "level": 3,
              "route": "datetime/dateinput.date-formatting"
            },
            {
              "title": "Props",
              "level": 3,
              "route": "datetime/dateinput.props"
            }
          ],
          "level": 2,
          "reference": "dateinput",
          "route": "datetime/dateinput",
          "title": "Date input"
        },
        {
          "children": [
            {
              "title": "Props",
              "level": 3,
              "route": "datetime/daterangeinput.props"
            }
          ],
          "level": 2,
          "reference": "daterangeinput",
          "route": "datetime/daterangeinput",
          "title": "Date range input"
        }
      ],
      "level": 1,
      "reference": "datetime",
      "route": "datetime",
      "title": "Datetime"
    },
    {
      "children": [],
      "level": 1,
      "reference": "icons",
      "route": "icons",
      "title": "Icons"
    },
    {
      "children": [
        {
          "children": [
            {
              "title": "Querying",
              "level": 3,
              "route": "select/select-component.querying"
            },
            {
              "title": "Non-ideal states",
              "level": 4,
              "route": "select/select-component.non-ideal-states"
            },
            {
              "title": "Custom menu",
              "level": 3,
              "route": "select/select-component.custom-menu"
            },
            {
              "title": "Controlled usage",
              "level": 3,
              "route": "select/select-component.controlled-usage"
            },
            {
              "title": "JavaScript API",
              "level": 3,
              "route": "select/select-component.javascript-api"
            },
            {
              "title": "Item renderer",
              "level": 4,
              "route": "select/select-component.item-renderer"
            },
            {
              "title": "Item list renderer",
              "level": 4,
              "route": "select/select-component.item-list-renderer"
            }
          ],
          "level": 2,
          "reference": "select-component",
          "route": "select/select-component",
          "title": "Select"
        },
        {
          "children": [],
          "level": 2,
          "reference": "suggest",
          "route": "select/suggest",
          "title": "Suggest"
        },
        {
          "children": [],
          "level": 2,
          "reference": "multi-select",
          "route": "select/multi-select",
          "title": "MultiSelect"
        },
        {
          "children": [],
          "level": 2,
          "reference": "omnibar",
          "route": "select/omnibar",
          "title": "Omnibar"
        },
        {
          "children": [
            {
              "title": "Renderer API",
              "level": 3,
              "route": "select/query-list.renderer-api"
            }
          ],
          "level": 2,
          "reference": "query-list",
          "route": "select/query-list",
          "title": "QueryList"
        }
      ],
      "level": 1,
      "reference": "select",
      "route": "select",
      "title": "Select"
    },
    {
      "children": [
        {
          "title": "Basic usage",
          "level": 2,
          "route": "table.basic-usage"
        },
        {
          "children": [
            {
              "title": "Sorting",
              "level": 3,
              "route": "table/features.sorting"
            },
            {
              "title": "Editing",
              "level": 3,
              "route": "table/features.editing"
            },
            {
              "title": "Reordering",
              "level": 3,
              "route": "table/features.reordering"
            },
            {
              "title": "Loading states",
              "level": 3,
              "route": "table/features.loading-states"
            },
            {
              "title": "Table loading states",
              "level": 4,
              "route": "table/features.table-loading-states"
            },
            {
              "title": "Column loading states",
              "level": 4,
              "route": "table/features.column-loading-states"
            },
            {
              "title": "Cells",
              "level": 4,
              "route": "table/features.cells"
            },
            {
              "title": "Formatting",
              "level": 3,
              "route": "table/features.formatting"
            },
            {
              "title": "Freezing",
              "level": 3,
              "route": "table/features.freezing"
            }
          ],
          "level": 2,
          "reference": "features",
          "route": "table/features",
          "title": "Table features"
        },
        {
          "children": [
            {
              "title": "Table",
              "level": 3,
              "route": "table/api.table"
            },
            {
              "title": "Instance methods",
              "level": 4,
              "route": "table/api.instance-methods"
            },
            {
              "title": "Column",
              "level": 3,
              "route": "table/api.column"
            },
            {
              "title": "Cell",
              "level": 3,
              "route": "table/api.cell"
            },
            {
              "title": "ColumnHeaderCell",
              "level": 3,
              "route": "table/api.columnheadercell"
            },
            {
              "title": "EditableName",
              "level": 3,
              "route": "table/api.editablename"
            },
            {
              "title": "EditableCell",
              "level": 3,
              "route": "table/api.editablecell"
            },
            {
              "title": "Region",
              "level": 3,
              "route": "table/api.region"
            },
            {
              "title": "TruncatedFormat",
              "level": 3,
              "route": "table/api.truncatedformat"
            },
            {
              "title": "JSONFormat",
              "level": 3,
              "route": "table/api.jsonformat"
            }
          ],
          "level": 2,
          "reference": "api",
          "route": "table/api",
          "title": "JavaScript API"
        }
      ],
      "level": 1,
      "reference": "table",
      "route": "table",
      "title": "Table"
    },
    {
      "children": [
        {
          "children": [
            {
              "title": "Props",
              "level": 3,
              "route": "timezone/timezone-picker.props"
            }
          ],
          "level": 2,
          "reference": "timezone-picker",
          "route": "timezone/timezone-picker",
          "title": "TimezonePicker"
        }
      ],
      "level": 1,
      "reference": "timezone",
      "route": "timezone",
      "title": "Timezone"
    },
    {
      "children": [],
      "level": 1,
      "reference": "labs",
      "route": "labs",
      "title": "Labs"
    },
    {
      "children": [
        {
          "title": "Sketch assets",
          "level": 2,
          "route": "resources.sketch-assets"
        }
      ],
      "level": 1,
      "reference": "resources",
      "route": "resources",
      "title": "Resources"
    }
  ],
  "pages": {
    "alert": {
      "reference": "alert",
      "route": "core/components/alert",
      "sourcePath": "packages/core/src/components/alert/alert.md",
      "title": "Alert",
      "contents": [
        {
          "tag": "heading",
          "value": "Alert",
          "level": 1,
          "route": "core/components/alert"
        },
        "<p>Alerts notify users of important information and force them to acknowledge the alert content before\ncontinuing.</p>\n<p>Although similar to <a href=\"#core/components/dialog\">dialogs</a>, alerts are more\nrestrictive and should only be used for important information. By default, the\nuser can only exit the alert by clicking one of the confirmation\nbuttons—clicking the overlay or pressing the <code>esc</code> key will not close the alert.\nThese interactions can be enabled via props.</p>\n",
        {
          "tag": "reactExample",
          "value": "AlertExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/alert.props"
        },
        "<p><code>Alert</code> only supports controlled usage through the <code>isOpen</code> prop. Use the\n<code>onConfirm</code> and <code>onCancel</code> props to respond to those interactions separately, or\nuse <code>onClose</code> to handle both at the same time.</p>\n",
        {
          "tag": "interface",
          "value": "IAlertProps"
        }
      ],
      "contentsRaw": "@# Alert\n\nAlerts notify users of important information and force them to acknowledge the alert content before\ncontinuing.\n\nAlthough similar to [dialogs](#core/components/dialog), alerts are more\nrestrictive and should only be used for important information. By default, the\nuser can only exit the alert by clicking one of the confirmation\nbuttons—clicking the overlay or pressing the `esc` key will not close the alert.\nThese interactions can be enabled via props.\n\n@reactExample AlertExample\n\n@## Props\n\n`Alert` only supports controlled usage through the `isOpen` prop. Use the\n`onConfirm` and `onCancel` props to respond to those interactions separately, or\nuse `onClose` to handle both at the same time.\n\n@interface IAlertProps",
      "metadata": {}
    },
    "breadcrumbs": {
      "reference": "breadcrumbs",
      "route": "core/components/breadcrumbs",
      "sourcePath": "packages/core/src/components/breadcrumbs/breadcrumbs.md",
      "title": "Breadcrumbs",
      "contents": [
        {
          "tag": "heading",
          "value": "Breadcrumbs",
          "level": 1,
          "route": "core/components/breadcrumbs"
        },
        "<p>Breadcrumbs identify the path to the current resource in an application.</p>\n",
        {
          "tag": "reactExample",
          "value": "BreadcrumbsExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/breadcrumbs.props"
        },
        {
          "tag": "heading",
          "value": "Breadcrumbs",
          "level": 3,
          "route": "core/components/breadcrumbs.breadcrumbs"
        },
        "<p>The <code>Breadcrumbs</code> component requires an <code>items</code> array of\n<a href=\"#core/components/breadcrumbs.breadcrumb\">breadcrumb props</a> and renders them in\nan <a href=\"#core/components/overflow-list\"><code>OverflowList</code></a> to automatically collapse\nbreadcrumbs that do not fit in the available space.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span class=\"meta object-binding-pattern-variable tsx\"><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Breadcrumbs</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>IBreadcrumbProps</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Icon</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other constant tsx\"><span>BREADCRUMBS</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>IBreadcrumbProps</span></span><span class=\"meta type tuple tsx\"><span class=\"meta brace square tsx\"><span>[</span><span>]</span></span></span><span>&nbsp;</span></span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>href</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>/users</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>icon</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>folder-close</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>text</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Users</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>href</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>/users/janet</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>icon</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>folder-close</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>text</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Janet</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>icon</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>document</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>text</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>image.jpg</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>]</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>BreadcrumbsExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Breadcrumbs</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>currentBreadcrumbRenderer</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>renderCurrentBreadcrumb</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>items</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other constant tsx\"><span>BREADCRUMBS</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx entity name function tsx\"><span>renderCurrentBreadcrumb</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"meta parameter object-binding-pattern tsx\"><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>text</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"keyword operator rest tsx\"><span>...</span></span><span class=\"variable parameter tsx\"><span>restProps</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>IBreadcrumbProps</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;customize&nbsp;rendering&nbsp;of&nbsp;last&nbsp;breadcrumb</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Breadcrumb</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"variable other readwrite tsx\"><span>restProps</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>text</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Icon</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>star</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Breadcrumb</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IBreadcrumbsProps"
        },
        {
          "tag": "heading",
          "value": "Breadcrumb",
          "level": 3,
          "route": "core/components/breadcrumbs.breadcrumb"
        },
        "<p>The <code>Breadcrumb</code> component renders an <code>a.bp3-breadcrumb</code> if given an <code>href</code> or\n<code>onClick</code> and a <code>span.bp3-breadcrumb</code> otherwise. Typically you will supply an\narray of <code>IBreadcrumbProps</code> to the <code>&lt;Breadcrumbs items&gt;</code> prop and only render\nthis component directly when defining a custom <code>breadcrumbRenderer</code>.</p>\n",
        {
          "tag": "interface",
          "value": "IBreadcrumbProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/breadcrumbs.css"
        },
        "<ul>\n<li>Begin with a <code>ul.bp3-breadcrumbs</code>; each crumb should be in its own <code>li</code> as a direct descendant.</li>\n<li>Breadcrumbs are typically navigation links (for example, to the parent folder in a file path), and\ntherefore should use <code>&lt;a&gt;</code> tags (except for the final breadcrumb).</li>\n<li>Each navigation breadcrumb should use <code>.bp3-breadcrumb</code>.</li>\n<li>Make a breadcrumb non-interactive with the <code>.bp3-disabled</code> class. You should only use this\nstate when you want to indicate that the user cannot navigate to the breadcrumb (for example, if\nthe user does not have permission to access it). Otherwise, clicking a breadcrumb should take the\nuser to that resource.</li>\n<li>Mark the final breadcrumb <code>.bp3-breadcrumb-current</code> for an emphasized appearance.</li>\n<li>The <code>.bp3-breadcrumbs-collapsed</code> button-like element can be used as the target for a dropdown menu\ncontaining breadcrumbs that are collapsed due to layout constraints.</li>\n<li>When adding another element (such as a <a href=\"#core/components/tooltip\">tooltip</a> or\n<a href=\"#core/components/popover\">popover</a>) to a breadcrumb, wrap it around the contents of the <code>li</code>.</li>\n</ul>\n",
        {
          "tag": "css",
          "value": "breadcrumbs"
        }
      ],
      "contentsRaw": "@# Breadcrumbs\n\nBreadcrumbs identify the path to the current resource in an application.\n\n@reactExample BreadcrumbsExample\n\n@## Props\n\n@### Breadcrumbs\n\nThe `Breadcrumbs` component requires an `items` array of\n[breadcrumb props](#core/components/breadcrumbs.breadcrumb) and renders them in\nan [`OverflowList`](#core/components/overflow-list) to automatically collapse\nbreadcrumbs that do not fit in the available space.\n\n```tsx\nconst { Breadcrumbs, IBreadcrumbProps, Icon } = \"@blueprintjs/core\";\n\nconst BREADCRUMBS: IBreadcrumbProps[] = [\n    { href: \"/users\", icon: \"folder-close\", text: \"Users\" },\n    { href: \"/users/janet\", icon: \"folder-close\", text: \"Janet\" },\n    { icon: \"document\", text: \"image.jpg\" },\n];\n\nexport class BreadcrumbsExample extends React.Component {\n    public render() {\n        return (\n            <Breadcrumbs\n                currentBreadcrumbRenderer={this.renderCurrentBreadcrumb}\n                items={BREADCRUMBS}\n             />\n        );\n    }\n    private renderCurrentBreadcrumb = ({ text, ...restProps }: IBreadcrumbProps) => {\n        // customize rendering of last breadcrumb\n        return <Breadcrumb {...restProps}>{text} <Icon icon=\"star\" /></Breadcrumb>;\n    };\n}\n```\n\n@interface IBreadcrumbsProps\n\n@### Breadcrumb\n\nThe `Breadcrumb` component renders an `a.bp3-breadcrumb` if given an `href` or\n`onClick` and a `span.bp3-breadcrumb` otherwise. Typically you will supply an\narray of `IBreadcrumbProps` to the `<Breadcrumbs items>` prop and only render\nthis component directly when defining a custom `breadcrumbRenderer`.\n\n@interface IBreadcrumbProps\n\n@## CSS\n\n* Begin with a `ul.bp3-breadcrumbs`; each crumb should be in its own `li` as a direct descendant.\n* Breadcrumbs are typically navigation links (for example, to the parent folder in a file path), and\ntherefore should use `<a>` tags (except for the final breadcrumb).\n* Each navigation breadcrumb should use `.bp3-breadcrumb`.\n* Make a breadcrumb non-interactive with the `.bp3-disabled` class. You should only use this\nstate when you want to indicate that the user cannot navigate to the breadcrumb (for example, if\nthe user does not have permission to access it). Otherwise, clicking a breadcrumb should take the\nuser to that resource.\n* Mark the final breadcrumb `.bp3-breadcrumb-current` for an emphasized appearance.\n* The `.bp3-breadcrumbs-collapsed` button-like element can be used as the target for a dropdown menu\ncontaining breadcrumbs that are collapsed due to layout constraints.\n* When adding another element (such as a [tooltip](#core/components/tooltip) or\n[popover](#core/components/popover)) to a breadcrumb, wrap it around the contents of the `li`.\n\n@css breadcrumbs",
      "metadata": {}
    },
    "button-group": {
      "reference": "button-group",
      "route": "core/components/button-group",
      "sourcePath": "packages/core/src/components/button/button-group.md",
      "title": "Button group",
      "contents": [
        {
          "tag": "heading",
          "value": "Button group",
          "level": 1,
          "route": "core/components/button-group"
        },
        "<p>Button groups arrange multiple buttons in a horizontal or vertical group.</p>\n",
        {
          "tag": "reactExample",
          "value": "ButtonGroupExample"
        },
        {
          "tag": "heading",
          "value": "Usage with popovers",
          "level": 2,
          "route": "core/components/button-group.usage-with-popovers"
        },
        "<p><code>Button</code>s inside a <code>ButtonGroup</code> can trivially be wrapped with a\n<a href=\"#core/components/popover\"><code>Popover</code></a> to create complex toolbars.</p>\n",
        {
          "tag": "reactExample",
          "value": "ButtonGroupPopoverExample"
        },
        {
          "tag": "heading",
          "value": "Flex layout",
          "level": 2,
          "route": "core/components/button-group.flex-layout"
        },
        "<p><code>ButtonGroup</code> is a CSS inline flex row (or column if vertical) and provides\nsome modifer props for common flexbox patterns:</p>\n<ul>\n<li><p>Enable the <code>fill</code> prop on a button group to make all buttons expand equally to\nfill the available space.</p>\n<ul>\n<li>Buttons will expand horizontally by default, or vertically if the <code>vertical</code> prop is enabled.</li>\n<li>Add the class <code>Classes.FIXED</code> to individual buttons to revert them to their initial sizes.</li>\n</ul>\n</li>\n<li><p>Alternatively, enable the <code>fill</code> prop on specific buttons (instead of on the\ngroup) to expand them equally to fill the available space while other\nbuttons retain their original sizes.</p>\n</li>\n</ul>\n<p>You can adjust the specific size of a button with the <code>flex-basis</code> or <code>width</code>\nCSS properties.</p>\n",
        {
          "tag": "heading",
          "value": "Vertical layout",
          "level": 2,
          "route": "core/components/button-group.vertical-layout"
        },
        "<p>Buttons in a vertical group all have the same width as the widest button in the\ngroup.</p>\n<p>Use the <code>alignText</code> prop to control icon and text alignment in the buttons. Set\nthis prop on <code>ButtonGroup</code> to affect all buttons in the group, or set the prop\non individual buttons directly.</p>\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/button-group.props"
        },
        "<p>Most of the <code>ButtonGroup</code> props are also supported by <code>Button</code> directly; setting\nthese props on <code>ButtonGroup</code> will apply the same value to all buttons in the\ngroup. Note that most modifiers, once enabled on the group, cannot be overridden\non child buttons (due to the cascading nature of CSS).</p>\n<p>The component also supports all HTML <code>&lt;div&gt;</code> props.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>ButtonGroup</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>minimal</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onMouseEnter</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>database</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Queries</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>function</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Functions</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>AnchorButton</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>rightIcon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>caret-down</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Options</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>AnchorButton</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>ButtonGroup</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IButtonGroupProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/button-group.css"
        },
        "<p>Arrange multiple buttons in a group by wrapping them in <code>.bp3-button-group</code>.\nYou can apply sizing directly on the button group container element.</p>\n<p>You should implement interactive segmented controls as button groups.</p>\n",
        {
          "tag": "css",
          "value": "button-group"
        }
      ],
      "contentsRaw": "@# Button group\n\nButton groups arrange multiple buttons in a horizontal or vertical group.\n\n@reactExample ButtonGroupExample\n\n@## Usage with popovers\n\n`Button`s inside a `ButtonGroup` can trivially be wrapped with a\n[`Popover`](#core/components/popover) to create complex toolbars.\n\n@reactExample ButtonGroupPopoverExample\n\n@## Flex layout\n\n`ButtonGroup` is a CSS inline flex row (or column if vertical) and provides\nsome modifer props for common flexbox patterns:\n\n- Enable the `fill` prop on a button group to make all buttons expand equally to\n  fill the available space.\n    - Buttons will expand horizontally by default, or vertically if the `vertical` prop is enabled.\n    - Add the class `Classes.FIXED` to individual buttons to revert them to their initial sizes.\n\n- Alternatively, enable the `fill` prop on specific buttons (instead of on the\n  group) to expand them equally to fill the available space while other\n  buttons retain their original sizes.\n\nYou can adjust the specific size of a button with the `flex-basis` or `width`\nCSS properties.\n\n@## Vertical layout\n\nButtons in a vertical group all have the same width as the widest button in the\ngroup.\n\nUse the `alignText` prop to control icon and text alignment in the buttons. Set\nthis prop on `ButtonGroup` to affect all buttons in the group, or set the prop\non individual buttons directly.\n\n@## Props\n\nMost of the `ButtonGroup` props are also supported by `Button` directly; setting\nthese props on `ButtonGroup` will apply the same value to all buttons in the\ngroup. Note that most modifiers, once enabled on the group, cannot be overridden\non child buttons (due to the cascading nature of CSS).\n\nThe component also supports all HTML `<div>` props.\n\n```tsx\n<ButtonGroup minimal={true} onMouseEnter={...}>\n    <Button icon=\"database\">Queries</Button>\n    <Button icon=\"function\">Functions</Button>\n    <AnchorButton rightIcon=\"caret-down\">Options</AnchorButton>\n</ButtonGroup>\n```\n\n@interface IButtonGroupProps\n\n@## CSS\n\nArrange multiple buttons in a group by wrapping them in `.bp3-button-group`.\nYou can apply sizing directly on the button group container element.\n\nYou should implement interactive segmented controls as button groups.\n\n@css button-group",
      "metadata": {}
    },
    "button": {
      "reference": "button",
      "route": "core/components/button",
      "sourcePath": "packages/core/src/components/button/button.md",
      "title": "Button",
      "contents": [
        {
          "tag": "heading",
          "value": "Button",
          "level": 1,
          "route": "core/components/button"
        },
        "<p>Buttons trigger actions when clicked.</p>\n",
        {
          "tag": "reactExample",
          "value": "ButtonsExample"
        },
        "<h3 id=\"anchorbutton\"><code>AnchorButton</code></h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>AnchorButton</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Click</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;renders:</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>a</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>class</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-button</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>role</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>tabIndex</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Click</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>a</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><h3 id=\"button\"><code>Button</code></h3>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>refresh</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;renders:</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>class</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-button</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>type</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>svg</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>class</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-icon</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>...</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>svg</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Disabled <code>Button</code> prevents all interaction</h4>\n    Use <code>AnchorButton</code> if you need mouse interaction events (such as hovering) on a disabled button.\n\n    <code>Button</code> uses the native <code>disabled</code> attribute on the <code>&lt;button&gt;</code> tag so the browser disables all interactions.\n    <code>AnchorButton</code> uses the class <code>.bp3-disabled</code> because <code>&lt;a&gt;</code> tags do not support the <code>disabled</code>\n    attribute. As a result, the <code>AnchorButton</code> component will prevent <em>only</em> the <code>onClick</code> handler\n    when disabled but permit other events.\n\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Adding icons",
          "level": 2,
          "route": "core/components/button.adding-icons"
        },
        "<p><code>Button</code> and <code>AnchorButton</code> support <code>icon</code> and <code>rightIcon</code> props to place an\nicon on either end of their children. Icons can also be supplied as children\nusing the <code>Icon</code> component.</p>\n",
        {
          "tag": "reactExample",
          "value": "ButtonsIconsExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/button.props"
        },
        "<p>The two button components each support arbitrary HTML props for their underlying\nDOM element (<code>&lt;button&gt;</code> and <code>&lt;a&gt;</code> respectively). Specifying an HTML prop will\noverride the component&#39;s default for it, such as <code>role</code> on <code>&lt;AnchorButton&gt;</code>.</p>\n",
        {
          "tag": "interface",
          "value": "IButtonProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/button.css"
        },
        "<p>Use the <code>bp3-button</code> class to access button styles. You should implement buttons using the\n<code>&lt;button&gt;</code> or <code>&lt;a&gt;</code> tags rather than <code>&lt;div&gt;</code> for accessibility.</p>\n<ul>\n<li>Make sure to include <code>type=&quot;button&quot;</code> on <code>&lt;button&gt;</code> tags (use <code>type=&quot;submit&quot;</code> to submit a\n<code>&lt;form&gt;</code>) and <code>role=&quot;button&quot;</code> on <code>&lt;a&gt;</code> tags for accessibility.</li>\n<li>Add the attribute <code>tabindex=&quot;0&quot;</code> to make <code>&lt;a&gt;</code> tags focusable. <code>&lt;button&gt;</code> elements are\nfocusable by default.</li>\n<li>For buttons implemented with <code>&lt;a&gt;</code> tags, add <code>tabindex=&quot;-1&quot;</code> to disabled buttons to prevent the\nuser from focusing them by pressing <kbd>tab</kbd> on the keyboard. (This does not happen in the example below.)</li>\n<li>Note that <code>&lt;a&gt;</code> tags do not respond to the <code>:disabled</code> attribute; use <code>.bp3-disabled</code> instead.</li>\n</ul>\n",
        {
          "tag": "css",
          "value": "button"
        }
      ],
      "contentsRaw": "@# Button\n\nButtons trigger actions when clicked.\n\n@reactExample ButtonsExample\n\n### `AnchorButton`\n\n```tsx\n<AnchorButton text=\"Click\" />\n// renders:\n<a class=\"bp3-button\" role=\"button\" tabIndex={0}>Click</a>\n```\n\n### `Button`\n\n```tsx\n<Button icon=\"refresh\" />\n// renders:\n<button class=\"bp3-button\" type=\"button\"><svg class=\"bp3-icon\">...</svg></button>\n```\n\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Disabled `Button` prevents all interaction</h4>\n    Use `AnchorButton` if you need mouse interaction events (such as hovering) on a disabled button.\n\n    `Button` uses the native `disabled` attribute on the `<button>` tag so the browser disables all interactions.\n    `AnchorButton` uses the class `.bp3-disabled` because `<a>` tags do not support the `disabled`\n    attribute. As a result, the `AnchorButton` component will prevent *only* the `onClick` handler\n    when disabled but permit other events.\n\n</div>\n\n@## Adding icons\n\n`Button` and `AnchorButton` support `icon` and `rightIcon` props to place an\nicon on either end of their children. Icons can also be supplied as children\nusing the `Icon` component.\n\n@reactExample ButtonsIconsExample\n\n@## Props\n\nThe two button components each support arbitrary HTML props for their underlying\nDOM element (`<button>` and `<a>` respectively). Specifying an HTML prop will\noverride the component's default for it, such as `role` on `<AnchorButton>`.\n\n@interface IButtonProps\n\n@## CSS\n\nUse the `bp3-button` class to access button styles. You should implement buttons using the\n`<button>` or `<a>` tags rather than `<div>` for accessibility.\n\n* Make sure to include `type=\"button\"` on `<button>` tags (use `type=\"submit\"` to submit a\n  `<form>`) and `role=\"button\"` on `<a>` tags for accessibility.\n* Add the attribute `tabindex=\"0\"` to make `<a>` tags focusable. `<button>` elements are\n  focusable by default.\n* For buttons implemented with `<a>` tags, add `tabindex=\"-1\"` to disabled buttons to prevent the\n  user from focusing them by pressing <kbd>tab</kbd> on the keyboard. (This does not happen in the example below.)\n* Note that `<a>` tags do not respond to the `:disabled` attribute; use `.bp3-disabled` instead.\n\n@css button",
      "metadata": {}
    },
    "callout": {
      "reference": "callout",
      "route": "core/components/callout",
      "sourcePath": "packages/core/src/components/callout/callout.md",
      "title": "Callout",
      "contents": [
        {
          "tag": "heading",
          "value": "Callout",
          "level": 1,
          "route": "core/components/callout"
        },
        "<p>Callouts visually highlight important content for the user. They can contain\na title, an icon and content. Each intent has a default icon associated with it.</p>\n",
        {
          "tag": "reactExample",
          "value": "CalloutExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/callout.props"
        },
        {
          "tag": "interface",
          "value": "ICalloutProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/callout.css"
        },
        "<p>Callouts use the same visual intent modifier classes as buttons. If you need a\nheading, use the <code>&lt;h4&gt;</code> element with a <code>.bp3-heading</code> class.</p>\n",
        {
          "tag": "css",
          "value": "callout"
        }
      ],
      "contentsRaw": "@# Callout\n\nCallouts visually highlight important content for the user. They can contain\na title, an icon and content. Each intent has a default icon associated with it.\n\n@reactExample CalloutExample\n\n@## Props\n\n@interface ICalloutProps\n\n@## CSS\n\nCallouts use the same visual intent modifier classes as buttons. If you need a\nheading, use the `<h4>` element with a `.bp3-heading` class.\n\n@css callout",
      "metadata": {}
    },
    "card": {
      "reference": "card",
      "route": "core/components/card",
      "sourcePath": "packages/core/src/components/card/card.md",
      "title": "Card",
      "contents": [
        {
          "tag": "heading",
          "value": "Card",
          "level": 1,
          "route": "core/components/card"
        },
        "<p>A card is a bounded unit of UI content with a solid background color.</p>\n",
        {
          "tag": "reactExample",
          "value": "CardExample"
        },
        {
          "tag": "heading",
          "value": "Elevation",
          "level": 2,
          "route": "core/components/card.elevation"
        },
        "<p>Apply an <code>elevation</code> value to a card to apply a drop shadow that simulates\nheight in the UI. Five elevations are supported, from 0 to 4.</p>\n<p>The <code>Classes.ELEVATION_*</code> constants can be used on any element (not just a\n<code>Card</code>) to apply the drop shadow.</p>\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/card.props"
        },
        "<p>This component is a simple stateless container for its children.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Card</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Elevation</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Card</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>interactive</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>elevation</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Elevation</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>TWO</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>h5</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>a</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>href</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>#</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Card&nbsp;heading</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>a</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>h5</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>p</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Card&nbsp;content</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>p</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Submit</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Card</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "ICardProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/card.css"
        },
        "<p>Start with <code>.bp3-card</code> and add an elevation class <code>.bp3-elevation-*</code> to apply a\ndrop shadow that simulates height in the UI.</p>\n<p>Add the <code>.bp3-interactive</code> modifier class to make a <code>.bp3-card</code> respond to user\ninteractions. When you hover over cards with this class applied, the mouse\nchanges to a pointer and increases the elevation shadow on the card.</p>\n",
        {
          "tag": "css",
          "value": "card"
        }
      ],
      "contentsRaw": "@# Card\n\nA card is a bounded unit of UI content with a solid background color.\n\n@reactExample CardExample\n\n@## Elevation\n\nApply an `elevation` value to a card to apply a drop shadow that simulates\nheight in the UI. Five elevations are supported, from 0 to 4.\n\nThe `Classes.ELEVATION_*` constants can be used on any element (not just a\n`Card`) to apply the drop shadow.\n\n@## Props\n\nThis component is a simple stateless container for its children.\n\n```tsx\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\n\n<Card interactive={true} elevation={Elevation.TWO}>\n    <h5><a href=\"#\">Card heading</a></h5>\n    <p>Card content</p>\n    <Button>Submit</Button>\n</Card>\n```\n\n@interface ICardProps\n\n@## CSS\n\nStart with `.bp3-card` and add an elevation class `.bp3-elevation-*` to apply a\ndrop shadow that simulates height in the UI.\n\nAdd the `.bp3-interactive` modifier class to make a `.bp3-card` respond to user\ninteractions. When you hover over cards with this class applied, the mouse\nchanges to a pointer and increases the elevation shadow on the card.\n\n@css card",
      "metadata": {}
    },
    "collapse": {
      "reference": "collapse",
      "route": "core/components/collapse",
      "sourcePath": "packages/core/src/components/collapse/collapse.md",
      "title": "Collapse",
      "contents": [
        {
          "tag": "heading",
          "value": "Collapse",
          "level": 1,
          "route": "core/components/collapse"
        },
        "<p>The <code>Collapse</code> element shows and hides content with a built-in slide in/out animation.\nYou might use this to create a panel of settings for your application, with sub-sections\nthat can be expanded and collapsed.</p>\n",
        {
          "tag": "reactExample",
          "value": "CollapseExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/collapse.props"
        },
        "<p>Any content should be a child of the <code>Collapse</code> element. Content must be in the document\nflow (e.g. <code>position: absolute;</code> wouldn&#39;t work, as the parent element would inherit a height of 0).</p>\n<p>Toggling the <code>isOpen</code> prop triggers the open and close animations.\nOnce the component is in the closed state, the children are no longer rendered, unless the\n<code>keepChildrenMounted</code> prop is true.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type interface tsx\"><span>interface</span></span><span>&nbsp;</span><span class=\"entity name type interface tsx\"><span>ICollapseExampleState</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>isOpen</span></span><span class=\"keyword operator optional tsx\"><span>?</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>boolean</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>CollapseExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ICollapseExampleState</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>state</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>isOpen</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false tsx\"><span>false</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleClick</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isOpen</span></span><span>&nbsp;</span><span class=\"keyword operator ternary tsx\"><span>?</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Hide</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"keyword operator ternary tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Show</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;build&nbsp;logs</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Collapse</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>isOpen</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isOpen</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>pre</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dummy&nbsp;text.</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>pre</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Collapse</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx entity name function tsx\"><span>handleClick</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>setState</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>isOpen</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"keyword operator logical tsx\"><span>!</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isOpen</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "ICollapseProps"
        }
      ],
      "contentsRaw": "@# Collapse\n\nThe `Collapse` element shows and hides content with a built-in slide in/out animation.\nYou might use this to create a panel of settings for your application, with sub-sections\nthat can be expanded and collapsed.\n\n@reactExample CollapseExample\n\n@## Props\n\nAny content should be a child of the `Collapse` element. Content must be in the document\nflow (e.g. `position: absolute;` wouldn't work, as the parent element would inherit a height of 0).\n\nToggling the `isOpen` prop triggers the open and close animations.\nOnce the component is in the closed state, the children are no longer rendered, unless the\n`keepChildrenMounted` prop is true.\n\n```tsx\nexport interface ICollapseExampleState {\n    isOpen?: boolean;\n};\n\nexport class CollapseExample extends React.Component<{}, ICollapseExampleState> {\n    public state = {\n        isOpen: false,\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button onClick={this.handleClick}>\n                    {this.state.isOpen ? \"Hide\" : \"Show\"} build logs\n                </Button>\n                <Collapse isOpen={this.state.isOpen}>\n                    <pre>\n                        Dummy text.\n                    </pre>\n                </Collapse>\n            </div>\n        );\n    }\n\n    private handleClick = () => {\n        this.setState({ isOpen: !this.state.isOpen });\n    }\n}\n```\n\n@interface ICollapseProps",
      "metadata": {}
    },
    "collapsible-list": {
      "reference": "collapsible-list",
      "route": "core/components/collapsible-list",
      "sourcePath": "packages/core/src/components/collapsible-list/collapsible-list.md",
      "title": "Collapsible list",
      "contents": [
        {
          "tag": "heading",
          "value": "Collapsible list",
          "level": 1,
          "route": "core/components/collapsible-list"
        },
        "<p>The <code>CollapsibleList</code> component accepts a list of menu items and a count of\nvisible items. It shows precisely that many items and collapses the rest into a\ndropdown menu. The required <code>visibleItemRenderer</code> callback prop allows for\ncustomizing the appearance of visible items, using the props from the <code>MenuItem</code>\nchildren.</p>\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Deprecated: use <a href=\"#core/components/overflow-list\">Overflow list</a></h4>\n    This component is <strong>deprecated since 3.0.0</strong> with the introduction of\n    <a href=\"#core/components/overflow-list\"><code>OverflowList</code></a> which provides a similar\n    experience with two distinct advantages:\n    <ol>\n        <li>Items collapse automatically based on available space in the container.</li>\n        <li>\n            <code>OverflowList</code> accepts a generic array of items (instead of explicit\n            <code>&lt;MenuItem&gt;</code> children) with custom renderers for both visible and overflowed\n            items, allowing for <em>any</em> UI, not just a dropdown menu.\n        </li>\n    </ol>\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "CollapsibleListExample"
        },
        {
          "tag": "heading",
          "value": "Separators",
          "level": 2,
          "route": "core/components/collapsible-list.separators"
        },
        "<p>Often a list of items calls for separators between each item.\nAdding separators to a <code>CollapsibleList</code> is easily achieved via CSS using <code>::after</code> pseudo-elements.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;pass&nbsp;`visibleItemClassName=&quot;my-list-item&quot;`&nbsp;to&nbsp;component,&nbsp;then...</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>my-list-item</span></span><span class=\"entity other attribute-name pseudo-element css\"><span class=\"punctuation definition entity css\"><span>::</span></span><span>after</span></span><span>&nbsp;</span><span class=\"meta property-list scss\"><span class=\"punctuation section property-list begin scss\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>display</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"support constant property-value scss\"><span>inline-block</span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>content</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"comment line scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;//</span><span>&nbsp;custom&nbsp;separator&nbsp;styles...</span><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"punctuation section property-list end scss\"><span>}</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;remove&nbsp;separator&nbsp;after&nbsp;the&nbsp;last&nbsp;item</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>my-list-item</span></span><span class=\"entity other attribute-name pseudo-class css\"><span class=\"punctuation definition entity css\"><span>:</span></span><span>last-child</span></span><span class=\"entity other attribute-name pseudo-element css\"><span class=\"punctuation definition entity css\"><span>::</span></span><span>after</span></span><span>&nbsp;</span><span class=\"meta property-list scss\"><span class=\"punctuation section property-list begin scss\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>display</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"support constant property-value scss\"><span>none</span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"punctuation section property-list end scss\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/collapsible-list.props"
        },
        "<p>Children of the <code>CollapsibleList</code> component <em>must</em> be <code>MenuItem</code>s so they can be easily rendered\nin the dropdown. Define a <code>visibleItemRenderer</code> callback to customize the appearance of visible\nitems using their <a href=\"#core/components/menu.menu-item\"><code>IMenuItemProps</code></a>.</p>\n",
        {
          "tag": "interface",
          "value": "ICollapsibleListProps"
        }
      ],
      "contentsRaw": "@# Collapsible list\n\nThe `CollapsibleList` component accepts a list of menu items and a count of\nvisible items. It shows precisely that many items and collapses the rest into a\ndropdown menu. The required `visibleItemRenderer` callback prop allows for\ncustomizing the appearance of visible items, using the props from the `MenuItem`\nchildren.\n\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Deprecated: use [Overflow list](#core/components/overflow-list)</h4>\n    This component is **deprecated since 3.0.0** with the introduction of\n    [`OverflowList`](#core/components/overflow-list) which provides a similar\n    experience with two distinct advantages:\n    <ol>\n        <li>Items collapse automatically based on available space in the container.</li>\n        <li>\n            `OverflowList` accepts a generic array of items (instead of explicit\n            `<MenuItem>` children) with custom renderers for both visible and overflowed\n            items, allowing for _any_ UI, not just a dropdown menu.\n        </li>\n    </ol>\n</div>\n\n@reactExample CollapsibleListExample\n\n@## Separators\n\nOften a list of items calls for separators between each item.\nAdding separators to a `CollapsibleList` is easily achieved via CSS using `::after` pseudo-elements.\n\n```css.scss\n// pass `visibleItemClassName=\"my-list-item\"` to component, then...\n\n.my-list-item::after {\n    display: inline-block;\n    content: \"\";\n    // custom separator styles...\n}\n\n// remove separator after the last item\n.my-list-item:last-child::after {\n    display: none;\n}\n```\n\n@## Props\n\nChildren of the `CollapsibleList` component _must_ be `MenuItem`s so they can be easily rendered\nin the dropdown. Define a `visibleItemRenderer` callback to customize the appearance of visible\nitems using their [`IMenuItemProps`](#core/components/menu.menu-item).\n\n@interface ICollapsibleListProps",
      "metadata": {}
    },
    "components": {
      "reference": "components",
      "route": "core/components",
      "sourcePath": "packages/core/src/components/components.md",
      "title": "Components",
      "contents": [
        {
          "tag": "heading",
          "value": "Components",
          "level": 1,
          "route": "core/components"
        },
        "<!-- Exact ordering of components in the navbar: -->\n",
        {
          "tag": "page",
          "value": "breadcrumbs"
        },
        {
          "tag": "page",
          "value": "button"
        },
        {
          "tag": "page",
          "value": "button-group"
        },
        {
          "tag": "page",
          "value": "callout"
        },
        {
          "tag": "page",
          "value": "card"
        },
        {
          "tag": "page",
          "value": "collapse"
        },
        {
          "tag": "page",
          "value": "collapsible-list"
        },
        {
          "tag": "page",
          "value": "divider"
        },
        {
          "tag": "page",
          "value": "editable-text"
        },
        {
          "tag": "page",
          "value": "html"
        },
        {
          "tag": "page",
          "value": "html-table"
        },
        {
          "tag": "page",
          "value": "hotkeys"
        },
        {
          "tag": "page",
          "value": "icon"
        },
        {
          "tag": "page",
          "value": "menu"
        },
        {
          "tag": "page",
          "value": "navbar"
        },
        {
          "tag": "page",
          "value": "non-ideal-state"
        },
        {
          "tag": "page",
          "value": "overflow-list"
        },
        {
          "tag": "page",
          "value": "panel-stack"
        },
        {
          "tag": "page",
          "value": "progress-bar"
        },
        {
          "tag": "page",
          "value": "resize-sensor"
        },
        {
          "tag": "page",
          "value": "skeleton"
        },
        {
          "tag": "page",
          "value": "spinner"
        },
        {
          "tag": "page",
          "value": "tabs"
        },
        {
          "tag": "page",
          "value": "tag"
        },
        {
          "tag": "page",
          "value": "text"
        },
        {
          "tag": "page",
          "value": "tree"
        },
        {
          "tag": "heading",
          "value": "Form controls",
          "level": 2,
          "route": "core/components.form-controls"
        },
        {
          "tag": "page",
          "value": "form-group"
        },
        {
          "tag": "page",
          "value": "control-group"
        },
        {
          "tag": "page",
          "value": "label"
        },
        {
          "tag": "page",
          "value": "checkbox"
        },
        {
          "tag": "page",
          "value": "radio"
        },
        {
          "tag": "page",
          "value": "html-select"
        },
        {
          "tag": "page",
          "value": "sliders"
        },
        {
          "tag": "page",
          "value": "switch"
        },
        {
          "tag": "heading",
          "value": "Form inputs",
          "level": 2,
          "route": "core/components.form-inputs"
        },
        {
          "tag": "page",
          "value": "file-input"
        },
        {
          "tag": "page",
          "value": "numeric-input"
        },
        {
          "tag": "page",
          "value": "text-inputs"
        },
        {
          "tag": "page",
          "value": "tag-input"
        },
        {
          "tag": "heading",
          "value": "Overlays",
          "level": 2,
          "route": "core/components.overlays"
        },
        {
          "tag": "page",
          "value": "overlay"
        },
        {
          "tag": "page",
          "value": "portal"
        },
        {
          "tag": "page",
          "value": "alert"
        },
        {
          "tag": "page",
          "value": "context-menu"
        },
        {
          "tag": "page",
          "value": "dialog"
        },
        {
          "tag": "page",
          "value": "popover"
        },
        {
          "tag": "page",
          "value": "toast"
        },
        {
          "tag": "page",
          "value": "tooltip"
        }
      ],
      "contentsRaw": "@# Components\n\n<!-- Exact ordering of components in the navbar: -->\n\n@page breadcrumbs\n@page button\n@page button-group\n@page callout\n@page card\n@page collapse\n@page collapsible-list\n@page divider\n@page editable-text\n@page html\n@page html-table\n@page hotkeys\n@page icon\n@page menu\n@page navbar\n@page non-ideal-state\n@page overflow-list\n@page panel-stack\n@page progress-bar\n@page resize-sensor\n@page skeleton\n@page spinner\n@page tabs\n@page tag\n@page text\n@page tree\n\n@## Form controls\n\n@page form-group\n@page control-group\n@page label\n@page checkbox\n@page radio\n@page html-select\n@page sliders\n@page switch\n\n@## Form inputs\n\n@page file-input\n@page numeric-input\n@page text-inputs\n@page tag-input\n\n@## Overlays\n\n@page overlay\n@page portal\n@page alert\n@page context-menu\n@page dialog\n@page popover\n@page toast\n@page tooltip",
      "metadata": {}
    },
    "context-menu": {
      "reference": "context-menu",
      "route": "core/components/context-menu",
      "sourcePath": "packages/core/src/components/context-menu/context-menu.md",
      "title": "Context menu",
      "contents": [
        {
          "tag": "heading",
          "value": "Context menu",
          "level": 1,
          "route": "core/components/context-menu"
        },
        "<p>Context menus present the user with a list of actions upon a right-click.</p>\n<p>You can create context menus in either of the following ways:</p>\n<ol>\n<li>Adding the <code>@ContextMenuTarget</code> <a href=\"#core/components/context-menu.decorator-usage\">decorator</a>\nto a React component that implements <code>renderContextMenu(): JSX.Element</code>.</li>\n<li>Use the <a href=\"#core/components/context-menu.imperative-usage\">imperative</a> <code>ContextMenu.show</code>\nand <code>ContextMenu.hide</code> API methods, ideal for non-React-based applications.</li>\n</ol>\n",
        {
          "tag": "reactExample",
          "value": "ContextMenuExample"
        },
        {
          "tag": "heading",
          "value": "Decorator usage",
          "level": 2,
          "route": "core/components/context-menu.decorator-usage"
        },
        "<p>The <code>@ContextMenuTarget</code> <a href=\"https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md\">class decorator</a> can be applied to any <code>React.Component</code>\nclass that meets the following requirements:</p>\n<ul>\n<li>It defines an instance method called <code>renderContextMenu()</code> that returns a single <code>JSX.Element</code>\n(most likely a <a href=\"#core/components/menu\"><code>Menu</code></a>) or <code>undefined</code>.</li>\n<li><p>Its root element supports the <code>&quot;contextmenu&quot;</code> event and the <code>onContextMenu</code> prop.</p>\n<p>This is always true if the decorated class uses an intrinsic element, such\nas <code>&lt;div&gt;</code>, as its root. If it uses a custom element as its root, you must\nensure that the prop is implemented correctly for that element.</p>\n</li>\n</ul>\n<p>When the user triggers the <code>&quot;contextmenu&quot;</code> event on the decorated class, <code>renderContextMenu()</code> is\ncalled. If <code>renderContextMenu()</code> returns an element, the browser&#39;s native <a href=\"https://en.wikipedia.org/wiki/Context_menu\">context menu</a> is\nblocked and the returned element is displayed instead in a <code>Popover</code> at the cursor&#39;s location.</p>\n<p>If the instance has a <code>onContextMenuClose</code> method, the decorator will call this function when\nthe context menu is closed.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>ContextMenuTarget</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Menu</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>MenuItem</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta decorator tsx\"><span class=\"punctuation decorator tsx\"><span>@</span></span><span class=\"variable other readwrite tsx\"><span>ContextMenuTarget</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>RightClickMe</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;root&nbsp;element&nbsp;must&nbsp;support&nbsp;`onContextMenu`</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>renderContextMenu</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;return&nbsp;a&nbsp;single&nbsp;element,&nbsp;or&nbsp;nothing&nbsp;to&nbsp;use&nbsp;default&nbsp;browser&nbsp;behavior</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleSave</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Save</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleDelete</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Delete</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>onContextMenuClose</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;Optional&nbsp;method&nbsp;called&nbsp;once&nbsp;the&nbsp;context&nbsp;menu&nbsp;is&nbsp;closed.</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Imperative usage",
          "level": 2,
          "route": "core/components/context-menu.imperative-usage"
        },
        "<p>The imperative API provides a single static <code>ContextMenu</code> object, enforcing the\nprinciple that only one context menu can be open at a time. This API is ideal\nfor programmatically triggered menus or for non-React apps.</p>\n<ul>\n<li><p><code>ContextMenu.show(menu: JSX.Element, offset: IOffset, onClose?: () =&gt; void): void</code></p>\n<p>Show the given element at the given offset from the top-left corner of the\nviewport. Showing a menu closes the previously shown one automatically. The\nmenu appears below-right of this point, but will flip to below-left instead if\nthere is not enough room on-screen. The optional callback is invoked when this\nmenu closes.</p>\n</li>\n<li><p><code>ContextMenu.hide(): void</code></p>\n<p>Hide the context menu, if it is open.</p>\n</li>\n<li><p><code>ContextMenu.isOpen(): boolean</code></p>\n<p>Whether a context menu is currently visible.</p>\n</li>\n</ul>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source ts\"><span class=\"meta import ts\"><span class=\"keyword control import ts\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block ts\"><span class=\"punctuation definition block ts\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias ts\"><span>ContextMenu</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias ts\"><span>Menu</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias ts\"><span>MenuItem</span></span><span>&nbsp;</span><span class=\"punctuation definition block ts\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from ts\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double ts\"><span class=\"punctuation definition string begin ts\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end ts\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta var expr ts\"><span class=\"storage type ts\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr ts\"><span class=\"meta definition variable ts variable other readwrite ts\"><span>rightClickMe</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment ts\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call ts\"><span class=\"support variable dom ts\"><span>document</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"support function dom ts\"><span>querySelector</span></span></span><span class=\"meta brace round ts\"><span>(</span></span><span class=\"string quoted double ts\"><span class=\"punctuation definition string begin ts\"><span>&quot;</span></span><span>#right-click-me</span><span class=\"punctuation definition string end ts\"><span>&quot;</span></span></span><span class=\"meta brace round ts\"><span>)</span></span><span>&nbsp;</span><span class=\"keyword control as ts\"><span>as</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>HTMLElement</span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"variable other object ts\"><span>rightClickMe</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"entity name function ts\"><span>oncontextmenu</span></span><span>&nbsp;</span><span class=\"keyword operator assignment ts\"><span>=</span></span><span class=\"meta arrow ts\"><span>&nbsp;</span><span class=\"meta parameters ts\"><span class=\"punctuation definition parameters begin ts\"><span>(</span></span><span class=\"variable parameter ts\"><span>e</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>MouseEvent</span></span></span><span class=\"punctuation definition parameters end ts\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow ts\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block ts\"><span class=\"punctuation definition block ts\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"punctuation whitespace comment leading ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;prevent&nbsp;the&nbsp;browser&#39;s&nbsp;native&nbsp;context&nbsp;menu</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call ts\"><span class=\"variable other object ts\"><span>e</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"support function dom ts\"><span>preventDefault</span></span></span><span class=\"meta brace round ts\"><span>(</span><span>)</span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"punctuation whitespace comment leading ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;render&nbsp;a&nbsp;Menu&nbsp;without&nbsp;JSX...</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta var expr ts\"><span class=\"storage type ts\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr ts\"><span class=\"meta definition variable ts variable other readwrite ts\"><span>menu</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment ts\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call ts\"><span class=\"variable other object ts\"><span>React</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"support function dom ts\"><span>createElement</span></span></span><span class=\"meta brace round ts\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"meta var expr ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite ts\"><span>Menu</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"meta var expr ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta objectliteral ts\"><span class=\"punctuation definition block ts\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;empty&nbsp;props</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"meta var expr ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call ts\"><span class=\"variable other object ts\"><span>React</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"support function dom ts\"><span>createElement</span></span></span><span class=\"meta brace round ts\"><span>(</span></span><span class=\"variable other readwrite ts\"><span>MenuItem</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"meta objectliteral ts\"><span class=\"punctuation definition block ts\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>onClick</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite ts\"><span>handleSave</span></span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>text</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double ts\"><span class=\"punctuation definition string begin ts\"><span>&quot;</span></span><span>Save</span><span class=\"punctuation definition string end ts\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block ts\"><span>}</span></span></span><span class=\"meta brace round ts\"><span>)</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"meta var expr ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call ts\"><span class=\"variable other object ts\"><span>React</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"support function dom ts\"><span>createElement</span></span></span><span class=\"meta brace round ts\"><span>(</span></span><span class=\"variable other readwrite ts\"><span>MenuItem</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"meta objectliteral ts\"><span class=\"punctuation definition block ts\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>onClick</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite ts\"><span>handleDelete</span></span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>text</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double ts\"><span class=\"punctuation definition string begin ts\"><span>&quot;</span></span><span>Delete</span><span class=\"punctuation definition string end ts\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block ts\"><span>}</span></span></span><span class=\"meta brace round ts\"><span>)</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"meta var expr ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round ts\"><span>)</span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"punctuation whitespace comment leading ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;mouse&nbsp;position&nbsp;is&nbsp;available&nbsp;on&nbsp;event</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call ts\"><span class=\"variable other object ts\"><span>ContextMenu</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"entity name function ts\"><span>show</span></span></span><span class=\"meta brace round ts\"><span>(</span></span><span class=\"variable other readwrite ts\"><span>menu</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"meta objectliteral ts\"><span class=\"punctuation definition block ts\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>left</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object ts\"><span>e</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"variable other property ts\"><span>clientX</span></span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>top</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object ts\"><span>e</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"variable other property ts\"><span>clientY</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block ts\"><span>}</span></span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span class=\"meta arrow ts\"><span>&nbsp;</span><span class=\"meta parameters ts\"><span class=\"punctuation definition parameters begin ts\"><span>(</span></span><span class=\"punctuation definition parameters end ts\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow ts\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block ts\"><span class=\"punctuation definition block ts\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"punctuation whitespace comment leading ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;menu&nbsp;was&nbsp;closed;&nbsp;callback&nbsp;optional</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block ts\"><span>}</span></span></span></span><span class=\"meta brace round ts\"><span>)</span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta arrow ts\"><span class=\"meta block ts\"><span class=\"punctuation definition block ts\"><span>}</span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div></pre>"
      ],
      "contentsRaw": "@# Context menu\n\nContext menus present the user with a list of actions upon a right-click.\n\nYou can create context menus in either of the following ways:\n\n1. Adding the `@ContextMenuTarget` [decorator](#core/components/context-menu.decorator-usage)\n  to a React component that implements `renderContextMenu(): JSX.Element`.\n1. Use the [imperative](#core/components/context-menu.imperative-usage) `ContextMenu.show`\n  and `ContextMenu.hide` API methods, ideal for non-React-based applications.\n\n@reactExample ContextMenuExample\n\n@## Decorator usage\n\nThe `@ContextMenuTarget` [class decorator][ts-decorator] can be applied to any `React.Component`\nclass that meets the following requirements:\n\n- It defines an instance method called `renderContextMenu()` that returns a single `JSX.Element`\n(most likely a [`Menu`](#core/components/menu)) or `undefined`.\n- Its root element supports the `\"contextmenu\"` event and the `onContextMenu` prop.\n\n  This is always true if the decorated class uses an intrinsic element, such\n  as `<div>`, as its root. If it uses a custom element as its root, you must\n  ensure that the prop is implemented correctly for that element.\n\nWhen the user triggers the `\"contextmenu\"` event on the decorated class, `renderContextMenu()` is\ncalled. If `renderContextMenu()` returns an element, the browser's native [context menu][wiki-cm] is\nblocked and the returned element is displayed instead in a `Popover` at the cursor's location.\n\nIf the instance has a `onContextMenuClose` method, the decorator will call this function when\nthe context menu is closed.\n\n```tsx\nimport { ContextMenuTarget, Menu, MenuItem } from \"@blueprintjs/core\";\n\n@ContextMenuTarget\nclass RightClickMe extends React.Component<{}, {}> {\n    public render() {\n        // root element must support `onContextMenu`\n        return <div>{...}</div>;\n    }\n\n    public renderContextMenu() {\n        // return a single element, or nothing to use default browser behavior\n        return (\n            <Menu>\n                <MenuItem onClick={this.handleSave} text=\"Save\" />\n                <MenuItem onClick={this.handleDelete} text=\"Delete\" />\n            </Menu>\n        );\n    }\n\n    public onContextMenuClose() {\n        // Optional method called once the context menu is closed.\n    }\n}\n```\n\n[ts-decorator]: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Decorators.md\n[wiki-cm]: https://en.wikipedia.org/wiki/Context_menu\n\n@## Imperative usage\n\nThe imperative API provides a single static `ContextMenu` object, enforcing the\nprinciple that only one context menu can be open at a time. This API is ideal\nfor programmatically triggered menus or for non-React apps.\n\n- `ContextMenu.show(menu: JSX.Element, offset: IOffset, onClose?: () => void): void`\n\n  Show the given element at the given offset from the top-left corner of the\n  viewport. Showing a menu closes the previously shown one automatically. The\n  menu appears below-right of this point, but will flip to below-left instead if\n  there is not enough room on-screen. The optional callback is invoked when this\n  menu closes.\n\n- `ContextMenu.hide(): void`\n\n  Hide the context menu, if it is open.\n\n- `ContextMenu.isOpen(): boolean`\n\n  Whether a context menu is currently visible.\n\n\n```ts\nimport { ContextMenu, Menu, MenuItem } from \"@blueprintjs/core\";\n\nconst rightClickMe = document.querySelector(\"#right-click-me\") as HTMLElement;\nrightClickMe.oncontextmenu = (e: MouseEvent) => {\n    // prevent the browser's native context menu\n    e.preventDefault();\n\n    // render a Menu without JSX...\n    const menu = React.createElement(\n        Menu,\n        {}, // empty props\n        React.createElement(MenuItem, { onClick: handleSave, text: \"Save\" }),\n        React.createElement(MenuItem, { onClick: handleDelete, text: \"Delete\" }),\n    );\n\n    // mouse position is available on event\n    ContextMenu.show(menu, { left: e.clientX, top: e.clientY }, () => {\n        // menu was closed; callback optional\n    });\n};\n```",
      "metadata": {}
    },
    "dialog": {
      "reference": "dialog",
      "route": "core/components/dialog",
      "sourcePath": "packages/core/src/components/dialog/dialog.md",
      "title": "Dialog",
      "contents": [
        {
          "tag": "heading",
          "value": "Dialog",
          "level": 1,
          "route": "core/components/dialog"
        },
        "<p>Dialogs present content overlaid over other parts of the UI.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Terminology note</h4>\n    The term &quot;modal&quot; is sometimes used to mean &quot;dialog,&quot; but this is a misnomer.\n    <em>Modal</em> is an adjective that describes parts of a UI.\n    An element is considered modal if it\n    <a href=\"https://en.wikipedia.org/wiki/Modal_window\">blocks interaction with the rest of the application</a>.\n    We use the term &quot;dialog&quot; to avoid confusion with the adjective.\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "DialogExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/dialog.props"
        },
        "<p><code>Dialog</code> is a stateless React component controlled by the <code>isOpen</code> prop.</p>\n<p>The children you provide to this component are rendered as contents inside the\n<code>Classes.DIALOG</code> element. Typically, you will want to provide a child with\n<code>Classes.DIALOG_BODY</code> that contains the body content and a child with\n<code>Classes.DIALOG_FOOTER</code> that contains the action buttons.</p>\n",
        {
          "tag": "interface",
          "value": "IDialogProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/dialog.css"
        },
        "<p>You can create dialogs manually using the HTML markup and <code>bp3-dialog-*</code> classes below.\nHowever, you should use the <a href=\"#core/components/dialog.props\"><code>Dialog</code> component</a>\nwhenever possible, as they automatically generate some of this markup.</p>\n<p>More examples of dialog content are shown below.</p>\n",
        {
          "tag": "css",
          "value": "dialog"
        }
      ],
      "contentsRaw": "@# Dialog\n\nDialogs present content overlaid over other parts of the UI.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Terminology note</h4>\n    The term \"modal\" is sometimes used to mean \"dialog,\" but this is a misnomer.\n    _Modal_ is an adjective that describes parts of a UI.\n    An element is considered modal if it\n    [blocks interaction with the rest of the application](https://en.wikipedia.org/wiki/Modal_window).\n    We use the term \"dialog\" to avoid confusion with the adjective.\n</div>\n\n@reactExample DialogExample\n\n@## Props\n\n`Dialog` is a stateless React component controlled by the `isOpen` prop.\n\nThe children you provide to this component are rendered as contents inside the\n`Classes.DIALOG` element. Typically, you will want to provide a child with\n`Classes.DIALOG_BODY` that contains the body content and a child with\n`Classes.DIALOG_FOOTER` that contains the action buttons.\n\n@interface IDialogProps\n\n@## CSS\n\nYou can create dialogs manually using the HTML markup and `bp3-dialog-*` classes below.\nHowever, you should use the [`Dialog` component](#core/components/dialog.props)\nwhenever possible, as they automatically generate some of this markup.\n\nMore examples of dialog content are shown below.\n\n@css dialog",
      "metadata": {}
    },
    "divider": {
      "reference": "divider",
      "route": "core/components/divider",
      "sourcePath": "packages/core/src/components/divider/divider.md",
      "title": "Divider",
      "contents": [
        {
          "tag": "heading",
          "value": "Divider",
          "level": 1,
          "route": "core/components/divider"
        },
        "<p><code>Divider</code> visually separate contents with a thin line and margin on all sides.</p>\n<p>Dividers work best in flex layouts where they will adapt to orientation without\nadditional styles. Otherwise, a divider will appear as a full-width 1px-high\nblock element.</p>\n",
        {
          "tag": "reactExample",
          "value": "DividerExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/divider.props"
        },
        {
          "tag": "interface",
          "value": "IDividerProps"
        }
      ],
      "contentsRaw": "\n@# Divider\n\n`Divider` visually separate contents with a thin line and margin on all sides.\n\nDividers work best in flex layouts where they will adapt to orientation without\nadditional styles. Otherwise, a divider will appear as a full-width 1px-high\nblock element.\n\n@reactExample DividerExample\n\n@## Props\n\n@interface IDividerProps",
      "metadata": {
        "tag": "new"
      }
    },
    "editable-text": {
      "reference": "editable-text",
      "route": "core/components/editable-text",
      "sourcePath": "packages/core/src/components/editable-text/editable-text.md",
      "title": "Editable text",
      "contents": [
        {
          "tag": "heading",
          "value": "Editable text",
          "level": 1,
          "route": "core/components/editable-text"
        },
        "<p><code>EditableText</code> appears as normal UI text but transforms into a text input field\nwhen the user focuses it.</p>\n<p>The text input inherits all font styling from its ancestors, making for a\nseamless transition between reading and editing text.</p>\n<p>You might use this component for inline renaming, or for an\n<a href=\"#core/components/editable-text.multiline-mode\">editable multiline description</a>.\nYou should not use <code>EditableText</code> when a static always-editable <code>&lt;input&gt;</code> or\n<code>&lt;textarea&gt;</code> tag would suffice.</p>\n",
        {
          "tag": "reactExample",
          "value": "EditableTextExample"
        },
        "<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Centering the component</h4>\n    <strong>Do not center this component</strong> using <code>text-align: center</code>, as it will cause an infinite loop\n    in the browser (<a href=\"https://github.com/JedWatson/react-select/issues/540\">more details</a>). Instead,\n    you should center the component via flexbox or with <code>position</code> and <code>transform: translateX(-50%)</code>.\n</div>\n\n\n",
        {
          "tag": "heading",
          "value": "Multiline mode",
          "level": 2,
          "route": "core/components/editable-text.multiline-mode"
        },
        "<p>By default, <code>EditableText</code> supports <em>exactly one line of text</em> and will grow or\nshrink horizontally based on the length of text.</p>\n<p>Enable the <code>multiline</code> prop to use a <code>&lt;textarea&gt;</code> that spans multiple lines\ninstead of an <code>&lt;input type=&quot;text&quot;&gt;</code>. Multiline mode always appears at 100% width\nand adjusts <em>vertically</em> based on length of text. Use the <code>minLines</code> and\n<code>maxLines</code> props to constrain the height of the component.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>EditableText</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>multiline</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>minLines</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>3</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>maxLines</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>12</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"variable other readwrite tsx\"><span>props</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>Users confirm text in multiline mode by pressing <code>ctrl</code>+<code>enter</code> or <code>cmd</code>+<code>enter</code>\nrather than simply <code>enter</code>. (Pressing the <code>enter</code> key by itself moves the cursor\nto the next line.) This behavior can be inverted with the <code>confirmOnEnterKey</code>\nprop.</p>\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/editable-text.props"
        },
        "<p><code>EditableText</code> is used like an <a href=\"https://facebook.github.io/react/docs/forms.html\"><code>input</code>\nelement</a> and supports\ncontrolled or uncontrolled usage through the <code>value</code> or <code>defaultValue</code> props,\nrespectively. Use <code>onChange</code> to listen to ongoing updates and use <code>onConfirm</code>\nand <code>onCancel</code> to listen only to completed or canceled edits.</p>\n<p>The <code>onConfirm</code> and <code>onCancel</code> callbacks are invoked based on user interaction.\nThe user presses <code>enter</code> (or <code>cmd</code>+<code>enter</code> when multiline) or blurs the input to\nconfirm the current value, or presses <code>esc</code> to cancel. Canceling resets the\nfield to the last confirmed value. Neither callback is invoked if the value is\nunchanged.</p>\n",
        {
          "tag": "interface",
          "value": "IEditableTextProps"
        }
      ],
      "contentsRaw": "@# Editable text\n\n`EditableText` appears as normal UI text but transforms into a text input field\nwhen the user focuses it.\n\nThe text input inherits all font styling from its ancestors, making for a\nseamless transition between reading and editing text.\n\nYou might use this component for inline renaming, or for an\n[editable multiline description](#core/components/editable-text.multiline-mode).\nYou should not use `EditableText` when a static always-editable `<input>` or\n`<textarea>` tag would suffice.\n\n@reactExample EditableTextExample\n\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Centering the component</h4>\n    **Do not center this component** using `text-align: center`, as it will cause an infinite loop\n    in the browser ([more details](https://github.com/JedWatson/react-select/issues/540)). Instead,\n    you should center the component via flexbox or with `position` and `transform: translateX(-50%)`.\n</div>\n\n\n@## Multiline mode\n\nBy default, `EditableText` supports _exactly one line of text_ and will grow or\nshrink horizontally based on the length of text.\n\nEnable the `multiline` prop to use a `<textarea>` that spans multiple lines\ninstead of an `<input type=\"text\">`. Multiline mode always appears at 100% width\nand adjusts _vertically_ based on length of text. Use the `minLines` and\n`maxLines` props to constrain the height of the component.\n\n```tsx\n<EditableText multiline={true} minLines={3} maxLines={12} {...props} />\n```\n\nUsers confirm text in multiline mode by pressing `ctrl`+`enter` or `cmd`+`enter`\nrather than simply `enter`. (Pressing the `enter` key by itself moves the cursor\nto the next line.) This behavior can be inverted with the `confirmOnEnterKey`\nprop.\n\n@## Props\n\n`EditableText` is used like an [`input`\nelement](https://facebook.github.io/react/docs/forms.html) and supports\ncontrolled or uncontrolled usage through the `value` or `defaultValue` props,\nrespectively. Use `onChange` to listen to ongoing updates and use `onConfirm`\nand `onCancel` to listen only to completed or canceled edits.\n\nThe `onConfirm` and `onCancel` callbacks are invoked based on user interaction.\nThe user presses `enter` (or `cmd`+`enter` when multiline) or blurs the input to\nconfirm the current value, or presses `esc` to cancel. Canceling resets the\nfield to the last confirmed value. Neither callback is invoked if the value is\nunchanged.\n\n@interface IEditableTextProps",
      "metadata": {}
    },
    "checkbox": {
      "reference": "checkbox",
      "route": "core/components/checkbox",
      "sourcePath": "packages/core/src/components/forms/checkbox.md",
      "title": "Checkbox",
      "contents": [
        {
          "tag": "heading",
          "value": "Checkbox",
          "level": 1,
          "route": "core/components/checkbox"
        },
        "<p>A checkbox allows the user to toggle between checked, unchecked, and (rarely)\nindeterminate states.</p>\n",
        {
          "tag": "reactExample",
          "value": "CheckboxExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/checkbox.props"
        },
        "<p>Use the <code>checked</code> prop instead of <code>value</code> in controlled mode to avoid typings\nissues. Enable the <code>indeterminate</code> prop for a third in-between state.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;simple&nbsp;usage&nbsp;for&nbsp;string&nbsp;labels</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Checkbox</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>checked</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isEnabled</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Enabled</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleEnabledChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;advanced&nbsp;usage&nbsp;for&nbsp;JSX&nbsp;content</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Checkbox</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>checked</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isEnabled</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleEnabledChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Icon</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>user</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Gilad&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>strong</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Gray</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>strong</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Checkbox</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><p>This component supports the full range of HTML <code>&lt;input&gt;</code> props. The most common\noptions are detailed below.</p>\n",
        {
          "tag": "interface",
          "value": "ICheckboxProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/checkbox.css"
        },
        "<p>Blueprint&#39;s custom checkboxes use an extra <code>.bp3-control-indicator</code> element\nafter the <code>&lt;input&gt;</code> to achieve their custom styling. You should then wrap the\nwhole thing in a <code>&lt;label&gt;</code> with the classes <code>.bp3-control.bp3-checkbox</code>.</p>\n<p>Note that attribute modifiers (<code>:checked</code>, <code>:disabled</code>) are applied on the\ninternal <code>&lt;input&gt;</code> element. Further note that <code>:indeterminate</code> can only be set\nvia JavaScript (the <code>Checkbox</code> React component supports it handily with a prop).</p>\n",
        {
          "tag": "css",
          "value": "checkbox"
        }
      ],
      "contentsRaw": "@# Checkbox\n\nA checkbox allows the user to toggle between checked, unchecked, and (rarely)\nindeterminate states.\n\n@reactExample CheckboxExample\n\n@## Props\n\nUse the `checked` prop instead of `value` in controlled mode to avoid typings\nissues. Enable the `indeterminate` prop for a third in-between state.\n\n```tsx\n// simple usage for string labels\n<Checkbox checked={this.state.isEnabled} label=\"Enabled\" onChange={this.handleEnabledChange} />\n\n// advanced usage for JSX content\n<Checkbox checked={this.state.isEnabled} onChange={this.handleEnabledChange}>\n    <Icon icon=\"user\" />\n    Gilad <strong>Gray</strong>\n</Checkbox>\n```\n\nThis component supports the full range of HTML `<input>` props. The most common\noptions are detailed below.\n\n@interface ICheckboxProps\n\n@## CSS\n\nBlueprint's custom checkboxes use an extra `.bp3-control-indicator` element\nafter the `<input>` to achieve their custom styling. You should then wrap the\nwhole thing in a `<label>` with the classes `.bp3-control.bp3-checkbox`.\n\nNote that attribute modifiers (`:checked`, `:disabled`) are applied on the\ninternal `<input>` element. Further note that `:indeterminate` can only be set\nvia JavaScript (the `Checkbox` React component supports it handily with a prop).\n\n@css checkbox",
      "metadata": {}
    },
    "control-group": {
      "reference": "control-group",
      "route": "core/components/control-group",
      "sourcePath": "packages/core/src/components/forms/control-group.md",
      "title": "Control group",
      "contents": [
        {
          "tag": "heading",
          "value": "Control group",
          "level": 1,
          "route": "core/components/control-group"
        },
        "<p>A control group renders several distinct form controls as one unit, squaring the\nborders between them. It supports any number of buttons, text inputs, input\ngroups, and HTML selects as direct children.</p>\n<div class=\"bp3-callout bp3-intent-success bp3-icon-comparison\">\n    <h4 class=\"bp3-heading\">Control group vs. input group</h4>\n    <p>Both components group multiple elements into a single unit, but their usage patterns are\n    quite different.</p>\n    <p>Think of <code>ControlGroup</code> as a parent with multiple children, with each one a separate\n    control.</p>\n    <p>Conversely, an <code>InputGroup</code> is a single control, and should function like so. A\n    button inside of an input group should only affect that input; if its reach is further, then it\n    should be promoted to live in a control group.</p>\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "ControlGroupExample"
        },
        {
          "tag": "heading",
          "value": "Flex layout",
          "level": 2,
          "route": "core/components/control-group.flex-layout"
        },
        "<p><code>ControlGroup</code> is a CSS inline flex row (or column if vertical) and provides\nsome modifer props for common flexbox patterns:</p>\n<ul>\n<li><p>Enable the <code>fill</code> prop on a control group to make all controls expand equally to\nfill the available space.</p>\n<ul>\n<li>Controls will expand horizontally by default, or vertically if the <code>vertical</code> prop is enabled.</li>\n<li>Add the class <code>Classes.FIXED</code> to individual controls to revert them to their initial sizes.</li>\n</ul>\n</li>\n<li><p>Alternatively, enable the <code>fill</code> prop on specific controls (instead of on the\ngroup) to expand them equally to fill the available space while other\ncontrols retain their original sizes.</p>\n</li>\n</ul>\n<p>You can adjust the specific size of a control with the <code>flex-basis</code> or <code>width</code>\nCSS properties.</p>\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/control-group.props"
        },
        "<p>This component is a lightweight wrapper around its children. It supports all\nHTML <code>&lt;div&gt;</code> props, in addition to those listed below.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>ControlGroup</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>fill</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>vertical</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean false tsx\"><span>false</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>filter</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Filter</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>InputGroup</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>placeholder</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Find&nbsp;filters...</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>ControlGroup</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IControlGroupProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/control-group.css"
        },
        "<p>A <code>.bp3-control-group</code> renders several distinct controls as one unit, squaring the borders between\nthem. It supports any number of <code>.bp3-button</code>, <code>.bp3-input</code>, <code>.bp3-input-group</code>, and <code>.bp3-select</code>\nelements as direct children.</p>\n<p>Note that <code>.bp3-control-group</code> does not cascade any modifiers to its children. For example, each\nchild must be marked individually as <code>.bp3-large</code> for uniform large appearance.</p>\n",
        {
          "tag": "css",
          "value": "control-group"
        }
      ],
      "contentsRaw": "@# Control group\n\nA control group renders several distinct form controls as one unit, squaring the\nborders between them. It supports any number of buttons, text inputs, input\ngroups, and HTML selects as direct children.\n\n<div class=\"bp3-callout bp3-intent-success bp3-icon-comparison\">\n    <h4 class=\"bp3-heading\">Control group vs. input group</h4>\n    <p>Both components group multiple elements into a single unit, but their usage patterns are\n    quite different.</p>\n    <p>Think of `ControlGroup` as a parent with multiple children, with each one a separate\n    control.</p>\n    <p>Conversely, an `InputGroup` is a single control, and should function like so. A\n    button inside of an input group should only affect that input; if its reach is further, then it\n    should be promoted to live in a control group.</p>\n</div>\n\n@reactExample ControlGroupExample\n\n@## Flex layout\n\n`ControlGroup` is a CSS inline flex row (or column if vertical) and provides\nsome modifer props for common flexbox patterns:\n\n- Enable the `fill` prop on a control group to make all controls expand equally to\n  fill the available space.\n    - Controls will expand horizontally by default, or vertically if the `vertical` prop is enabled.\n    - Add the class `Classes.FIXED` to individual controls to revert them to their initial sizes.\n\n- Alternatively, enable the `fill` prop on specific controls (instead of on the\n  group) to expand them equally to fill the available space while other\n  controls retain their original sizes.\n\nYou can adjust the specific size of a control with the `flex-basis` or `width`\nCSS properties.\n\n@## Props\n\nThis component is a lightweight wrapper around its children. It supports all\nHTML `<div>` props, in addition to those listed below.\n\n```tsx\n<ControlGroup fill={true} vertical={false}>\n    <Button icon=\"filter\">Filter</Button>\n    <InputGroup placeholder=\"Find filters...\" />\n</ControlGroup>\n```\n\n@interface IControlGroupProps\n\n@## CSS\n\nA `.bp3-control-group` renders several distinct controls as one unit, squaring the borders between\nthem. It supports any number of `.bp3-button`, `.bp3-input`, `.bp3-input-group`, and `.bp3-select`\nelements as direct children.\n\nNote that `.bp3-control-group` does not cascade any modifiers to its children. For example, each\nchild must be marked individually as `.bp3-large` for uniform large appearance.\n\n@css control-group",
      "metadata": {}
    },
    "file-input": {
      "reference": "file-input",
      "route": "core/components/file-input",
      "sourcePath": "packages/core/src/components/forms/file-input.md",
      "title": "File input",
      "contents": [
        {
          "tag": "heading",
          "value": "File input",
          "level": 1,
          "route": "core/components/file-input"
        },
        "<p>Use the standard <code>input type=&quot;file&quot;</code> along with a <code>span</code> with class <code>bp3-file-upload-input</code>.\nWrap that all in a <code>label</code> with class <code>bp3-file-input</code>.</p>\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/file-input.props"
        },
        "<p>This component is a lightweight wrapper around the underlying <code>&lt;label&gt;</code> element\nwhich contain an <code>&lt;input type=&quot;file&quot;&gt;</code>. It supports the full range of HTML <code>&lt;label&gt;</code> props.</p>\n<p>Use <code>inputProps</code> to apply props to the <code>&lt;input&gt;</code> element.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Static file name</h4>\n    File name does not update on file selection. To get this behavior,\n    you must implement it separately in JS.\n</div>\n\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FileInput</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>disabled</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Choose&nbsp;file...</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onInputChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IFileInputProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/file-input.css"
        },
        {
          "tag": "css",
          "value": "file-input"
        }
      ],
      "contentsRaw": "@# File input\n\nUse the standard `input type=\"file\"` along with a `span` with class `bp3-file-upload-input`.\nWrap that all in a `label` with class `bp3-file-input`.\n\n@## Props\n\nThis component is a lightweight wrapper around the underlying `<label>` element\nwhich contain an `<input type=\"file\">`. It supports the full range of HTML `<label>` props.\n\nUse `inputProps` to apply props to the `<input>` element.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Static file name</h4>\n    File name does not update on file selection. To get this behavior,\n    you must implement it separately in JS.\n</div>\n\n```tsx\n<FileInput disabled={true} text=\"Choose file...\" onInputChange={...} />\n```\n\n@interface IFileInputProps\n\n@## CSS\n\n@css file-input",
      "metadata": {}
    },
    "form-group": {
      "reference": "form-group",
      "route": "core/components/form-group",
      "sourcePath": "packages/core/src/components/forms/form-group.md",
      "title": "Form group",
      "contents": [
        {
          "tag": "heading",
          "value": "Form group",
          "level": 1,
          "route": "core/components/form-group"
        },
        "<p>Form groups support more complex form controls than <a href=\"#core/components/label\">simple labels</a>,\nsuch as <a href=\"#core/components/control-group\">control groups</a> or <a href=\"#core/components/numeric-input\"><code>NumericInput</code></a>.\nThey also support additional helper text to aid with user navigation.</p>\n",
        {
          "tag": "reactExample",
          "value": "FormGroupExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/form-group.props"
        },
        "<p>This component is a lightweight wrapper around its children with props for the\nlabel above and helper text below.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FormGroup</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>helperText</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Helper&nbsp;text&nbsp;with&nbsp;details...</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Label&nbsp;A</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>labelFor</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>text-input</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>labelInfo</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>(required)</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>InputGroup</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>id</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>text-input</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>placeholder</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Placeholder&nbsp;text</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FormGroup</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IFormGroupProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/form-group.css"
        },
        "<ul>\n<li><p>Link each label to its respective control element with a <code>for={#id}</code> attribute on the <code>&lt;label&gt;</code> and\n<code>id={#id}</code> on the control.</p>\n</li>\n<li><p>Add <code>.bp3-intent-*</code> or <code>.bp3-disabled</code> to <code>.bp3-form-group</code> to style the label and helper text.\nSimilar to labels, nested controls need to be styled separately.</p>\n</li>\n<li><p>Add <code>.bp3-inline</code> to <code>.bp3-form-group</code> to place the label to the left of the control.</p>\n</li>\n<li><p>Add <code>.bp3-large</code> to <code>.bp3-form-group</code> to align the label when used with large inline Blueprint controls.</p>\n</li>\n</ul>\n",
        {
          "tag": "css",
          "value": "form-group"
        }
      ],
      "contentsRaw": "@# Form group\n\nForm groups support more complex form controls than [simple labels](#core/components/label),\nsuch as [control groups](#core/components/control-group) or [`NumericInput`](#core/components/numeric-input).\nThey also support additional helper text to aid with user navigation.\n\n@reactExample FormGroupExample\n\n@## Props\n\nThis component is a lightweight wrapper around its children with props for the\nlabel above and helper text below.\n\n```tsx\n<FormGroup\n    helperText=\"Helper text with details...\"\n    label=\"Label A\"\n    labelFor=\"text-input\"\n    labelInfo=\"(required)\"\n>\n    <InputGroup id=\"text-input\" placeholder=\"Placeholder text\" />\n</FormGroup>\n```\n\n@interface IFormGroupProps\n\n@## CSS\n\n- Link each label to its respective control element with a `for={#id}` attribute on the `<label>` and\n`id={#id}` on the control.\n\n- Add `.bp3-intent-*` or `.bp3-disabled` to `.bp3-form-group` to style the label and helper text.\nSimilar to labels, nested controls need to be styled separately.\n\n- Add `.bp3-inline` to `.bp3-form-group` to place the label to the left of the control.\n\n- Add `.bp3-large` to `.bp3-form-group` to align the label when used with large inline Blueprint controls.\n\n@css form-group",
      "metadata": {}
    },
    "label": {
      "reference": "label",
      "route": "core/components/label",
      "sourcePath": "packages/core/src/components/forms/label.md",
      "title": "Label",
      "contents": [
        {
          "tag": "heading",
          "value": "Label",
          "level": 1,
          "route": "core/components/label"
        },
        "<p>Labels enhance the usability of your forms.</p>\n<p>Wrapping a <code>&lt;label&gt;</code> element around a form input effectively increases the area\nwhere the user can click to activate the control. Notice how in the examples\nbelow, clicking a label focuses its <code>&lt;input&gt;</code>.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Prefer form groups over labels</h4>\n    The <a href=\"#core/components/form-group\">React <code>FormGroup</code> component</a> provides\n    additional functionality such as helper text and modifier props as well as\n    full label support. <code>FormGroup</code> supports both simple and complex use cases,\n    therefore we recommend using it exclusively when constructing forms.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/label.props"
        },
        "<p>This component supports the full range of HTML props.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Label</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;A</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>input</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>INPUT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>placeholder</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Placeholder&nbsp;text</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Label</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Label</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>htmlFor</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>input-b</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Label&nbsp;B</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Label</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>input</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>INPUT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>id</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>input-b</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>placeholder</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Placeholder&nbsp;text</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "ILabelProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/label.css"
        },
        "<p>Simple labels are useful for basic forms for a single <code>&lt;input&gt;</code>.</p>\n<p>Apply disabled styles with the <code>bp3-disabled</code> class. This styles the label text,\nbut does not disable any nested children like inputs or selects. You must add\nthe <code>:disabled</code> attribute directly to any nested elements to disable them.\nSimilarly the respective <code>bp3-*</code> form control will need a <code>.bp3-disabled</code>\nmodifier. See the examples below.</p>\n",
        {
          "tag": "css",
          "value": "label"
        }
      ],
      "contentsRaw": "@# Label\n\nLabels enhance the usability of your forms.\n\nWrapping a `<label>` element around a form input effectively increases the area\nwhere the user can click to activate the control. Notice how in the examples\nbelow, clicking a label focuses its `<input>`.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Prefer form groups over labels</h4>\n    The [React `FormGroup` component](#core/components/form-group) provides\n    additional functionality such as helper text and modifier props as well as\n    full label support. `FormGroup` supports both simple and complex use cases,\n    therefore we recommend using it exclusively when constructing forms.\n</div>\n\n@## Props\n\nThis component supports the full range of HTML props.\n\n```tsx\n<Label>\n    Label A\n    <input className={Classes.INPUT} placeholder=\"Placeholder text\" />\n</Label>\n\n<Label htmlFor=\"input-b\">Label B</Label>\n<input className={Classes.INPUT} id=\"input-b\" placeholder=\"Placeholder text\" />\n```\n\n@interface ILabelProps\n\n@## CSS\n\nSimple labels are useful for basic forms for a single `<input>`.\n\nApply disabled styles with the `bp3-disabled` class. This styles the label text,\nbut does not disable any nested children like inputs or selects. You must add\nthe `:disabled` attribute directly to any nested elements to disable them.\nSimilarly the respective `bp3-*` form control will need a `.bp3-disabled`\nmodifier. See the examples below.\n\n@css label",
      "metadata": {}
    },
    "numeric-input": {
      "reference": "numeric-input",
      "route": "core/components/numeric-input",
      "sourcePath": "packages/core/src/components/forms/numeric-input.md",
      "title": "Numeric input",
      "contents": [
        {
          "tag": "heading",
          "value": "Numeric input",
          "level": 1,
          "route": "core/components/numeric-input"
        },
        "<p>The <code>NumericInput</code> component provides controls for easily inputting,\nincrementing, and decrementing numeric values.</p>\n",
        {
          "tag": "heading",
          "value": "Interactions",
          "level": 2,
          "route": "core/components/numeric-input.interactions"
        },
        "<p>Values in numeric inputs can be incremented or decremented using both keyboard and mouse interactions.</p>\n<h5 id=\"keyboard-interactions\">Keyboard interactions</h5>\n<ul>\n<li><code>↑/↓</code> - change the value by one step (default: <code>±1</code>)</li>\n<li><code>Shift + ↑/↓</code> - change the value by one major step (default: <code>±10</code>)</li>\n<li><code>Alt + ↑/↓</code> - change the value by one minor step (default: <code>±0.1</code>)</li>\n</ul>\n<h5 id=\"mouse-interactions\">Mouse interactions</h5>\n<ul>\n<li><code>Click ⌃/⌄</code> - change the value by one step (default: <code>±1</code>)</li>\n<li><code>Shift + Click ⌃/⌄</code> - change the value by one major step (default: <code>±10</code>)</li>\n<li><code>Alt + Click ⌃/⌄</code> - change the value by one minor step (default: <code>±0.1</code>)</li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Basic example",
          "level": 2,
          "route": "core/components/numeric-input.basic-example"
        },
        "<p>This example shows how <code>NumericInput</code> works out of the box. It supports the\nbasic keyboard and mouse interactions listed above, as well as basic keyboard\nentry:</p>\n",
        {
          "tag": "reactExample",
          "value": "NumericInputBasicExample"
        },
        {
          "tag": "heading",
          "value": "Extended example",
          "level": 2,
          "route": "core/components/numeric-input.extended-example"
        },
        "<p>This example shows how <code>NumericInput</code> can be extended beyond its core\nfunctionality. It supports the basic interactions above as well as each of the\nfollowing types of input:</p>\n<ul>\n<li><strong>Number abbreviations</strong> (e.g. <code>2.1k</code>, <code>-0.3m</code>)</li>\n<li><strong>Scientific notation</strong> (e.g. <code>2.1e3</code>, <code>-0.3e6</code>)</li>\n<li><strong>Addition and subtraction expressions</strong> (e.g. <code>3+2</code>, <code>0.1m - 5k + 1</code>)</li>\n</ul>\n<p>These special-case inputs are evaluated when <code>Enter</code> is pressed (via a\ncustom <code>onKeyDown</code> callback) and when the field loses focus (via a custom\n<code>onBlur</code> callback). If the input is invalid when either of these callbacks is\ntrigged, the field will be cleared.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    This example contains non-core functionality that is meant to demonstrate\n    the extensibility of the <code>NumericInput</code> component. The correctness of the\n    custom evaluation code has not been tested robustly.\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "NumericInputExtendedExample"
        },
        {
          "tag": "heading",
          "value": "JavaScript API",
          "level": 2,
          "route": "core/components/numeric-input.javascript-api"
        },
        "<p>The <code>NumericInput</code> component is available in the <strong>@blueprintjs/core</strong> package.\nMake sure to review the <a href=\"#blueprint/getting-started\">getting started docs for installation info</a>.</p>\n",
        {
          "tag": "interface",
          "value": "INumericInputProps"
        },
        {
          "tag": "heading",
          "value": "Responsive numeric inputs",
          "level": 3,
          "route": "core/components/numeric-input.responsive-numeric-inputs"
        },
        "<p><code>NumericInput</code> can be styled with the same set of CSS classes that modify\nregular <a href=\"#core/components/control-group\">control groups</a>. The most appropriate\nsuch modifier for <code>NumericInput</code> is <code>bp3-fill</code>, which when passed as a\n<code>className</code> will make the component expand to fill all available width.</p>\n",
        {
          "tag": "heading",
          "value": "Uncontrolled mode",
          "level": 3,
          "route": "core/components/numeric-input.uncontrolled-mode"
        },
        "<p>By default, this component will function in uncontrolled mode, managing all of\nits own state. In uncontrolled mode, simply provide an <code>onValueChange</code> callback\nin the props to access the value as the user manipulates it. The value will be\nprovided to the callback both as a number and as a string.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>NumericInput</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>NumericInputExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>NumericInput</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onValueChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleValueChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx entity name function tsx\"><span>handleValueChange</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>valueAsNumber</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>valueAsString</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>string</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"support class console tsx\"><span>console</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function console tsx\"><span>log</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Value&nbsp;as&nbsp;number:</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>valueAsNumber</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"support class console tsx\"><span>console</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function console tsx\"><span>log</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Value&nbsp;as&nbsp;string:</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>valueAsString</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Controlled mode",
          "level": 3,
          "route": "core/components/numeric-input.controlled-mode"
        },
        "<p>If you prefer to have more control over your numeric input&#39;s behavior, you can\nspecify the <code>value</code> property to use the component in <strong>controlled mode</strong>.\nnumeric input supports arbitrary text entry--not just numeric digits–-so the\n<code>value</code> can be provided as either a number or a string.</p>\n<p>The combined support of arbitrary text entry, controlled mode, and custom\ncallbacks makes it possible to extend the numeric input&#39;s basic functionality in\npowerful ways. As shown in the example above, one could extend the numeric input\ncomponent with support for mathematical expressions as follows:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>NumericInput</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"constant language import-export-all tsx\"><span>*</span></span><span>&nbsp;</span><span class=\"keyword control as tsx\"><span>as</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>SomeLibrary</span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>some-library</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>NumericInputExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>value</span></span><span class=\"keyword operator optional tsx\"><span>?</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span><span>&nbsp;</span><span class=\"keyword operator type tsx\"><span>|</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta type parameters tsx\"><span class=\"meta object type tsx\"><span class=\"support type primitive tsx\"><span>string</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>state</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>value</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language null tsx\"><span>null</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>NumericInput</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onValueChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleValueChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>value</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx entity name function tsx\"><span>handleValueChange</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>_valueAsNumber</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>valueAsString</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>string</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span><span class=\"meta object member tsx\"><span class=\"variable other readwrite tsx\"><span>result</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>SomeLibrary</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>evaluateMathExpression</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>valueAsString</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.s</span><span class=\"meta method declaration tsx\"><span class=\"meta definition method tsx entity name function tsx\"><span>etState</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"meta parameter object-binding-pattern tsx\"><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable object property tsx\"><span>value</span></span><span class=\"punctuation destructuring tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>result</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>"
      ],
      "contentsRaw": "@# Numeric input\n\nThe `NumericInput` component provides controls for easily inputting,\nincrementing, and decrementing numeric values.\n\n@## Interactions\n\nValues in numeric inputs can be incremented or decremented using both keyboard and mouse interactions.\n\n##### Keyboard interactions\n\n- `↑/↓` - change the value by one step (default: `±1`)\n- `Shift + ↑/↓` - change the value by one major step (default: `±10`)\n- `Alt + ↑/↓` - change the value by one minor step (default: `±0.1`)\n\n##### Mouse interactions\n\n- `Click ⌃/⌄` - change the value by one step (default: `±1`)\n- `Shift + Click ⌃/⌄` - change the value by one major step (default: `±10`)\n- `Alt + Click ⌃/⌄` - change the value by one minor step (default: `±0.1`)\n\n@## Basic example\n\nThis example shows how `NumericInput` works out of the box. It supports the\nbasic keyboard and mouse interactions listed above, as well as basic keyboard\nentry:\n\n@reactExample NumericInputBasicExample\n\n@## Extended example\n\nThis example shows how `NumericInput` can be extended beyond its core\nfunctionality. It supports the basic interactions above as well as each of the\nfollowing types of input:\n\n- **Number abbreviations** (e.g. `2.1k`, `-0.3m`)\n- **Scientific notation** (e.g. `2.1e3`, `-0.3e6`)\n- **Addition and subtraction expressions** (e.g. `3+2`, `0.1m - 5k + 1`)\n\nThese special-case inputs are evaluated when `Enter` is pressed (via a\ncustom `onKeyDown` callback) and when the field loses focus (via a custom\n`onBlur` callback). If the input is invalid when either of these callbacks is\ntrigged, the field will be cleared.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    This example contains non-core functionality that is meant to demonstrate\n    the extensibility of the `NumericInput` component. The correctness of the\n    custom evaluation code has not been tested robustly.\n</div>\n\n@reactExample NumericInputExtendedExample\n\n@## JavaScript API\n\nThe `NumericInput` component is available in the __@blueprintjs/core__ package.\nMake sure to review the [getting started docs for installation info](#blueprint/getting-started).\n\n@interface INumericInputProps\n\n@### Responsive numeric inputs\n\n`NumericInput` can be styled with the same set of CSS classes that modify\nregular [control groups](#core/components/control-group). The most appropriate\nsuch modifier for `NumericInput` is `bp3-fill`, which when passed as a\n`className` will make the component expand to fill all available width.\n\n@### Uncontrolled mode\n\nBy default, this component will function in uncontrolled mode, managing all of\nits own state. In uncontrolled mode, simply provide an `onValueChange` callback\nin the props to access the value as the user manipulates it. The value will be\nprovided to the callback both as a number and as a string.\n\n```tsx\nimport { NumericInput } from \"@blueprintjs/core\";\n\nexport class NumericInputExample extends React.Component<{}, {}> {\n    public render() {\n        return (\n            <NumericInput onValueChange={this.handleValueChange} />\n        );\n    }\n\n    private handleValueChange = (valueAsNumber: number, valueAsString: string) => {\n        console.log(\"Value as number:\", valueAsNumber);\n        console.log(\"Value as string:\", valueAsString);\n    }\n}\n```\n\n@### Controlled mode\n\nIf you prefer to have more control over your numeric input's behavior, you can\nspecify the `value` property to use the component in **controlled mode**.\nnumeric input supports arbitrary text entry--not just numeric digits–-so the\n`value` can be provided as either a number or a string.\n\nThe combined support of arbitrary text entry, controlled mode, and custom\ncallbacks makes it possible to extend the numeric input's basic functionality in\npowerful ways. As shown in the example above, one could extend the numeric input\ncomponent with support for mathematical expressions as follows:\n\n```tsx\nimport { NumericInput } from \"@blueprintjs/core\";\nimport * as SomeLibrary from \"some-library\";\n\nexport class NumericInputExample extends React.Component<{}, { value?: number |\nstring }> {\n    public state = { value: null };\n\n    public render() {\n        return (\n            <NumericInput\n                onValueChange={this.handleValueChange}\n                value={this.state.value}\n            />\n        );\n    }\n\n    private handleValueChange = (_valueAsNumber: number, valueAsString: string) {\n        const result = SomeLibrary.evaluateMathExpression(valueAsString);\n        this.setState({ value: result });\n    }\n}\n```",
      "metadata": {}
    },
    "radio": {
      "reference": "radio",
      "route": "core/components/radio",
      "sourcePath": "packages/core/src/components/forms/radio.md",
      "title": "Radio",
      "contents": [
        {
          "tag": "heading",
          "value": "Radio",
          "level": 1,
          "route": "core/components/radio"
        },
        "<p>A radio button typically represents a single option in a mutually exclusive list\n(where only one item can be selected at a time). Blueprint provides <code>Radio</code> and\n<code>RadioGroup</code> components for these two layers.</p>\n",
        {
          "tag": "reactExample",
          "value": "RadioExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/radio.props"
        },
        "<p>Typically, radio buttons are used in a group to choose one option from several,\nsimilar to how a <code>&lt;select&gt;</code> tag contains several <code>&lt;option&gt;</code> tags. As such, you\ncan use the <code>RadioGroup</code> component with a series of <code>Radio</code> children.\n<code>RadioGroup</code> is responsible for managing state and interaction.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>RadioGroup</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Meal&nbsp;Choice</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleMealChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectedValue</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>mealType</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Radio</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Soup</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>one</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Radio</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Salad</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>two</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Radio</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Sandwich</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>three</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>RadioGroup</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><p><code>Radio</code> supports the full range of HTML <code>&lt;input&gt;</code> props.\nThe most common options are detailed below.</p>\n",
        {
          "tag": "interface",
          "value": "IRadioProps"
        },
        {
          "tag": "heading",
          "value": "RadioGroup",
          "level": 3,
          "route": "core/components/radio.radiogroup"
        },
        {
          "tag": "interface",
          "value": "IRadioGroupProps"
        },
        {
          "tag": "interface",
          "value": "IOptionProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/radio.css"
        },
        "<p>Blueprint&#39;s custom radio buttons use an extra <code>.bp3-control-indicator</code> element\nafter the <code>&lt;input&gt;</code> to achieve their custom styling. You should then wrap the\nwhole thing in a <code>&lt;label&gt;</code> with the classes <code>.bp3-control.bp3-radio</code>.</p>\n<p>Note that attribute modifiers (<code>:checked</code>, <code>:disabled</code>) are applied on the\ninternal <code>&lt;input&gt;</code> element.</p>\n",
        {
          "tag": "css",
          "value": "radio"
        }
      ],
      "contentsRaw": "@# Radio\n\nA radio button typically represents a single option in a mutually exclusive list\n(where only one item can be selected at a time). Blueprint provides `Radio` and\n`RadioGroup` components for these two layers.\n\n@reactExample RadioExample\n\n@## Props\n\nTypically, radio buttons are used in a group to choose one option from several,\nsimilar to how a `<select>` tag contains several `<option>` tags. As such, you\ncan use the `RadioGroup` component with a series of `Radio` children.\n`RadioGroup` is responsible for managing state and interaction.\n\n```tsx\n<RadioGroup\n    label=\"Meal Choice\"\n    onChange={this.handleMealChange}\n    selectedValue={this.state.mealType}\n>\n    <Radio label=\"Soup\" value=\"one\" />\n    <Radio label=\"Salad\" value=\"two\" />\n    <Radio label=\"Sandwich\" value=\"three\" />\n</RadioGroup>\n```\n\n`Radio` supports the full range of HTML `<input>` props.\nThe most common options are detailed below.\n\n@interface IRadioProps\n\n@### RadioGroup\n\n@interface IRadioGroupProps\n\n@interface IOptionProps\n\n@## CSS\n\nBlueprint's custom radio buttons use an extra `.bp3-control-indicator` element\nafter the `<input>` to achieve their custom styling. You should then wrap the\nwhole thing in a `<label>` with the classes `.bp3-control.bp3-radio`.\n\nNote that attribute modifiers (`:checked`, `:disabled`) are applied on the\ninternal `<input>` element.\n\n@css radio",
      "metadata": {}
    },
    "switch": {
      "reference": "switch",
      "route": "core/components/switch",
      "sourcePath": "packages/core/src/components/forms/switch.md",
      "title": "Switch",
      "contents": [
        {
          "tag": "heading",
          "value": "Switch",
          "level": 1,
          "route": "core/components/switch"
        },
        "<p>A switch is simply an alternate appearance for a <a href=\"#core/components/checkbox\">checkbox</a> that\nsimulates on/off instead of checked/unchecked.</p>\n",
        {
          "tag": "reactExample",
          "value": "SwitchExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/switch.props"
        },
        "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Switch</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>checked</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isPublic</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Public</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handlePublicChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>This component supports the full range of HTML <code>&lt;input&gt;</code> props.\nThe most common props are detailed below.</p>\n",
        {
          "tag": "interface",
          "value": "ISwitchProps"
        },
        {
          "tag": "heading",
          "value": "CSS API",
          "level": 2,
          "route": "core/components/switch.css-api"
        },
        {
          "tag": "css",
          "value": "switch"
        }
      ],
      "contentsRaw": "@# Switch\n\nA switch is simply an alternate appearance for a [checkbox](#core/components/checkbox) that\nsimulates on/off instead of checked/unchecked.\n\n@reactExample SwitchExample\n\n@## Props\n\n```tsx\n<Switch checked={this.state.isPublic} label=\"Public\" onChange={this.handlePublicChange} />\n```\n\nThis component supports the full range of HTML `<input>` props.\nThe most common props are detailed below.\n\n@interface ISwitchProps\n\n@## CSS API\n\n@css switch",
      "metadata": {}
    },
    "text-inputs": {
      "reference": "text-inputs",
      "route": "core/components/text-inputs",
      "sourcePath": "packages/core/src/components/forms/text-inputs.md",
      "title": "Text inputs",
      "contents": [
        {
          "tag": "heading",
          "value": "Text inputs",
          "level": 1,
          "route": "core/components/text-inputs"
        },
        "<p>Blueprint provides two ways to create a text input:</p>\n<ol>\n<li>React component: use the <code>InputGroup</code> component for an advanced single-line\ninput that supports an icon on the left and arbitrary content on the right.</li>\n<li>CSS only: apply <code>Classes.INPUT</code> to an <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> element to\nstyle the native HTML tag.</li>\n</ol>\n",
        {
          "tag": "heading",
          "value": "Input group",
          "level": 2,
          "route": "core/components/text-inputs.input-group"
        },
        "<p>An input group allows you to add icons and buttons <em>within</em> a text input to expand its\nfunctionality. For example, you might use an input group to build a visibility toggle for a password\nfield.</p>\n",
        {
          "tag": "reactExample",
          "value": "InputGroupExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 3,
          "route": "core/components/text-inputs.props"
        },
        "<p>The <code>InputGroup</code> React component  supports one non-interactive icon on the left\nside and one arbitrary element on the right side. Unlike the CSS approach,\n<code>InputGroup</code> supports <em>content of any length</em> on the right side (not just\nicon buttons) because it is able to measure the content and ensure there is\nalways space for it.</p>\n<p><code>InputGroup</code> can be used just like a standard React <code>input</code> element, in\na controlled or uncontrolled fashion. In addition to its own props, it supports\nall valid props for HTML <code>&lt;input&gt;</code> elements and proxies them to that element in\nthe DOM; the most common ones are detailed below.</p>\n",
        {
          "tag": "interface",
          "value": "IInputGroupProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 3,
          "route": "core/components/text-inputs.css"
        },
        "<p>You can place a single <code>.bp3-icon</code> or <code>.bp3-button.bp3-icon-*</code> on either end of the input. The order is\ndictated by the HTML markup: an element specified before the <code>input</code> appears on the left edge, and\nvice versa. You do not need to apply sizing classes to the children&mdash;they inherit the size of\nthe parent input.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Icons only</h4>\n    <p>You cannot use buttons with text in the CSS API for input groups. The padding for text inputs\n    in CSS cannot accomodate buttons whose width varies due to text content. You should use icons on\n    buttons instead.</p>\n\n    Conversely, the <a href=\"#core/components/text-inputs.input-group\"><code>InputGroup</code></a> React\n    component <em>does</em> support arbitrary content in its right element.\n</div>\n\n",
        {
          "tag": "css",
          "value": "input-group"
        },
        {
          "tag": "heading",
          "value": "HTML input",
          "level": 2,
          "route": "core/components/text-inputs.html-input"
        },
        "<p>Apply <code>Classes.INPUT</code> on an <code>input[type=&quot;text&quot;]</code>. You should also specify <code>dir=&quot;auto&quot;</code>\n<a href=\"http://www.w3.org/International/questions/qa-html-dir#dirauto\">to better support RTL languages</a>\n(in all browsers except Internet Explorer).</p>\n",
        {
          "tag": "css",
          "value": "input"
        },
        {
          "tag": "heading",
          "value": "Text area",
          "level": 2,
          "route": "core/components/text-inputs.text-area"
        },
        "<p>Apply <code>Classes.INPUT</code> on a <code>&lt;textarea&gt;</code>, or use the <code>TextArea</code> React component.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>TextArea</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>large</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>value</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "css",
          "value": "textarea"
        },
        {
          "tag": "interface",
          "value": "ITextAreaProps"
        },
        {
          "tag": "heading",
          "value": "Search field",
          "level": 2,
          "route": "core/components/text-inputs.search-field"
        },
        "<p>Changing the <code>&lt;input&gt;</code> element&#39;s <code>type</code> attribute to <code>&quot;search&quot;</code> styles it to look like a search\nfield, giving it a rounded appearance. This style is equivalent to the <code>.bp3-round</code> modifier, but it\nis applied automatically for <code>[type=&quot;search&quot;]</code> inputs.</p>\n<p>Note that some browsers also implement a handler for the <code>esc</code> key to clear the text in a search field.</p>\n",
        {
          "tag": "css",
          "value": "input-search"
        }
      ],
      "contentsRaw": "@# Text inputs\n\nBlueprint provides two ways to create a text input:\n\n1. React component: use the `InputGroup` component for an advanced single-line\n   input that supports an icon on the left and arbitrary content on the right.\n1. CSS only: apply `Classes.INPUT` to an `<input>` or `<textarea>` element to\n   style the native HTML tag.\n\n@## Input group\n\nAn input group allows you to add icons and buttons _within_ a text input to expand its\nfunctionality. For example, you might use an input group to build a visibility toggle for a password\nfield.\n\n@reactExample InputGroupExample\n\n@### Props\n\nThe `InputGroup` React component  supports one non-interactive icon on the left\nside and one arbitrary element on the right side. Unlike the CSS approach,\n`InputGroup` supports _content of any length_ on the right side (not just\nicon buttons) because it is able to measure the content and ensure there is\nalways space for it.\n\n`InputGroup` can be used just like a standard React `input` element, in\na controlled or uncontrolled fashion. In addition to its own props, it supports\nall valid props for HTML `<input>` elements and proxies them to that element in\nthe DOM; the most common ones are detailed below.\n\n@interface IInputGroupProps\n\n@### CSS\n\nYou can place a single `.bp3-icon` or `.bp3-button.bp3-icon-*` on either end of the input. The order is\ndictated by the HTML markup: an element specified before the `input` appears on the left edge, and\nvice versa. You do not need to apply sizing classes to the children&mdash;they inherit the size of\nthe parent input.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Icons only</h4>\n    <p>You cannot use buttons with text in the CSS API for input groups. The padding for text inputs\n    in CSS cannot accomodate buttons whose width varies due to text content. You should use icons on\n    buttons instead.</p>\n\n    Conversely, the [`InputGroup`](#core/components/text-inputs.input-group) React\n    component _does_ support arbitrary content in its right element.\n</div>\n\n@css input-group\n\n@## HTML input\n\nApply `Classes.INPUT` on an `input[type=\"text\"]`. You should also specify `dir=\"auto\"`\n[to better support RTL languages](http://www.w3.org/International/questions/qa-html-dir#dirauto)\n(in all browsers except Internet Explorer).\n\n@css input\n\n@## Text area\n\nApply `Classes.INPUT` on a `<textarea>`, or use the `TextArea` React component.\n\n```tsx\n<TextArea\n    large={true}\n    intent={Intent.PRIMARY}\n    onChange={this.handleChange}\n    value={this.state.value}\n/>\n```\n\n@css textarea\n\n@interface ITextAreaProps\n\n@## Search field\n\nChanging the `<input>` element's `type` attribute to `\"search\"` styles it to look like a search\nfield, giving it a rounded appearance. This style is equivalent to the `.bp3-round` modifier, but it\nis applied automatically for `[type=\"search\"]` inputs.\n\nNote that some browsers also implement a handler for the `esc` key to clear the text in a search field.\n\n@css input-search",
      "metadata": {}
    },
    "hotkeys": {
      "reference": "hotkeys",
      "route": "core/components/hotkeys",
      "sourcePath": "packages/core/src/components/hotkeys/hotkeys.md",
      "title": "Hotkeys",
      "contents": [
        {
          "tag": "heading",
          "value": "Hotkeys",
          "level": 1,
          "route": "core/components/hotkeys"
        },
        "<p>Hotkeys enable you to create interactions based on user keyboard events.</p>\n<p>To add hotkeys to your React component, use the <code>@HotkeysTarget</code> class decorator\nand add a <code>renderHotkeys()</code> method. The decorator will call <code>renderHotkeys()</code>\nand attach the appropriate key listeners.</p>\n",
        {
          "tag": "reactExample",
          "value": "HotkeyPiano"
        },
        {
          "tag": "heading",
          "value": "Usage",
          "level": 2,
          "route": "core/components/hotkeys.usage"
        },
        "<ol>\n<li>Add the <code>@HotkeysTarget</code> class decorator to your react component.</li>\n<li>Implement the <code>renderHotkeys()</code> method.</li>\n<li>Define your <code>&lt;Hotkey&gt;</code>s inside a <code>&lt;Hotkeys&gt;</code> element.</li>\n</ol>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Hotkey</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Hotkeys</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>HotkeysTarget</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"constant language import-export-all tsx\"><span>*</span></span><span>&nbsp;</span><span class=\"keyword control as tsx\"><span>as</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>React</span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>react</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta decorator tsx\"><span class=\"punctuation decorator tsx\"><span>@</span></span><span class=\"variable other readwrite tsx\"><span>HotkeysTarget</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>MyComponent</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Custom&nbsp;content</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>renderHotkeys</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkeys</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkey</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>global</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>combo</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>shift&nbsp;+&nbsp;a</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Be&nbsp;awesome&nbsp;all&nbsp;the&nbsp;time</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onKeyDown</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"support class console tsx\"><span>console</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function console tsx\"><span>log</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Awesome!</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkey</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>group</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Fancy&nbsp;shortcuts</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>combo</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>shift&nbsp;+&nbsp;f</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Be&nbsp;fancy&nbsp;only&nbsp;when&nbsp;focused</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onKeyDown</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"support class console tsx\"><span>console</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function console tsx\"><span>log</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>So&nbsp;fancy!</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkeys</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Decorator",
          "level": 3,
          "route": "core/components/hotkeys.decorator"
        },
        "<p>The <code>@HotkeysTarget</code> decorator allows you to easily add global and local\nhotkeys to any React component. Add the decorator to the top of the class and\nmake sure to implement the <code>renderHotkeys</code> method.</p>\n",
        {
          "tag": "interface",
          "value": "IHotkeysTarget"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 3,
          "route": "core/components/hotkeys.props"
        },
        "<p>Wrap your <code>Hotkey</code>s in the <code>Hotkeys</code> element. For example:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkeys</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkey</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Quit</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>combo</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>ctrl+q</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>global</span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onKeyDown</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>handleQuit</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkey</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Save</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>combo</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>ctrl+s</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>group</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>File</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onKeyDown</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>handleSave</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Hotkey</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IHotkeysProps"
        },
        {
          "tag": "interface",
          "value": "IHotkeyProps"
        },
        {
          "tag": "heading",
          "value": "Scope",
          "level": 2,
          "route": "core/components/hotkeys.scope"
        },
        "<p><code>Hotkey</code>s can have either local or global scope. Local hotkeys will only be\ntriggered when the target is focused, while global hotkeys can be triggered no\nmatter which element is focused.</p>\n<p>Additionally, any keyboard input that occurs inside a text input (such as a\n<code>&lt;textarea&gt;</code>, <code>&lt;input&gt;</code>, or <code>&lt;div contenteditable&gt;</code>) is ignored.</p>\n",
        {
          "tag": "heading",
          "value": "Dialog",
          "level": 2,
          "route": "core/components/hotkeys.dialog"
        },
        "<p>If you define hotkeys for your page, you&#39;ll want to display the hotkeys in a\nnice format for the user. If you register any global or local hotkeys, we\nautomatically attach a hotkey <code>?</code>, which will display the hotkeys dialog.</p>\n<p>The dialog will always include all available global hotkeys, and if you are\nfocused on an element that has any hotkeys, those will be shown as well.</p>\n<p>If you would like to change the style of the dialog (for example, to apply the\ndark theme class), call the <code>setHotkeysDialogProps</code> function with <code>IDialogProps</code>.</p>\n",
        {
          "tag": "heading",
          "value": "Key combos",
          "level": 2,
          "route": "core/components/hotkeys.key-combos"
        },
        "<p>Each hotkey must be assigned a key combo that will trigger its events. A key\ncombo consists of zero or more modifier keys (<code>alt</code>, <code>ctrl</code>, <code>shift</code>, <code>meta</code>,\n<code>cmd</code>) and exactly one action key, such as <code>A</code>, <code>return</code>, or <code>up</code>.</p>\n<p>Some key combos have aliases. For example, <code>shift + 1</code> can equivalently be\nexpressed as <code>!</code> and <code>cmd</code> is equal to <code>meta</code>. However, normal alphabetic\ncharacters do not have this aliasing, so <code>X</code> is equivalent to <code>x</code> but is not\nequivalent to <code>shift + x</code>.</p>\n<p>Examples of valid key combos:</p>\n<ul>\n<li><code>cmd+plus</code></li>\n<li><code>!</code> or, equivalently <code>shift+1</code></li>\n<li><code>return</code> or, equivalently <code>enter</code></li>\n<li><code>alt + shift + x</code></li>\n<li><code>ctrl + left</code></li>\n</ul>\n<p>Note that spaces are ignored.</p>\n<h3 id=\"named-keys\">Named keys</h3>\n<ul>\n<li><code>plus</code></li>\n<li><code>minus</code></li>\n<li><code>backspace</code></li>\n<li><code>tab</code></li>\n<li><code>enter</code></li>\n<li><code>capslock</code></li>\n<li><code>esc</code></li>\n<li><code>space</code></li>\n<li><code>pageup</code></li>\n<li><code>pagedown</code></li>\n<li><code>end</code></li>\n<li><code>home</code></li>\n<li><code>left</code></li>\n<li><code>up</code></li>\n<li><code>right</code></li>\n<li><code>down</code></li>\n<li><code>ins</code></li>\n<li><code>del</code></li>\n</ul>\n<h3 id=\"aliased-keys\">Aliased keys</h3>\n<ul>\n<li><code>option</code> &rarr; <code>alt</code></li>\n<li><code>cmd</code> &rarr; <code>meta</code></li>\n<li><code>command</code> &rarr; <code>meta</code></li>\n<li><code>return</code> &rarr; <code>enter</code></li>\n<li><code>escape</code> &rarr; <code>esc</code></li>\n<li><code>win</code> &rarr; <code>meta</code></li>\n</ul>\n<p>The special modifier <code>mod</code> will choose the OS-preferred modifier key — <code>cmd</code>\nfor macOS and iOS, or <code>ctrl</code> for Windows and Linux.</p>\n<h3 id=\"hotkey-tester\">Hotkey tester</h3>\n<p>Below is a little widget to quickly help you try out hotkey combos and see how\nthey will look in the dialog. See the key combos section above for more about\nspecifying key combo props.</p>\n",
        {
          "tag": "reactExample",
          "value": "HotkeyTester"
        }
      ],
      "contentsRaw": "@# Hotkeys\n\nHotkeys enable you to create interactions based on user keyboard events.\n\nTo add hotkeys to your React component, use the `@HotkeysTarget` class decorator\nand add a `renderHotkeys()` method. The decorator will call `renderHotkeys()`\nand attach the appropriate key listeners.\n\n@reactExample HotkeyPiano\n\n@## Usage\n\n1. Add the `@HotkeysTarget` class decorator to your react component.\n1. Implement the `renderHotkeys()` method.\n1. Define your `<Hotkey>`s inside a `<Hotkeys>` element.\n\n```tsx\nimport { Hotkey, Hotkeys, HotkeysTarget } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\n@HotkeysTarget\nexport class MyComponent extends React.Component<{}, {}> {\n    public render() {\n        return <div>Custom content</div>;\n    }\n\n    public renderHotkeys() {\n        return <Hotkeys>\n            <Hotkey\n                global={true}\n                combo=\"shift + a\"\n                label=\"Be awesome all the time\"\n                onKeyDown={() => console.log(\"Awesome!\")}\n            />\n            <Hotkey\n                group=\"Fancy shortcuts\"\n                combo=\"shift + f\"\n                label=\"Be fancy only when focused\"\n                onKeyDown={() => console.log(\"So fancy!\")}\n            />\n        </Hotkeys>;\n    }\n}\n```\n\n@### Decorator\n\nThe `@HotkeysTarget` decorator allows you to easily add global and local\nhotkeys to any React component. Add the decorator to the top of the class and\nmake sure to implement the `renderHotkeys` method.\n\n@interface IHotkeysTarget\n\n@### Props\n\nWrap your `Hotkey`s in the `Hotkeys` element. For example:\n\n```tsx\n<Hotkeys>\n    <Hotkey label=\"Quit\" combo=\"ctrl+q\" global onKeyDown={handleQuit} />\n    <Hotkey label=\"Save\" combo=\"ctrl+s\" group=\"File\" onKeyDown={handleSave} />\n</Hotkey>\n```\n\n@interface IHotkeysProps\n\n@interface IHotkeyProps\n\n@## Scope\n\n`Hotkey`s can have either local or global scope. Local hotkeys will only be\ntriggered when the target is focused, while global hotkeys can be triggered no\nmatter which element is focused.\n\nAdditionally, any keyboard input that occurs inside a text input (such as a\n`<textarea>`, `<input>`, or `<div contenteditable>`) is ignored.\n\n@## Dialog\n\nIf you define hotkeys for your page, you'll want to display the hotkeys in a\nnice format for the user. If you register any global or local hotkeys, we\nautomatically attach a hotkey `?`, which will display the hotkeys dialog.\n\nThe dialog will always include all available global hotkeys, and if you are\nfocused on an element that has any hotkeys, those will be shown as well.\n\nIf you would like to change the style of the dialog (for example, to apply the\ndark theme class), call the `setHotkeysDialogProps` function with `IDialogProps`.\n\n@## Key combos\n\nEach hotkey must be assigned a key combo that will trigger its events. A key\ncombo consists of zero or more modifier keys (`alt`, `ctrl`, `shift`, `meta`,\n`cmd`) and exactly one action key, such as `A`, `return`, or `up`.\n\nSome key combos have aliases. For example, `shift + 1` can equivalently be\nexpressed as `!` and `cmd` is equal to `meta`. However, normal alphabetic\ncharacters do not have this aliasing, so `X` is equivalent to `x` but is not\nequivalent to `shift + x`.\n\nExamples of valid key combos:\n* `cmd+plus`\n* `!` or, equivalently `shift+1`\n* `return` or, equivalently `enter`\n* `alt + shift + x`\n* `ctrl + left`\n\nNote that spaces are ignored.\n\n### Named keys\n\n* `plus`\n* `minus`\n* `backspace`\n* `tab`\n* `enter`\n* `capslock`\n* `esc`\n* `space`\n* `pageup`\n* `pagedown`\n* `end`\n* `home`\n* `left`\n* `up`\n* `right`\n* `down`\n* `ins`\n* `del`\n\n### Aliased keys\n\n* `option` &rarr; `alt`\n* `cmd` &rarr; `meta`\n* `command` &rarr; `meta`\n* `return` &rarr; `enter`\n* `escape` &rarr; `esc`\n* `win` &rarr; `meta`\n\nThe special modifier `mod` will choose the OS-preferred modifier key — `cmd`\nfor macOS and iOS, or `ctrl` for Windows and Linux.\n\n### Hotkey tester\n\nBelow is a little widget to quickly help you try out hotkey combos and see how\nthey will look in the dialog. See the key combos section above for more about\nspecifying key combo props.\n\n@reactExample HotkeyTester",
      "metadata": {}
    },
    "html-select": {
      "reference": "html-select",
      "route": "core/components/html-select",
      "sourcePath": "packages/core/src/components/html-select/html-select.md",
      "title": "HTML select",
      "contents": [
        {
          "tag": "heading",
          "value": "HTML select",
          "level": 1,
          "route": "core/components/html-select"
        },
        "<p>Styling HTML <code>&lt;select&gt;</code> tags requires a wrapper element to customize the\ndropdown caret, so we provide an <code>HTMLSelect</code> component to streamline this\nprocess.</p>\n<div class=\"bp3-callout bp3-intent-success bp3-icon-info-sign\">\n    The <a href=\"#select/multi-select\"><code>Select</code></a> component in the <a href=\"#select\"><strong>@blueprintjs/select</strong></a>\n    package provides a React alternative to the native HTML <code>&lt;select&gt;</code> tag. Notably, it\n    supports custom filtering logic and item rendering.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/html-select.props"
        },
        "<p>Use <code>HTMLSelect</code> exactly like you would use a native <code>&lt;select&gt;</code> with <code>value</code> (or\n<code>defaultValue</code>) and <code>onChange</code>. Options can be passed as <code>&lt;option&gt;</code> children for\nfull flexibility or via the <code>options</code> prop for simple shorthand.</p>\n",
        {
          "tag": "interface",
          "value": "IHTMLSelectProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/html-select.css"
        },
        "<p>The CSS API for this component uses a different CSS class than the React component\nin order to apply the icon via the CSS-only icon font. (The React component\nrenders the icon as SVG.)</p>\n<p>Put class modifiers on the wrapper and attribute modifiers and event handlers\ndirectly on the <code>&lt;select&gt;</code>.</p>\n",
        {
          "tag": "css",
          "value": "select"
        }
      ],
      "contentsRaw": "@# HTML select\n\nStyling HTML `<select>` tags requires a wrapper element to customize the\ndropdown caret, so we provide an `HTMLSelect` component to streamline this\nprocess.\n\n<div class=\"bp3-callout bp3-intent-success bp3-icon-info-sign\">\n    The [`Select`](#select/multi-select) component in the [**@blueprintjs/select**](#select)\n    package provides a React alternative to the native HTML `<select>` tag. Notably, it\n    supports custom filtering logic and item rendering.\n</div>\n\n@## Props\n\nUse `HTMLSelect` exactly like you would use a native `<select>` with `value` (or\n`defaultValue`) and `onChange`. Options can be passed as `<option>` children for\nfull flexibility or via the `options` prop for simple shorthand.\n\n@interface IHTMLSelectProps\n\n@## CSS\n\nThe CSS API for this component uses a different CSS class than the React component\nin order to apply the icon via the CSS-only icon font. (The React component\nrenders the icon as SVG.)\n\nPut class modifiers on the wrapper and attribute modifiers and event handlers\ndirectly on the `<select>`.\n\n@css select",
      "metadata": {}
    },
    "html-table": {
      "reference": "html-table",
      "route": "core/components/html-table",
      "sourcePath": "packages/core/src/components/html-table/html-table.md",
      "title": "HTML table",
      "contents": [
        {
          "tag": "heading",
          "value": "HTML table",
          "level": 1,
          "route": "core/components/html-table"
        },
        "<p>This component provides Blueprint styling to native HTML tables.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">This is not @blueprintjs/table</h4>\n    This table component is a simple CSS-only skin for HTML <code>&lt;table&gt;</code> elements.\n    It is ideal for basic static tables. If you&#39;re looking for more complex\n    spreadsheet-like features, check out <a href=\"#table\"><strong>@blueprintjs/table</strong></a>.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/html-table.props"
        },
        "<p>The <code>&lt;HTMLTable&gt;</code> component provides modifier props to apply styles to an HTML\n<code>&lt;table&gt;</code> element. Note that you are responsible for rendering <code>&lt;thead&gt;</code> and\n<code>&lt;tbody&gt;</code> elements as children.</p>\n",
        {
          "tag": "interface",
          "value": "IHTMLTableProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/html-table.css"
        },
        "<p>Apply the <code>bp3-html-table</code> class to a <code>&lt;table&gt;</code> element. You can apply modifiers as additional classes.</p>\n",
        {
          "tag": "css",
          "value": "html-table"
        }
      ],
      "contentsRaw": "@# HTML table\n\nThis component provides Blueprint styling to native HTML tables.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">This is not @blueprintjs/table</h4>\n    This table component is a simple CSS-only skin for HTML `<table>` elements.\n    It is ideal for basic static tables. If you're looking for more complex\n    spreadsheet-like features, check out [**@blueprintjs/table**](#table).\n</div>\n\n@## Props\n\nThe `<HTMLTable>` component provides modifier props to apply styles to an HTML\n`<table>` element. Note that you are responsible for rendering `<thead>` and\n`<tbody>` elements as children.\n\n@interface IHTMLTableProps\n\n@## CSS\n\nApply the `bp3-html-table` class to a `<table>` element. You can apply modifiers as additional classes.\n\n@css html-table",
      "metadata": {}
    },
    "html": {
      "reference": "html",
      "route": "core/components/html",
      "sourcePath": "packages/core/src/components/html/html.md",
      "title": "HTML elements",
      "contents": [
        {
          "tag": "heading",
          "value": "HTML elements",
          "level": 1,
          "route": "core/components/html"
        },
        "<p>In order to avoid conflicts with other stylesheets, Blueprint does not style\nmost HTML elements directly. Instead, we provide several ways to style basic elements:</p>\n<ol>\n<li>Use Blueprint React components: <code>&lt;H1&gt;</code>.</li>\n<li>Apply the Blueprint <code>Classes</code> constant to an HTML tag: <code>&lt;h1 className={Classes.HEADING}&gt;</code>.</li>\n<li>Nest HTML tags inside a container with <code>Classes.RUNNING_TEXT</code> (see below).</li>\n</ol>\n<p>The following elements should be used in this manner:</p>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>HTML tag</th>\n<th><code>Classes</code> constant</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>H1</code> - <code>H6</code></td>\n<td><code>h1</code> - <code>h6</code></td>\n<td><code>HEADING</code></td>\n</tr>\n<tr>\n<td><code>Blockquote</code></td>\n<td><code>blockquote</code></td>\n<td><code>BLOCKQUOTE</code></td>\n</tr>\n<tr>\n<td><code>Code</code></td>\n<td><code>code</code></td>\n<td><code>CODE</code></td>\n</tr>\n<tr>\n<td><code>Label</code></td>\n<td><code>label</code></td>\n<td><code>LABEL</code> - see <a href=\"#core/components/label\">Labels</a></td>\n</tr>\n<tr>\n<td><code>Pre</code></td>\n<td><code>pre</code></td>\n<td><code>CODE_BLOCK</code></td>\n</tr>\n<tr>\n<td><code>OL</code></td>\n<td><code>ol</code></td>\n<td><code>LIST</code></td>\n</tr>\n<tr>\n<td><code>UL</code></td>\n<td><code>ul</code></td>\n<td><code>LIST</code></td>\n</tr>\n<tr>\n<td><code>HTMLTable</code></td>\n<td><code>table</code></td>\n<td><code>HTML_TABLE</code> - see <a href=\"#core/components/html-table\">HTML Table</a></td>\n</tr>\n</tbody>\n</table>\n<p>The React components listed above each support the full set of relevant HTML attributes <strong>and an\noptional <code>elementRef</code> prop</strong> to access the instance of the HTML element itself\n(not the React component).</p>\n",
        {
          "tag": "heading",
          "value": "Nested usage",
          "level": 2,
          "route": "core/components/html.nested-usage"
        },
        "<p>Applying <code>Classes.RUNNING_TEXT</code> to a container element allows the above HTML\nelements to be used directly without additional CSS classes.\nThis is very useful for rendering generated markup where you cannot control the\nexact HTML elements, such as a Markdown document.</p>\n<p>See the <a href=\"#core/typography.running-text\">Running text</a> documentation for more information.</p>\n",
        {
          "tag": "heading",
          "value": "Linting",
          "level": 2,
          "route": "core/components/html.linting"
        },
        "<p>The <a href=\"https://www.npmjs.com/package/@blueprintjs/tslint-config\"><strong>@blueprintjs/tslint-config</strong></a>\nNPM package provides advanced configuration for <a href=\"http://palantir.github.io/tslint/\">TSLint</a>,\nincluding a custom <code>blueprint-html-components</code> rule that will warn on usages of\nJSX intrinsic elements (<code>&lt;h1&gt;</code>) that have a Blueprint alternative (<code>&lt;H1&gt;</code>). See\nthe package&#39;s <a href=\"https://www.npmjs.com/package/@blueprintjs/tslint-config\">README</a>\nfor usage instructions.</p>\n"
      ],
      "contentsRaw": "\n@# HTML elements\n\nIn order to avoid conflicts with other stylesheets, Blueprint does not style\nmost HTML elements directly. Instead, we provide several ways to style basic elements:\n\n1. Use Blueprint React components: `<H1>`.\n1. Apply the Blueprint `Classes` constant to an HTML tag: `<h1 className={Classes.HEADING}>`.\n1. Nest HTML tags inside a container with `Classes.RUNNING_TEXT` (see below).\n\nThe following elements should be used in this manner:\n\n| Component | HTML tag | `Classes` constant |\n|-|-|-|\n| `H1` - `H6` | `h1` - `h6` | `HEADING` |\n| `Blockquote` | `blockquote` | `BLOCKQUOTE` |\n| `Code` | `code` | `CODE` |\n| `Label` | `label` | `LABEL` - see [Labels](#core/components/label) |\n| `Pre` | `pre` | `CODE_BLOCK` |\n| `OL` | `ol` | `LIST` |\n| `UL` | `ul` | `LIST` |\n| `HTMLTable` | `table` | `HTML_TABLE` - see [HTML Table](#core/components/html-table) |\n\nThe React components listed above each support the full set of relevant HTML attributes **and an\noptional `elementRef` prop** to access the instance of the HTML element itself\n(not the React component).\n\n@## Nested usage\n\nApplying `Classes.RUNNING_TEXT` to a container element allows the above HTML\nelements to be used directly without additional CSS classes.\nThis is very useful for rendering generated markup where you cannot control the\nexact HTML elements, such as a Markdown document.\n\nSee the [Running text](#core/typography.running-text) documentation for more information.\n\n@## Linting\n\nThe [**@blueprintjs/tslint-config**](https://www.npmjs.com/package/@blueprintjs/tslint-config)\nNPM package provides advanced configuration for [TSLint](http://palantir.github.io/tslint/),\nincluding a custom `blueprint-html-components` rule that will warn on usages of\nJSX intrinsic elements (`<h1>`) that have a Blueprint alternative (`<H1>`). See\nthe package's [README](https://www.npmjs.com/package/@blueprintjs/tslint-config)\nfor usage instructions.",
      "metadata": {
        "reference": "html",
        "tag": "new"
      }
    },
    "icon": {
      "reference": "icon",
      "route": "core/components/icon",
      "sourcePath": "packages/core/src/components/icon/icon.md",
      "title": "Icon",
      "contents": [
        {
          "tag": "heading",
          "value": "Icon",
          "level": 1,
          "route": "core/components/icon"
        },
        "<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    See the <a href=\"#icons\"><strong>Icons package</strong></a> for a searchable list of all available UI icons.\n</div>\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">SVG icons in 2.0</h4>\n    Blueprint 2.0 introduced SVG icon support and moved icon resources to a separate <strong>@blueprintjs/icons</strong> package.\n    The <code>Icon</code> component renders SVG paths and the icon classes are no longer used by any Blueprint React component.\n    Icon font support has been preserved but should be considered a legacy feature that will be removed in a\n    future major version.\n</div>\n\n<p>This section describes two ways of using the UI icon font: via React <code>Icon</code>\ncomponent to render SVG images or via CSS classes to use the icon font.</p>\n<p>Many Blueprint components provide an <code>icon</code> prop which accepts an icon name\n(such as <code>&quot;history&quot;</code>) or a JSX element to use as the icon.</p>\n",
        {
          "tag": "reactExample",
          "value": "IconExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/icon.props"
        },
        "<p>Use the <code>&lt;Icon&gt;</code> component to easily render <strong>SVG icons</strong> in React. The <code>icon</code>\nprop is typed such that editors can offer autocomplete for known icon names. The\noptional <code>iconSize</code> prop determines the exact width and height of the icon\nimage; the icon element itself can be sized separately using CSS.</p>\n<p>The HTML element rendered by <code>&lt;Icon&gt;</code> can be customized with the <code>tagName</code> prop\n(defaults to <code>span</code>), and additional props are passed to this element.</p>\n<p>Data files in the <strong>@blueprintjs/icons</strong> package provide SVG path information\nfor Blueprint&#39;s 300+ icons for 16px and 20px grids. The <code>icon</code> prop dictates\nwhich SVG is rendered and <code>iconSize</code> determines which pixel grid is used:\n<code>iconSize &gt;= 20</code> will use the 20px grid and smaller icons will use the 16px\ngrid.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Icon</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Intent</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>IconNames</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/icons</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;string&nbsp;literals&nbsp;are&nbsp;supported&nbsp;through&nbsp;IconName&nbsp;union&nbsp;type</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Icon</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>cross</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Icon</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>globe</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>iconSize</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>20</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;constants&nbsp;are&nbsp;provided&nbsp;for&nbsp;name&nbsp;and&nbsp;size</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Icon</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>IconNames</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>GRAPH</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>iconSize</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Icon</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>SIZE_LARGE</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;can&nbsp;pass&nbsp;all&nbsp;valid&nbsp;HTML&nbsp;props</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Icon</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>add</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleAdd</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onKeyDown</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleAddKeys</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag other html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag other html\"><span>Icon</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>icon</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>globe</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>iconSize</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span>{30}&nbsp;/</span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;renders&nbsp;the&nbsp;following&nbsp;HTML&nbsp;markup:&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag other html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag other html\"><span>svg</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>data-icon</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>globe</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>width</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>30</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>height</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>30</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>viewBox</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0&nbsp;0&nbsp;20&nbsp;20</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>globe</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag other html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag other html\"><span>path</span></span><span>&nbsp;...&nbsp;/</span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag other html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag other html\"><span>svg</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IIconProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/icon.css"
        },
        "<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Icon fonts are legacy in 2.0</h4>\n    Blueprint&#39;s icon fonts should be considered a legacy feature and will be removed in a future major version.\n    The SVGs rendered by the React component do not suffer from the blurriness of icon fonts, and browser\n    support is equivalent.\n</div>\n\n<p>The CSS-only icons API uses the <strong>icon fonts</strong> from the <strong>@blueprintjs/icons</strong> package.</p>\n<p>To use Blueprint UI icons via CSS, you must apply two classes to a <code>&lt;span&gt;</code> element:</p>\n<ul>\n<li>a <strong>sizing class</strong>, either <code>bp3-icon-standard</code> (16px) or <code>bp3-icon-large</code> (20px)</li>\n<li>an <strong>icon name class</strong>, such as <code>bp3-icon-projects</code></li>\n</ul>\n<p>Icon classes also support the four <code>.bp3-intent-*</code> modifiers to color the image.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon-</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>size</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;bp3-icon-</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>name</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon-standard&nbsp;bp3-icon-projects</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon-large&nbsp;bp3-icon-geosearch&nbsp;bp3-intent-success</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre><div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Non-standard sizes</h4>\n    Generally, font icons should only be used at either 16px or 20px. However, if a non-standard size is\n    necessary, set a <code>font-size</code> that is whole multiple of 16 or 20 with the relevant size class.\n    You can instead use the class <code>bp3-icon</code> to make the icon inherit its size from surrounding text.\n</div>"
      ],
      "contentsRaw": "@# Icon\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    See the [**Icons package**](#icons) for a searchable list of all available UI icons.\n</div>\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">SVG icons in 2.0</h4>\n    Blueprint 2.0 introduced SVG icon support and moved icon resources to a separate __@blueprintjs/icons__ package.\n    The `Icon` component renders SVG paths and the icon classes are no longer used by any Blueprint React component.\n    Icon font support has been preserved but should be considered a legacy feature that will be removed in a\n    future major version.\n</div>\n\nThis section describes two ways of using the UI icon font: via React `Icon`\ncomponent to render SVG images or via CSS classes to use the icon font.\n\nMany Blueprint components provide an `icon` prop which accepts an icon name\n(such as `\"history\"`) or a JSX element to use as the icon.\n\n@reactExample IconExample\n\n@## Props\n\nUse the `<Icon>` component to easily render __SVG icons__ in React. The `icon`\nprop is typed such that editors can offer autocomplete for known icon names. The\noptional `iconSize` prop determines the exact width and height of the icon\nimage; the icon element itself can be sized separately using CSS.\n\nThe HTML element rendered by `<Icon>` can be customized with the `tagName` prop\n(defaults to `span`), and additional props are passed to this element.\n\nData files in the __@blueprintjs/icons__ package provide SVG path information\nfor Blueprint's 300+ icons for 16px and 20px grids. The `icon` prop dictates\nwhich SVG is rendered and `iconSize` determines which pixel grid is used:\n`iconSize >= 20` will use the 20px grid and smaller icons will use the 16px\ngrid.\n\n```tsx\nimport { Icon, Intent } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\n// string literals are supported through IconName union type\n<Icon icon=\"cross\" />\n<Icon icon=\"globe\" iconSize={20} />\n\n// constants are provided for name and size\n<Icon icon={IconNames.GRAPH} iconSize={Icon.SIZE_LARGE} intent={Intent.PRIMARY} />\n\n// can pass all valid HTML props\n<Icon icon=\"add\" onClick={this.handleAdd} onKeyDown={this.handleAddKeys} />\n```\n\n```html\n<Icon icon=\"globe\" iconSize={30} />\n<!-- renders the following HTML markup: -->\n<svg class=\"bp3-icon\" data-icon=\"globe\" width=\"30\" height=\"30\" viewBox=\"0 0 20 20\">\n    <title>globe</title>\n    <path ... />\n</svg>\n```\n\n@interface IIconProps\n\n@## CSS\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Icon fonts are legacy in 2.0</h4>\n    Blueprint's icon fonts should be considered a legacy feature and will be removed in a future major version.\n    The SVGs rendered by the React component do not suffer from the blurriness of icon fonts, and browser\n    support is equivalent.\n</div>\n\nThe CSS-only icons API uses the __icon fonts__ from the __@blueprintjs/icons__ package.\n\nTo use Blueprint UI icons via CSS, you must apply two classes to a `<span>` element:\n- a __sizing class__, either `bp3-icon-standard` (16px) or `bp3-icon-large` (20px)\n- an __icon name class__, such as `bp3-icon-projects`\n\nIcon classes also support the four `.bp3-intent-*` modifiers to color the image.\n\n```html\n<span class=\"bp3-icon-{{size}} bp3-icon-{{name}}\"></span>\n\n<span class=\"bp3-icon-standard bp3-icon-projects\"></span>\n<span class=\"bp3-icon-large bp3-icon-geosearch bp3-intent-success\"></span>\n```\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Non-standard sizes</h4>\n    Generally, font icons should only be used at either 16px or 20px. However, if a non-standard size is\n    necessary, set a `font-size` that is whole multiple of 16 or 20 with the relevant size class.\n    You can instead use the class `bp3-icon` to make the icon inherit its size from surrounding text.\n</div>",
      "metadata": {}
    },
    "menu": {
      "reference": "menu",
      "route": "core/components/menu",
      "sourcePath": "packages/core/src/components/menu/menu.md",
      "title": "Menu",
      "contents": [
        {
          "tag": "heading",
          "value": "Menu",
          "level": 1,
          "route": "core/components/menu"
        },
        "<p>Menus display lists of interactive items.</p>\n",
        {
          "tag": "reactExample",
          "value": "MenuExample"
        },
        {
          "tag": "heading",
          "value": "Dropdowns",
          "level": 2,
          "route": "core/components/menu.dropdowns"
        },
        "<p>The <code>Menu</code> component by itself simply renders a list of items. To make a\ndropdown menu, compose a <code>Menu</code> as the <code>content</code> property of a <code>Popover</code>:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>...</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>position</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"support class dom tsx\"><span>Position</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>RIGHT_TOP</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>share</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Open&nbsp;in...</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><p>By default, the popover is automatically dismissed when the user clicks a menu\nitem (<a href=\"#core/components/popover.opening-and-closing\">Popover docs</a> have more\ndetails). If you want to opt out of this behavior, set\n<code>shouldDismissPopover={false}</code> on a <code>MenuItem</code>.</p>\n<p>In the example below, clicking the menu item labeled &quot;Table&quot; will not dismiss\nthe <code>Popover</code>.</p>\n",
        {
          "tag": "reactExample",
          "value": "DropdownMenuExample"
        },
        {
          "tag": "heading",
          "value": "Submenus",
          "level": 2,
          "route": "core/components/menu.submenus"
        },
        "<p>To add a submenu to a <code>Menu</code>, simply nest <code>MenuItem</code>s within another <code>MenuItem</code>.\nThe submenu opens to the right of its parent by default, but will adjust and flip to the left if\nthere is not enough room to the right.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Submenu</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Child&nbsp;one</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Child&nbsp;two</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Child&nbsp;three</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">JavaScript only</h4>\n    Submenus are only supported in the React components. They cannot be created with CSS alone because\n    they rely on the <a href=\"#core/components/popover\"><code>Popover</code></a> component for positioning and transitions.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/menu.props"
        },
        "<p>The <code>Menu</code> API includes three stateless React components:</p>\n<ul>\n<li><a href=\"#core/components/menu.menu\"><code>Menu</code></a></li>\n<li><a href=\"#core/components/menu.menu-item\"><code>MenuItem</code></a> (aliased as <code>Menu.Item</code>)</li>\n<li><a href=\"#core/components/menu.menu-divider\"><code>MenuDivider</code></a> (aliased as <code>Menu.Divider</code>)</li>\n</ul>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Item</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>new-text-box</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleClick</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>New&nbsp;text&nbsp;box</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Item</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>new-object</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleClick</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>New&nbsp;object</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Item</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>new-link</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleClick</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>New&nbsp;link</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Divider</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Item</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Settings...</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>cog</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Item</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>tick</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Save&nbsp;on&nbsp;edit</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Item</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>blank</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Compile&nbsp;on&nbsp;edit</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu.Item</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Menu",
          "level": 3,
          "route": "core/components/menu.menu"
        },
        "<p>A <code>Menu</code> is a <code>&lt;ul&gt;</code> container for menu items and dividers.</p>\n",
        {
          "tag": "interface",
          "value": "IMenuProps"
        },
        {
          "tag": "heading",
          "value": "Menu item",
          "level": 3,
          "route": "core/components/menu.menu-item"
        },
        "<p>A <code>MenuItem</code> is a single interactive item in a <code>Menu</code>.</p>\n<p>This component renders an <code>&lt;li&gt;</code> containing an <code>&lt;a&gt;</code>. Make the <code>MenuItem</code>\ninteractive by providing the <code>href</code>, <code>target</code>, and <code>onClick</code> props as necessary.</p>\n<p>Create submenus by nesting <code>MenuItem</code>s inside each other as <code>children</code>. Use the\nrequired <code>text</code> prop for <code>MenuItem</code> content.</p>\n",
        {
          "tag": "interface",
          "value": "IMenuItemProps"
        },
        {
          "tag": "heading",
          "value": "Menu divider",
          "level": 3,
          "route": "core/components/menu.menu-divider"
        },
        "<p>Use <code>MenuDivider</code> to separate menu sections. Optionally, add a title to the divider.</p>\n",
        {
          "tag": "interface",
          "value": "IMenuDividerProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/menu.css"
        },
        "<p>Menus can be constructed manually using the HTML markup and <code>bp3-menu-*</code> classes below. However, you\nshould use the menu <a href=\"#core/components/menu.javscript-api\">React components</a> instead wherever possible,\nas they abstract away the tedious parts of implementing a menu.</p>\n<ul>\n<li><p>Begin with a <code>ul.bp3-menu</code>. Each <code>li</code> child denotes a single entry in the menu.</p>\n</li>\n<li><p>Put a <code>.bp3-menu-item</code> element inside an <code>li</code> to create a clickable entry. Use either <code>&lt;button&gt;</code> or\n<code>&lt;a&gt;</code> tags for menu items to denote interactivity.</p>\n</li>\n<li><p>Add icons to menu items the same way you would to buttons: simply add the appropriate\n<code>bp3-icon-&lt;name&gt;</code> class*.</p>\n</li>\n<li><p>Make menu items active with the class <code>bp3-active</code> (along with <code>bp3-intent-*</code> if suitable).</p>\n</li>\n<li><p>Make menu items non-interactive with the class <code>bp3-disabled</code>.</p>\n</li>\n<li><p>Wrap menu item text in a <code>&lt;span&gt;</code> element for proper alignment. (Note that React automatically\ndoes this.)</p>\n</li>\n<li><p>Add a right-aligned label to a menu item by adding a <code>span.bp3-menu-item-label</code> inside the\n<code>.bp3-menu-item</code>, after the content. Add an icon to the label by adding icon classes to the label\nelement (<code>bp3-icon-standard</code> size is recommended).</p>\n</li>\n<li><p>Add a divider between items with <code>li.bp3-menu-divider</code>.</p>\n</li>\n<li><p>If you want the popover to close when the user clicks a menu item, add the class\n<code>bp3-popover-dismiss</code> to any relevant menu items.</p>\n</li>\n</ul>\n<p><small>* You do not need to add a <code>bp3-icon-&lt;sizing&gt;</code> class to menu items—icon sizing is\ndefined as part of <code>.bp3-menu-item</code>.</small></p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Note that the following examples are <code>display: inline-block</code>; you may need to adjust\n    menu width in your own usage.\n</div>\n\n",
        {
          "tag": "css",
          "value": "menu"
        },
        {
          "tag": "heading",
          "value": "Section headers",
          "level": 3,
          "route": "core/components/menu.section-headers"
        },
        "<p>Add an <code>li.bp3-menu-header</code>. Wrap the text in an <code>&lt;h6&gt;</code> tag for proper typography and borders.</p>\n",
        {
          "tag": "css",
          "value": "menu-header"
        }
      ],
      "contentsRaw": "@# Menu\n\nMenus display lists of interactive items.\n\n@reactExample MenuExample\n\n@## Dropdowns\n\nThe `Menu` component by itself simply renders a list of items. To make a\ndropdown menu, compose a `Menu` as the `content` property of a `Popover`:\n\n```tsx\n<Popover content={<Menu>...</Menu>} position={Position.RIGHT_TOP}>\n    <Button icon=\"share\" text=\"Open in...\" />\n</Popover>\n```\n\nBy default, the popover is automatically dismissed when the user clicks a menu\nitem ([Popover docs](#core/components/popover.opening-and-closing) have more\ndetails). If you want to opt out of this behavior, set\n`shouldDismissPopover={false}` on a `MenuItem`.\n\nIn the example below, clicking the menu item labeled \"Table\" will not dismiss\nthe `Popover`.\n\n@reactExample DropdownMenuExample\n\n@## Submenus\n\nTo add a submenu to a `Menu`, simply nest `MenuItem`s within another `MenuItem`.\nThe submenu opens to the right of its parent by default, but will adjust and flip to the left if\nthere is not enough room to the right.\n\n```tsx\n<Menu>\n    <MenuItem text=\"Submenu\">\n        <MenuItem text=\"Child one\" />\n        <MenuItem text=\"Child two\" />\n        <MenuItem text=\"Child three\" />\n    </MenuItem>\n</Menu>\n```\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">JavaScript only</h4>\n    Submenus are only supported in the React components. They cannot be created with CSS alone because\n    they rely on the [`Popover`](#core/components/popover) component for positioning and transitions.\n</div>\n\n@## Props\n\nThe `Menu` API includes three stateless React components:\n\n* [`Menu`](#core/components/menu.menu)\n* [`MenuItem`](#core/components/menu.menu-item) (aliased as `Menu.Item`)\n* [`MenuDivider`](#core/components/menu.menu-divider) (aliased as `Menu.Divider`)\n\n```tsx\n<Menu>\n    <Menu.Item icon=\"new-text-box\" onClick={this.handleClick} text=\"New text box\" />\n    <Menu.Item icon=\"new-object\" onClick={this.handleClick} text=\"New object\" />\n    <Menu.Item icon=\"new-link\" onClick={this.handleClick} text=\"New link\" />\n    <Menu.Divider />\n    <Menu.Item text=\"Settings...\" icon=\"cog\">\n        <Menu.Item icon=\"tick\" text=\"Save on edit\" />\n        <Menu.Item icon=\"blank\" text=\"Compile on edit\" />\n    </Menu.Item>\n</Menu>\n```\n\n@### Menu\n\nA `Menu` is a `<ul>` container for menu items and dividers.\n\n@interface IMenuProps\n\n@### Menu item\n\nA `MenuItem` is a single interactive item in a `Menu`.\n\nThis component renders an `<li>` containing an `<a>`. Make the `MenuItem`\ninteractive by providing the `href`, `target`, and `onClick` props as necessary.\n\nCreate submenus by nesting `MenuItem`s inside each other as `children`. Use the\nrequired `text` prop for `MenuItem` content.\n\n@interface IMenuItemProps\n\n@### Menu divider\n\nUse `MenuDivider` to separate menu sections. Optionally, add a title to the divider.\n\n@interface IMenuDividerProps\n\n@## CSS\n\nMenus can be constructed manually using the HTML markup and `bp3-menu-*` classes below. However, you\nshould use the menu [React components](#core/components/menu.javscript-api) instead wherever possible,\nas they abstract away the tedious parts of implementing a menu.\n\n* Begin with a `ul.bp3-menu`. Each `li` child denotes a single entry in the menu.\n\n* Put a `.bp3-menu-item` element inside an `li` to create a clickable entry. Use either `<button>` or\n  `<a>` tags for menu items to denote interactivity.\n\n* Add icons to menu items the same way you would to buttons: simply add the appropriate\n  `bp3-icon-<name>` class\\*.\n\n* Make menu items active with the class `bp3-active` (along with `bp3-intent-*` if suitable).\n\n* Make menu items non-interactive with the class `bp3-disabled`.\n\n* Wrap menu item text in a `<span>` element for proper alignment. (Note that React automatically\n  does this.)\n\n* Add a right-aligned label to a menu item by adding a `span.bp3-menu-item-label` inside the\n  `.bp3-menu-item`, after the content. Add an icon to the label by adding icon classes to the label\n  element (`bp3-icon-standard` size is recommended).\n\n* Add a divider between items with `li.bp3-menu-divider`.\n\n* If you want the popover to close when the user clicks a menu item, add the class\n  `bp3-popover-dismiss` to any relevant menu items.\n\n<small>\\* You do not need to add a `bp3-icon-<sizing>` class to menu items—icon sizing is\ndefined as part of `.bp3-menu-item`.</small>\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Note that the following examples are `display: inline-block`; you may need to adjust\n    menu width in your own usage.\n</div>\n\n@css menu\n\n@### Section headers\n\nAdd an `li.bp3-menu-header`. Wrap the text in an `<h6>` tag for proper typography and borders.\n\n@css menu-header",
      "metadata": {}
    },
    "navbar": {
      "reference": "navbar",
      "route": "core/components/navbar",
      "sourcePath": "packages/core/src/components/navbar/navbar.md",
      "title": "Navbar",
      "contents": [
        {
          "tag": "heading",
          "value": "Navbar",
          "level": 1,
          "route": "core/components/navbar"
        },
        "<p>Navbars present useful navigation controls at the top of an application.</p>\n",
        {
          "tag": "reactExample",
          "value": "NavbarExample"
        },
        {
          "tag": "heading",
          "value": "Fixed to viewport top",
          "level": 3,
          "route": "core/components/navbar.fixed-to-viewport-top"
        },
        "<p>Enable the <code>fixedToTop</code> prop to attach a navbar to the top of the viewport using\n<code>position: fixed; top: 0;</code>. This is so-called &quot;sticky&quot; behavior: the navbar\nstays at the top of the screen as the user scrolls through the document.</p>\n<p>This modifier is not illustrated here because it breaks the document flow.</p>\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Body padding required</h4>\n    The fixed navbar will lie on top of your other content unless you add padding to the top of the\n    <code>&lt;body&gt;</code> element equal to the height of the navbar. Use the <code>$pt-navbar-height</code> Sass variable.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Fixed width",
          "level": 3,
          "route": "core/components/navbar.fixed-width"
        },
        "<p>If your application is inside a fixed-width container (instead of spanning the\nentire viewport), you can align the navbar to match by wrap your navbar groups\nin an element with your desired <code>width</code> and <code>margin: 0 auto;</code> to horizontally\ncenter it.</p>\n",
        {
          "tag": "css",
          "value": "navbar-container"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/navbar.props"
        },
        "<p>The <code>Navbar</code> API includes four stateless React components:</p>\n<ul>\n<li><code>Navbar</code></li>\n<li><code>NavbarGroup</code> (aliased as <code>Navbar.Group</code>)</li>\n<li><code>NavbarHeading</code> (aliased as <code>Navbar.Heading</code>)</li>\n<li><code>NavbarDivider</code> (aliased as <code>Navbar.Divider</code>)</li>\n</ul>\n<p>These components are simple containers for their children. Each of them supports\nthe full range of HTML <code>&lt;div&gt;</code> props.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Group</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>align</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Alignment</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>LEFT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Heading</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Blueprint</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Heading</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Divider</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-minimal</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>home</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Home</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-minimal</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>icon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>document</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Files</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar.Group</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Navbar</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "INavbarProps"
        },
        {
          "tag": "interface",
          "value": "INavbarGroupProps"
        },
        {
          "tag": "interface",
          "value": "INavbarHeadingProps"
        },
        {
          "tag": "interface",
          "value": "INavbarDividerProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/navbar.css"
        },
        "<p>Use the following classes to construct a navbar:</p>\n<ul>\n<li><code>nav.bp3-navbar</code> &ndash; The parent element. Use a <code>&lt;nav&gt;</code> element for accessibility.</li>\n<li><code>.bp3-navbar-group.bp3-align-(left|right)</code> &ndash; Left- or right-aligned group.</li>\n<li><code>.bp3-navbar-heading</code> &ndash; Larger text for your application title.</li>\n<li><code>.bp3-navbar-divider</code> &ndash; Thin vertical line that can be placed between groups of elements.</li>\n</ul>\n",
        {
          "tag": "css",
          "value": "navbar"
        }
      ],
      "contentsRaw": "@# Navbar\n\nNavbars present useful navigation controls at the top of an application.\n\n@reactExample NavbarExample\n\n@### Fixed to viewport top\n\nEnable the `fixedToTop` prop to attach a navbar to the top of the viewport using\n`position: fixed; top: 0;`. This is so-called \"sticky\" behavior: the navbar\nstays at the top of the screen as the user scrolls through the document.\n\nThis modifier is not illustrated here because it breaks the document flow.\n\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Body padding required</h4>\n    The fixed navbar will lie on top of your other content unless you add padding to the top of the\n    `<body>` element equal to the height of the navbar. Use the `$pt-navbar-height` Sass variable.\n</div>\n\n@### Fixed width\n\nIf your application is inside a fixed-width container (instead of spanning the\nentire viewport), you can align the navbar to match by wrap your navbar groups\nin an element with your desired `width` and `margin: 0 auto;` to horizontally\ncenter it.\n\n@css navbar-container\n\n@## Props\n\nThe `Navbar` API includes four stateless React components:\n\n* `Navbar`\n* `NavbarGroup` (aliased as `Navbar.Group`)\n* `NavbarHeading` (aliased as `Navbar.Heading`)\n* `NavbarDivider` (aliased as `Navbar.Divider`)\n\nThese components are simple containers for their children. Each of them supports\nthe full range of HTML `<div>` props.\n\n```tsx\n<Navbar>\n    <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading>Blueprint</Navbar.Heading>\n        <Navbar.Divider />\n        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Home\" />\n        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Files\" />\n    </Navbar.Group>\n</Navbar>\n```\n\n@interface INavbarProps\n\n@interface INavbarGroupProps\n\n@interface INavbarHeadingProps\n\n@interface INavbarDividerProps\n\n@## CSS\n\nUse the following classes to construct a navbar:\n\n* `nav.bp3-navbar` &ndash; The parent element. Use a `<nav>` element for accessibility.\n* `.bp3-navbar-group.bp3-align-(left|right)` &ndash; Left- or right-aligned group.\n* `.bp3-navbar-heading` &ndash; Larger text for your application title.\n* `.bp3-navbar-divider` &ndash; Thin vertical line that can be placed between groups of elements.\n\n@css navbar",
      "metadata": {}
    },
    "non-ideal-state": {
      "reference": "non-ideal-state",
      "route": "core/components/non-ideal-state",
      "sourcePath": "packages/core/src/components/non-ideal-state/non-ideal-state.md",
      "title": "Non-ideal state",
      "contents": [
        {
          "tag": "heading",
          "value": "Non-ideal state",
          "level": 1,
          "route": "core/components/non-ideal-state"
        },
        "<p>Non-ideal UI states inform the user that some content is unavailable. There are several types of\nnon-ideal states, including:</p>\n<ul>\n<li><strong>Empty state:</strong> a container has just been created and has no data in it yet,\nor a container&#39;s contents have been intentionally removed.</li>\n<li><strong>Loading state:</strong> a container is awaiting data. A good practice is to show a\nspinner for this state, with optional explanatory text below the spinner.</li>\n<li><strong>Error state:</strong> something went wrong (for instance, 404 and 500 HTTP errors).\nIn this case, a good practice is to add a call to action directing the user\nwhat to do next.</li>\n</ul>\n",
        {
          "tag": "reactExample",
          "value": "NonIdealStateExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/non-ideal-state.props"
        },
        "<p>The props are rendered in this order in the DOM, with comfortable vertical\nspacing between each child:</p>\n<ol>\n<li><code>icon</code></li>\n<li><code>title</code></li>\n<li><code>description</code></li>\n<li><code>action</code></li>\n<li><code>children</code></li>\n</ol>\n",
        {
          "tag": "interface",
          "value": "INonIdealStateProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/non-ideal-state.css"
        },
        "<p>Apply <code>.bp3-non-ideal-state</code> to the container and <code>.bp3-non-ideal-state-visual</code>\nto the icon element. The container should only have direct element children (all\ntext should be wrapped in an enclosing element) for proper spacing between each\nchild.</p>\n",
        {
          "tag": "css",
          "value": "non-ideal-state"
        }
      ],
      "contentsRaw": "\n@# Non-ideal state\n\nNon-ideal UI states inform the user that some content is unavailable. There are several types of\nnon-ideal states, including:\n\n* **Empty state:** a container has just been created and has no data in it yet,\n  or a container's contents have been intentionally removed.\n* **Loading state:** a container is awaiting data. A good practice is to show a\n  spinner for this state, with optional explanatory text below the spinner.\n* **Error state:** something went wrong (for instance, 404 and 500 HTTP errors).\n  In this case, a good practice is to add a call to action directing the user\n  what to do next.\n\n@reactExample NonIdealStateExample\n\n@## Props\n\nThe props are rendered in this order in the DOM, with comfortable vertical\nspacing between each child:\n\n1. `icon`\n1. `title`\n1. `description`\n1. `action`\n1. `children`\n\n@interface INonIdealStateProps\n\n@## CSS\n\nApply `.bp3-non-ideal-state` to the container and `.bp3-non-ideal-state-visual`\nto the icon element. The container should only have direct element children (all\ntext should be wrapped in an enclosing element) for proper spacing between each\nchild.\n\n@css non-ideal-state",
      "metadata": {
        "parent": "components"
      }
    },
    "overflow-list": {
      "reference": "overflow-list",
      "route": "core/components/overflow-list",
      "sourcePath": "packages/core/src/components/overflow-list/overflow-list.md",
      "title": "Overflow list",
      "contents": [
        {
          "tag": "heading",
          "value": "Overflow list",
          "level": 1,
          "route": "core/components/overflow-list"
        },
        "<p><code>OverflowList</code> takes a generic list of items and renders as many items as can\nfit inside itself. Overflowed items that do not fit are collapsed into a single\nelement. The visible items will be recomputed when a resize is detected.</p>\n<p>The <code>items</code> prop accepts an array of generic objects. The required\n<code>visibleItemRenderer</code> callback prop determines the appearance of a visible item.\nThe required <code>overflowRenderer</code> callback prop receives all overflowed items\nand renders the overflow indicator.</p>\n<p>This component uses a polyfill for the <a href=\"https://developers.google.com/web/updates/2016/10/resizeobserver\">proposed <code>ResizeObserver</code> API</a>\nto efficiently detect when its dimensions change. Use the <code>observeParents</code> prop\nto watch for resizing further up in the DOM tree.</p>\n",
        {
          "tag": "reactExample",
          "value": "OverflowListExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/overflow-list.props"
        },
        {
          "tag": "interface",
          "value": "IOverflowListProps"
        }
      ],
      "contentsRaw": "\n@# Overflow list\n\n`OverflowList` takes a generic list of items and renders as many items as can\nfit inside itself. Overflowed items that do not fit are collapsed into a single\nelement. The visible items will be recomputed when a resize is detected.\n\nThe `items` prop accepts an array of generic objects. The required\n`visibleItemRenderer` callback prop determines the appearance of a visible item.\nThe required `overflowRenderer` callback prop receives all overflowed items\nand renders the overflow indicator.\n\nThis component uses a polyfill for the [proposed `ResizeObserver` API][resizeobserver]\nto efficiently detect when its dimensions change. Use the `observeParents` prop\nto watch for resizing further up in the DOM tree.\n\n[resizeobserver]: https://developers.google.com/web/updates/2016/10/resizeobserver\n\n@reactExample OverflowListExample\n\n@## Props\n\n@interface IOverflowListProps",
      "metadata": {
        "tag": "new"
      }
    },
    "overlay": {
      "reference": "overlay",
      "route": "core/components/overlay",
      "sourcePath": "packages/core/src/components/overlay/overlay.md",
      "title": "Overlay",
      "contents": [
        {
          "tag": "heading",
          "value": "Overlay",
          "level": 1,
          "route": "core/components/overlay"
        },
        "<p><code>Overlay</code> is a generic low-level component for rendering content <em>on top of</em> its\nsiblings, or above the entire application.</p>\n<p>It combines a <a href=\"#core/components/portal\"><code>Portal</code></a>, which allows JSX children to\nbe rendered at a different place in the DOM tree, with a\n<a href=\"https://reactcommunity.org/react-transition-group/\"><code>CSSTransition</code></a> to support\nelegant enter and leave transitions.</p>\n<p>An optional &quot;backdrop&quot; element can be rendered behind the overlaid children to\nprovide modal behavior, whereby the overlay prevents interaction with anything\nbehind it.</p>\n<p><code>Overlay</code> is the backbone of all the components listed in the <strong>Overlays</strong> group\nin the sidebar. Using <code>Overlay</code> directly should be rare in your app; it should\nonly be necessary if no existing component meets your needs.</p>\n",
        {
          "tag": "reactExample",
          "value": "OverlayExample"
        },
        {
          "tag": "heading",
          "value": "Scroll support",
          "level": 2,
          "route": "core/components/overlay.scroll-support"
        },
        "<p>Overlays rely heavily on fixed and absolute positioning. By default, an overlay\nlarger than the viewport will not be scrollable, so any overflowing content will\nbe hidden. Fortunately, making an overlay scrollable is very easy: simply pass\n<code>Classes.OVERLAY_SCROLL_CONTAINER</code> as the Overlay <code>className</code>, and we&#39;ll take\ncare of the rest.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Overlay</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>OVERLAY_SCROLL_CONTAINER</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"invalid illegal attribute tsx\"><span>...</span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>The <code>Dialog</code> component applies this CSS class automatically.</p>\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/overlay.props"
        },
        "<p><code>Overlay</code> is a controlled component that renders its children only when\n<code>isOpen={true}</code>. The optional backdrop element will be inserted before the\nchildren if <code>hasBackdrop={true}</code>.</p>\n<p>The <code>onClose</code> callback prop is invoked when user interaction causes the overlay\nto close, but your application is responsible for updating the state that\nactually closes the overlay.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">A note about overlay content positioning</h4>\n    When rendered inline, content will automatically be set to <code>position: absolute</code> to respect\n    document flow. Otherwise, content will be set to <code>position: fixed</code> to cover the entire viewport.\n</div>\n\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Show&nbsp;overlay</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>toggleOverlay</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Overlay</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>isOpen</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isOpen</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClose</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>toggleOverlay</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Overlaid&nbsp;contents...</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Overlay</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IOverlayProps"
        }
      ],
      "contentsRaw": "@# Overlay\n\n`Overlay` is a generic low-level component for rendering content _on top of_ its\nsiblings, or above the entire application.\n\nIt combines a [`Portal`](#core/components/portal), which allows JSX children to\nbe rendered at a different place in the DOM tree, with a\n[`CSSTransition`](https://reactcommunity.org/react-transition-group/) to support\nelegant enter and leave transitions.\n\nAn optional \"backdrop\" element can be rendered behind the overlaid children to\nprovide modal behavior, whereby the overlay prevents interaction with anything\nbehind it.\n\n`Overlay` is the backbone of all the components listed in the **Overlays** group\nin the sidebar. Using `Overlay` directly should be rare in your app; it should\nonly be necessary if no existing component meets your needs.\n\n@reactExample OverlayExample\n\n@## Scroll support\n\nOverlays rely heavily on fixed and absolute positioning. By default, an overlay\nlarger than the viewport will not be scrollable, so any overflowing content will\nbe hidden. Fortunately, making an overlay scrollable is very easy: simply pass\n`Classes.OVERLAY_SCROLL_CONTAINER` as the Overlay `className`, and we'll take\ncare of the rest.\n\n```tsx\n<Overlay className={Classes.OVERLAY_SCROLL_CONTAINER} ... />\n```\n\nThe `Dialog` component applies this CSS class automatically.\n\n@## Props\n\n`Overlay` is a controlled component that renders its children only when\n`isOpen={true}`. The optional backdrop element will be inserted before the\nchildren if `hasBackdrop={true}`.\n\nThe `onClose` callback prop is invoked when user interaction causes the overlay\nto close, but your application is responsible for updating the state that\nactually closes the overlay.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">A note about overlay content positioning</h4>\n    When rendered inline, content will automatically be set to `position: absolute` to respect\n    document flow. Otherwise, content will be set to `position: fixed` to cover the entire viewport.\n</div>\n\n```tsx\n<div>\n    <Button text=\"Show overlay\" onClick={this.toggleOverlay} />\n    <Overlay isOpen={this.state.isOpen} onClose={this.toggleOverlay}>\n        Overlaid contents...\n    </Overlay>\n</div>\n```\n\n@interface IOverlayProps",
      "metadata": {}
    },
    "panel-stack": {
      "reference": "panel-stack",
      "route": "core/components/panel-stack",
      "sourcePath": "packages/core/src/components/panel-stack/panel-stack.md",
      "title": "Panel stack",
      "contents": [
        {
          "tag": "heading",
          "value": "Panel stack",
          "level": 1,
          "route": "core/components/panel-stack"
        },
        "<p><code>PanelStack</code> manages a stack of panels and displays only the topmost panel.</p>\n<p>Each panel appears with a header containing a &quot;back&quot; button to return to the\nprevious panel. The bottom-most <code>initialPanel</code> cannot be closed or removed from\nthe stack. Panels use\n<a href=\"http://reactcommunity.org/react-transition-group/css-transition\"><code>CSSTransition</code></a>\nfor seamless transitions.</p>\n",
        {
          "tag": "reactExample",
          "value": "PanelStackExample"
        },
        {
          "tag": "heading",
          "value": "Panels",
          "level": 2,
          "route": "core/components/panel-stack.panels"
        },
        "<p>Panels are supplied as <code>IPanel</code> objects like <code>{ component, props, title }</code>,\nwhere <code>component</code> and <code>props</code> are used to render the panel element and <code>title</code>\nwill appear in the header and back button. This breakdown allows the component\nto avoid cloning elements. Note that each panel is only mounted when it is atop\nthe stack and is unmounted when it is closed or when a panel opens above it.</p>\n<p><code>PanelStack</code> injects its own <code>IPanelProps</code> into each panel (in addition to the\n<code>props</code> defined alongside the <code>component</code>), providing methods to imperatively\nclose the current panel or open a new one on top of it.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>IPanelProps</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>PanelStack</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>MyPanel</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>IPanelProps</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>openSettingsPanel</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Settings</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>openSettingsPanel</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;openPanel&nbsp;(and&nbsp;closePanel)&nbsp;are&nbsp;injected&nbsp;by&nbsp;PanelStack</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>props</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>openPanel</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>component</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>SettingsPanel</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;&lt;-&nbsp;class&nbsp;or&nbsp;stateless&nbsp;function&nbsp;type</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>props</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>enabled</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean true tsx\"><span>true</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;&lt;-&nbsp;SettingsPanel&nbsp;props&nbsp;without&nbsp;IPanelProps</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>title</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Settings</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;&lt;-&nbsp;appears&nbsp;in&nbsp;header&nbsp;and&nbsp;back&nbsp;button</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>SettingsPanel</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>IPanelProps</span></span><span>&nbsp;</span><span class=\"keyword operator type tsx\"><span>&amp;</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>enabled</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>boolean</span></span><span>&nbsp;</span></span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;...</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>PanelStack</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>initialPanel</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>component</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>MyPanel</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>title</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Home</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IPanel"
        },
        {
          "tag": "interface",
          "value": "IPanelProps"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/panel-stack.props"
        },
        "<p>The panel stack cannot be controlled but <code>onClose</code> and <code>onOpen</code> callbacks are\navailable to listen for changes.</p>\n",
        {
          "tag": "interface",
          "value": "IPanelStackProps"
        }
      ],
      "contentsRaw": "\n@# Panel stack\n\n`PanelStack` manages a stack of panels and displays only the topmost panel.\n\nEach panel appears with a header containing a \"back\" button to return to the\nprevious panel. The bottom-most `initialPanel` cannot be closed or removed from\nthe stack. Panels use\n[`CSSTransition`](http://reactcommunity.org/react-transition-group/css-transition)\nfor seamless transitions.\n\n\n@reactExample PanelStackExample\n\n@## Panels\n\nPanels are supplied as `IPanel` objects like `{ component, props, title }`,\nwhere `component` and `props` are used to render the panel element and `title`\nwill appear in the header and back button. This breakdown allows the component\nto avoid cloning elements. Note that each panel is only mounted when it is atop\nthe stack and is unmounted when it is closed or when a panel opens above it.\n\n`PanelStack` injects its own `IPanelProps` into each panel (in addition to the\n`props` defined alongside the `component`), providing methods to imperatively\nclose the current panel or open a new one on top of it.\n\n```tsx\nimport { Button, IPanelProps, PanelStack } from \"@blueprintjs/core\";\n\nclass MyPanel extends React.Component<IPanelProps> {\n    public render() {\n        return <Button onClick={this.openSettingsPanel} text=\"Settings\" />\n    }\n\n    private openSettingsPanel() {\n        // openPanel (and closePanel) are injected by PanelStack\n        this.props.openPanel({\n            component: SettingsPanel, // <- class or stateless function type\n            props: { enabled: true }, // <- SettingsPanel props without IPanelProps\n            title: \"Settings\",        // <- appears in header and back button\n        });\n    }\n}\n\nclass SettingsPanel extends React.Component<IPanelProps & { enabled: boolean }> {\n    // ...\n}\n\n<PanelStack initialPanel={{ component: MyPanel, title: \"Home\" }} />\n```\n\n@interface IPanel\n\n@interface IPanelProps\n\n@## Props\n\nThe panel stack cannot be controlled but `onClose` and `onOpen` callbacks are\navailable to listen for changes.\n\n@interface IPanelStackProps",
      "metadata": {
        "tag": "new"
      }
    },
    "popover": {
      "reference": "popover",
      "route": "core/components/popover",
      "sourcePath": "packages/core/src/components/popover/popover.md",
      "title": "Popover",
      "contents": [
        {
          "tag": "heading",
          "value": "Popover",
          "level": 1,
          "route": "core/components/popover"
        },
        "<p>Popovers display floating content next to a target element.</p>\n<p><code>Popover</code> is built on top of the <a href=\"https://popper.js.org\"><strong>Popper.js</strong></a> library.\nPopper.js is a small (~6kb) library that offers a powerful, customizable\npositioning engine and operates at blazing speed (~60fps).</p>\n",
        {
          "tag": "reactExample",
          "value": "PopoverExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/popover.props"
        },
        "<p><code>Popover</code> supports controlled and uncontrolled usage through <code>isOpen</code> and\n<code>defaultIsOpen</code>, respectively. Use <code>onInteraction</code> in controlled mode to respond\nto changes in the <code>isOpen</code> state.</p>\n<p>Supported user interactions are dictated by the <code>interactionKind</code> prop.</p>\n<p>This component is quite powerful and has a wide range of features. Explore the\n<a href=\"#core/components/popover.concepts\"><strong>Concepts</strong></a> section below for more advanced\nguides.</p>\n",
        {
          "tag": "interface",
          "value": "IPopoverProps"
        },
        {
          "tag": "heading",
          "value": "Concepts",
          "level": 2,
          "route": "core/components/popover.concepts"
        },
        {
          "tag": "heading",
          "value": "Structure",
          "level": 3,
          "route": "core/components/popover.structure"
        },
        "<p>When creating a popover, you must specify both its <strong>content</strong> and its <strong>target</strong>.\nThis can be done a few ways:</p>\n<ol>\n<li><p>Provide both the <code>content</code> and <code>target</code> props, which accept a string or a JSX element.\nOmitting the <code>target</code> prop will produce an error.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Content</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>target</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Open</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre></li>\n<li><p>Provide one or two <code>children</code>. Omitting a <code>target</code> element will produce an error.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Open</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Content</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre></li>\n<li><p>It is possible to mix the two: provide the <code>content</code> prop and one React child as the target.\n(Using the <code>target</code> prop with <code>children</code> is not supported and will produce a warning.)</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Content</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Open</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre></li>\n</ol>\n<p>The <strong>target</strong> acts as the trigger for the popover; user interaction will show the popover based on\n<code>interactionKind</code>. The <strong>content</strong> will be shown in the popover itself. The popover&#39;s will always be\npositioned on the page next to the target; the <code>position</code> prop determines the relative position (on\nwhich side of the target).</p>\n<p>Internally, the provided target is wrapped in a <code>span.bp3-popover-target</code>. This\nin turn is wrapped in a <code>span.bp3-popover-wrapper</code>. The extra\n<code>bp3-popover-wrapper</code> is present so that both the popover and target will be\nwrapped in a single element when rendering\n<a href=\"#core/components/popover.portal-rendering\">popovers without a portal</a>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>span</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>class</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-popover-wrapper</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>span</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>class</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-popover-target</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>My&nbsp;target</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>span</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;inline&nbsp;Popover&nbsp;would&nbsp;render&nbsp;here&nbsp;--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>span</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Button targets</h4>\n    Buttons make great popover targets, but the <code>disabled</code> attribute on a <code>&lt;button&gt;</code> blocks all\n    events, which interferes with the popover functioning. If you need to disable a button that\n    triggers a popover, you should use <a href=\"#core/components/button.anchor-button\"><code>AnchorButton</code></a> instead.\n    See the <a href=\"#core/components/button.props\">callout here</a> for more details.\n</div>\n\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span class=\"meta object-binding-pattern-variable tsx\"><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Intent</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Popover</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>PopoverInteractionKind</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Position</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>PopoverExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;popover&nbsp;content&nbsp;gets&nbsp;no&nbsp;padding&nbsp;by&nbsp;default;&nbsp;add&nbsp;the&nbsp;&quot;bp3-popover-content-sizing&quot;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;class&nbsp;to&nbsp;the&nbsp;popover&nbsp;to&nbsp;set&nbsp;nice&nbsp;padding&nbsp;between&nbsp;its&nbsp;border&nbsp;and&nbsp;content,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;and&nbsp;a&nbsp;default&nbsp;width&nbsp;when&nbsp;inline.</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>interactionKind</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>PopoverInteractionKind</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>CLICK</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>popoverClassName</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-popover-content-sizing</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>position</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"support class dom tsx\"><span>Position</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>RIGHT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Popover&nbsp;target</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>h5</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Popover&nbsp;title</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>h5</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>p</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>...</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>p</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-popover-dismiss</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Dismiss</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Position",
          "level": 3,
          "route": "core/components/popover.position"
        },
        "<p>The <code>position</code> prop controls the Popover&#39;s position relative to the target. The <code>Position</code> enumeration defines the full set of supported values. There are two attributes of positioning to consider:</p>\n<ul>\n<li>Which <span class=\"docs-popover-position-label-side\"><strong>side</strong></span> of the target the popover should render on.</li>\n<li>The popover&#39;s <span class=\"docs-popover-position-label-alignment\"><strong>alignment</strong></span> relative to the target.</li>\n</ul>\n<p>These two attributes can be expressed with a single value having the following structure:</p>\n<pre class=\"docs-popover-position-value-code-block\">\n    <span class=\"docs-popover-position-label-side\">[SIDE]</span>_<span class=\"docs-popover-position-label-alignment\">[ALIGNMENT]</span>\n</pre>\n\n<p>The following example shows all supported <code>Position</code> values and how each behaves in practice. Note that if <strong><code>_<span class=\"docs-popover-position-label-alignment\">[ALIGNMENT]</span></code></strong> is ommitted, the popover will align to the <strong>center</strong> of the target.</p>\n",
        {
          "tag": "reactExample",
          "value": "PopoverPositionExample"
        },
        "<h4 id=\"automatic-positioning\">Automatic positioning</h4>\n<p>The Popover&#39;s <code>position</code> can also be chosen <em>automatically</em> via <code>&quot;auto&quot;</code>, <code>&quot;auto-start&quot;</code>, or <code>&quot;auto-end&quot;</code>. All of these options choose and continually update the <span class=\"docs-popover-position-label-side\"><strong>side</strong></span> for you to avoid overflowing the boundary element (when scrolling within it, for instance). The options differ in how they handle <span class=\"docs-popover-position-label-alignment\"><strong>alignment</strong></span>:</p>\n<ul>\n<li>In <code>&quot;auto&quot;</code> mode (the default for <code>position</code>), the Popover will align itself to the center of the target as it flips sides.</li>\n<li>In <code>&quot;auto-start&quot;</code> mode, the Popover will align itself to the <code>start</code> of the target (i.e., the top edge when the popover is on the left or right, or the left edge when the popover is on the top or bottom).</li>\n<li>In <code>&quot;auto-end&quot;</code> mode, the Popover will align itself to the <code>end</code> of the target (i.e., the bottom edge when the popover is on the left or right, or the right edge when the popover is on the top or bottom).</li>\n</ul>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    You can also specify a specific initial position (e.g. <code>LEFT</code>, <code>TOP_RIGHT</code>) and still update the Popover&#39;s position automatically by enabling the modifiers <code>flip</code> and <code>preventOverflow</code>. <a href=\"#core/components/popover.modifiers\">See below</a> for information about modifiers.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Modifiers",
          "level": 3,
          "route": "core/components/popover.modifiers"
        },
        "<p>Modifiers are the tools through which you customize Popper.js&#39;s behavior. Popper.js defines several of its own modifiers to handle things such as flipping, preventing overflow from a boundary element, and positioning the arrow. <code>Popover</code> defines a few additional modifiers to support itself. You can even define your own modifiers, and customize the Popper.js defaults, through the <code>modifiers</code> prop. (Note: it is not currently possible to configure <code>Popover</code>&#39;s modifiers through the <code>modifiers</code> prop, nor can you define your own with the same name.)</p>\n<p><strong>Popper.js modifiers that can be customized via the <code>modifiers</code> prop:</strong></p>\n<ul>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..shift\"><code>shift</code></a> applies the <code>-start</code>/<code>-end</code> portion of placement</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..offset\"><code>offset</code></a> can be configured to move the popper on both axes using a CSS-like syntax</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..preventOverflow\"><code>preventOverflow</code></a> prevents the popper from being positioned outside the boundary</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..keepTogether\"><code>keepTogether</code></a> ensures the popper stays near to its reference without leaving any gap.</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..arrow\"><code>arrow</code></a> computes the arrow position.</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..flip\"><code>flip</code></a> flips the popper&#39;s placement when it starts to overlap its reference element.</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..inner\"><code>inner</code></a> makes the popper flow toward the inner of the reference element (disabled by default).</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..hide\"><code>hide</code></a> hides the popper when its reference element is outside of the popper boundaries.</li>\n<li><a href=\"https://popper.js.org/popper-documentation.html#modifiers..computeStyle\"><code>computeStyle</code></a> generates the CSS styles to apply to the DOM</li>\n</ul>\n<p><strong>Popper.js modifiers that <code>Popover</code> manages and that cannot be customized:</strong></p>\n<ul>\n<li><code>arrowOffset</code> moves the popper a little bit to make room for the arrow</li>\n<li><code>updatePopoverState</code> saves off some popper data to <code>Popover</code> React state for fancy things</li>\n</ul>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    See <a href=\"https://popper.js.org/popper-documentation.html#modifiers\">the Popper.js Modifiers documentation</a>\n    for more details on all the available modifiers.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Controlled mode",
          "level": 3,
          "route": "core/components/popover.controlled-mode"
        },
        "<p>If you prefer to have more control over your popover&#39;s behavior, you can specify the <code>isOpen</code>\nproperty to use the component in <strong>controlled mode</strong>. You are now in charge of the component&#39;s\nopen state.</p>\n<p>Providing a non-null value for <code>isOpen</code> disables all automatic interaction and instead invokes\nthe <code>onInteraction</code> callback prop any time the opened state <em>would have changed</em> in response to\nuser interaction under the current <code>interactionKind</code>.</p>\n<p>Note that there are cases where <code>onInteraction</code> is invoked with an unchanged open state.\nIt is important to pay attention to the value of the <code>nextOpenState</code> parameter and determine\nin your application logic whether you should care about a particular invocation (for instance,\nif the <code>nextOpenState</code> is not the same as the <code>Popover</code>&#39;s current state).</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Disabling controlled popovers</h4>\n    <p>If <code>disabled={true}</code>, a controlled popover will remain closed even if <code>isOpen={true}</code>.\n    The popover will re-open when <code>disabled</code> is set to <code>false</code>.</p>\n</div>\n\n<h4 id=\"example-controlled-usage\">Example controlled usage</h4>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span class=\"meta object-binding-pattern-variable tsx\"><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Popover</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>Position</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>ControlledPopoverExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>isOpen</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>boolean</span></span><span>&nbsp;</span></span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>state</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>isOpen</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"constant language boolean false tsx\"><span>false</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>let</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>popoverContent</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta var expr tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta var expr tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>h5</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Popover&nbsp;Title</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>h5</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta var expr tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>p</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>...</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>p</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta var expr tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>class</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-popover-dismiss</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Close&nbsp;popover</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta var expr tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta var expr tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>popoverContent</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>interactionKind</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>PopoverInteractionKind</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>CLICK</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>isOpen</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>isOpen</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onInteraction</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>state</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>handleInteraction</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>state</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>position</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"support class dom tsx\"><span>Position</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>RIGHT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Popover&nbsp;target</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>handleInteraction</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>nextOpenState</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>boolean</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>setState</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>isOpen</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>nextOpenState</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Interactions",
          "level": 3,
          "route": "core/components/popover.interactions"
        },
        "<p>The <code>interactionKind</code> prop governs how the popover should open and close in response to user interactions.\nThe supported values are:</p>\n<ul>\n<li><code>HOVER</code><ul>\n<li><strong>Opens when:</strong> the target is hovered</li>\n<li><strong>Closes when:</strong> the cursor is no longer inside the target _or_ the popover</li>\n</ul>\n</li>\n<li><code>HOVER_TARGET_ONLY</code>:<ul>\n<li><strong>Opens when:</strong> the target is hovered</li>\n<li><strong>Closes when:</strong> the cursor is no longer inside the target</li>\n</ul>\n</li>\n<li><code>CLICK</code>:<ul>\n<li><strong>Opens when:</strong> the target is clicked</li>\n<li><strong>Closes when:</strong> the user clicks anywhere outside of the popover (including the target)</li>\n</ul>\n</li>\n<li><code>CLICK_TARGET_ONLY</code>:<ul>\n<li><strong>Opens when:</strong> the target is clicked</li>\n<li><strong>Closes when:</strong> the target is clicked</li>\n</ul>\n</li>\n</ul>\n<p>The following example demonstrates the various interaction kinds (note: these Popovers contain <a href=\"#core/components/menu.menu-item\"><code>MenuItem</code></a>s with <code>shouldDismissPopover={false}</code>, for clarity):</p>\n",
        {
          "tag": "reactExample",
          "value": "PopoverInteractionKindExample"
        },
        "<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Conditionally styling popover targets</h4>\n    When a popover is open, <code>Classes.POPOVER_OPEN</code> is applied to the target.\n    You can use this to style the target differently when the popover is open.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Closing on click",
          "level": 3,
          "route": "core/components/popover.closing-on-click"
        },
        "<p>Sometimes it is desirable for an element inside a <code>Popover</code> to close the popover\non click. <code>Popover</code> supports a pair of CSS classes, <code>Classes.POPOVER_DISMISS</code>\nand <code>Classes.POPOVER_DISMISS_OVERRIDE</code>, that can be attached to elements to\ndescribe whether click events should dismiss the enclosing popover.</p>\n<p>To mark an element (and its children) as &quot;dismiss elements&quot;, simply add the\nclass <code>Classes.POPOVER_DISMISS</code>. For example, the <strong>Dismiss</strong> button in the\ntop-level <a href=\"#core/components/popover\">Popover example</a> has this class, and all\n<code>MenuItem</code>s receive this class by default (see <code>shouldDismissPopover</code> prop). To\nenable this behavior on the entire popover body, pass\n<code>popoverClassName={Classes.POPOVER_DISMISS}</code>.</p>\n<p>Cancel the dismiss behavior on subtrees by nesting\n<code>Classes.POPOVER_DISMISS_OVERRIDE</code> inside <code>Classes.POPOVER_DISMISS</code>. Clicks\noriginating inside disabled elements (either via the <code>disabled</code> attribute or\n<code>Classes.DISABLED</code>) will never dismiss a popover.</p>\n<p>Additionally, the prop <code>captureDismiss</code> (disabled by default) will prevent click\nevents from dismissing <em>grandparent</em> popovers (not the <code>Popover</code> immediately\ncontaining the dismiss element). <code>MenuItem</code> disables this feature such that\nclicking any submenu item will close all submenus, which is desirable behavior\nfor a menu tree.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>POPOVER_DISMISS</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Click&nbsp;me&nbsp;to&nbsp;dismiss</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>disabled</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>I&nbsp;will&nbsp;not&nbsp;dismiss</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>POPOVER_DISMISS_OVERRIDE</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>I&nbsp;too&nbsp;shall&nbsp;not&nbsp;dismiss</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "reactExample",
          "value": "PopoverDismissExample"
        },
        "<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Dismiss elements won&#39;t have any effect in a popover with\n    <code>PopoverInteractionKind.HOVER_TARGET_ONLY</code>, because there is no way to\n    interact with the popover content itself: the popover is dismissed the\n    moment the user mouses away from the target.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Backdrop",
          "level": 3,
          "route": "core/components/popover.backdrop"
        },
        "<p>The <code>hasBackdrop</code> prop governs whether a backdrop appears while the popover is open. When <code>true</code>:</p>\n<ul>\n<li><strong>A transparent backdrop will render beneath the popover</strong>. This backdrop\ncovers the entire viewport and prevents interaction with the document until\nthe popover is closed. This is useful for preventing stray clicks or hovers in\nyour app when the user tries to close a popover.</li>\n<li><strong>The popover will receive focus when opened</strong>, allowing for better keyboard accessibility.</li>\n</ul>\n<p>Clicking the backdrop will:</p>\n<ul>\n<li><em>in uncontrolled mode</em>, close the popover.</li>\n<li><em>in controlled mode</em>, invoke the <code>onInteraction</code> callback with an argument of <code>false</code>.</li>\n</ul>\n<p>This backdrop behavior is only available for popovers having <code>interactionKind={PopoverInteractionKind.CLICK}</code>.\nAn error is thrown if used otherwise.</p>\n<h4 id=\"styling-the-backdrop\">Styling the backdrop</h4>\n<p>By default, the popover backdrop is invisible, but you can easily add your own styles to\n<code>.bp3-popover-backdrop</code> to customize the appearance of the backdrop (for example, you could give it\na translucent background color, like the backdrop for the <a href=\"#core/components/dialog\"><code>Dialog</code></a> component).</p>\n<p>The backdrop element has the same opacity-fade transition as the <code>Dialog</code> backdrop.</p>\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Dangerous edge case</h4>\n    Rendering a <code>&lt;Popover isOpen={true} hasBackdrop={true}&gt;</code> outside the viewport bounds can easily break\n    your application by covering the UI with an invisible non-interactive backdrop. This edge case\n    must be handled by your application code or simply avoided if possible.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Portal rendering",
          "level": 3,
          "route": "core/components/popover.portal-rendering"
        },
        "<p>By default, popover contents are rendered in a <a href=\"#core/components/portal\"><code>Portal</code></a> appended to <code>document.body</code>. This\nallows the popover contents to &quot;escape&quot; the application DOM tree to avoid incompatible styles on ancestor elements.\n(Incompatible styles typically include hidden <code>overflow</code> or complex <code>position</code> logic.) It also ensures that the popover\nwill appear above all other content, as its container element appears after the application container in the DOM.</p>\n<p>Disable the <code>usePortal</code> prop to render popover contents in the normal document flow as a sibling of the target.\nThis behavior can be desirable to inherit CSS styles from surrounding elements, and can result in smoother performance\nwhen scrolling. Not using a <code>Portal</code> works well for most layouts, because popovers style themselves to appear above\neverything else on the page without needing to manually adjust z-indices, and Popper.js will keep them nicely positioned.</p>\n",
        {
          "tag": "reactExample",
          "value": "PopoverPortalExample"
        },
        {
          "tag": "heading",
          "value": "Style",
          "level": 2,
          "route": "core/components/popover.style"
        },
        {
          "tag": "heading",
          "value": "Dark theme",
          "level": 3,
          "route": "core/components/popover.dark-theme"
        },
        "<p>The <code>Popover</code> component automatically detects whether its trigger is nested inside a <code>.bp3-dark</code>\ncontainer and applies the same class to itself. You can also explicitly apply the dark theme to\nthe React component by providing the prop <code>popoverClassName=&quot;bp3-dark&quot;</code>.</p>\n<p>As a result, any component that you place inside a <code>Popover</code> (such as a <code>Menu</code>) automatically\ninherits the dark theme styles. Note that <a href=\"#core/components/tooltip\"><code>Tooltip</code></a> uses <code>Popover</code> internally, so it also benefits\nfrom this behavior.</p>\n<p>This behavior can be disabled (if the <code>Popover</code> uses a <code>Portal</code>) via the <code>inheritDarkTheme</code> prop.</p>\n",
        {
          "tag": "heading",
          "value": "Sizing",
          "level": 3,
          "route": "core/components/popover.sizing"
        },
        "<p>Popovers by default have a <code>max-width</code> but no <code>max-height</code>. To constrain the height of a popover\nand make its content scrollable, add a custom class to your popover content element and attach\nstyles to that class:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>class</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>custom-class</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>...</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;...</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>custom-class</span></span><span>&nbsp;</span><span class=\"meta property-list scss\"><span class=\"punctuation section property-list begin scss\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>max-height</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"variable scss\"><span class=\"variable scss\"><span>$pt-grid-size</span></span><span>&nbsp;</span></span><span>*</span><span class=\"constant numeric scss\"><span>&nbsp;15</span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>overflow-y</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"support constant property-value scss\"><span>auto</span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"punctuation section property-list end scss\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "reactExample",
          "value": "PopoverSizingExample"
        },
        {
          "tag": "heading",
          "value": "Minimal style",
          "level": 3,
          "route": "core/components/popover.minimal-style"
        },
        "<p>You can create a minimal popover by setting <code>minimal={true}</code>.\nThis removes the arrow from the popover and makes the transitions more subtle.</p>\n",
        {
          "tag": "reactExample",
          "value": "PopoverMinimalExample"
        },
        "<p>This minimal style is recommended for popovers that are not triggered by an obvious action like the\nuser clicking or hovering over something. For example, a minimal popover is useful for making\ntypeahead menus where the menu appears almost instantly after the user starts typing.</p>\n<p>Minimal popovers are also useful for context menus that require quick enter and leave animations to\nsupport fast workflows. You can see an example in the <a href=\"#core/components/context-menu\">context menus</a>\ndocumentation.</p>\n",
        {
          "tag": "heading",
          "value": "Testing",
          "level": 2,
          "route": "core/components/popover.testing"
        },
        "<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Your best resource for strategies in popover testing is\n    <a href=\"https://github.com/palantir/blueprint/blob/develop/packages/core/test/popover/popoverTests.tsx\">its own unit test suite.</a>\n</div>\n\n<h4 id=\"animation-delays\">Animation delays</h4>\n<p><code>Popover</code> can be difficult to test because it uses <code>Portal</code> to inject its contents elsewhere in the\nDOM (outside the usual flow); this can be simplified by using <code>inline</code> Popovers in tests.\nHover interactions can also be tricky due to delays and transitions; this can be resolved by\nzeroing the default hover delays.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>inline</span></span><span>&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"variable other readwrite tsx\"><span>yourProps</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>hoverCloseDelay</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>hoverOpenDelay</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>yourTarget</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><h4 id=\"rendering-delays\">Rendering delays</h4>\n<p><code>Popover</code> delays rendering updates triggered on <code>mouseleave</code>, because the mouse might have moved from the popover to the target, which may require special handling depending on the current <a href=\"#core/components/popover.opening-and-closing\"><code>interactionKind</code></a>. Popper.js also throttles rendering updates to improve performance. If your components are not updating in a synchronous fashion as expected, you may need to introduce a <code>setTimeout</code> to wait for asynchronous Popover rendering to catch up:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Classes</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Overlay</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Popover</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>PopoverInteractionKind</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>assert</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>chai</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>mount</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>enzyme</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Target</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>react-popper</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"variable other readwrite tsx\"><span>wrapper</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>mount</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>usePortal</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean false tsx\"><span>false</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>interactionKind</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>PopoverInteractionKind</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>HOVER</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Target</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Content</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>wrapper</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>find</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>Target</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>simulate</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>mouseenter</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;hostNodes()&nbsp;is&nbsp;an&nbsp;Enzyme&nbsp;3&nbsp;helper&nbsp;that&nbsp;retains&nbsp;only&nbsp;native-HTML&nbsp;nodes.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>wrapper</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>find</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string template tsx\"><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span>.</span><span class=\"meta template expression tsx\"><span class=\"punctuation definition template-expression begin tsx\"><span>${</span></span><span class=\"meta embedded line tsx\"><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>POPOVER</span></span></span><span class=\"punctuation definition template-expression end tsx\"><span>}</span></span></span><span class=\"punctuation definition string template end tsx\"><span>`</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>hostNodes</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>simulate</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>mouseenter</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>wrapper</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>find</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string template tsx\"><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span>.</span><span class=\"meta template expression tsx\"><span class=\"punctuation definition template-expression begin tsx\"><span>${</span></span><span class=\"meta embedded line tsx\"><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>POPOVER</span></span></span><span class=\"punctuation definition template-expression end tsx\"><span>}</span></span></span><span class=\"punctuation definition string template end tsx\"><span>`</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>hostNodes</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>simulate</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>mouseleave</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"support function tsx\"><span>setTimeout</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta arrow tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;Popover&nbsp;delays&nbsp;closing&nbsp;using&nbsp;setTimeout,&nbsp;so&nbsp;need&nbsp;to&nbsp;defer&nbsp;this&nbsp;check&nbsp;too.</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>isOpen</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>wrapper</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>find</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>Overlay</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>prop</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>isOpen</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>assert</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>equal</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>isOpen</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant language boolean false tsx\"><span>false</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre><h4 id=\"element-refs\">Element refs</h4>\n<p>If <code>inline</code> rendering is not an option, <code>Popover</code> instances expose <code>popoverElement</code> and\n<code>targetElement</code> refs of the actual DOM elements. Importantly, <code>popoverElement</code> points to the\n<code>.bp3-popover</code> element inside the <code>Portal</code> so you can use it to easily query popover contents without\nknowing precisely where they are in the DOM. These properties exist primarily to simplify testing;\ndo not rely on them for feature work.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;using&nbsp;mount()&nbsp;from&nbsp;enzyme</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>wrapper</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>mount</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>test</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>test</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span class=\"meta object-binding-pattern-variable tsx\"><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>popoverElement</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>wrapper</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>instance</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;popoverElement&nbsp;is&nbsp;the&nbsp;parent&nbsp;element&nbsp;of&nbsp;.bp3-popover</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>popoverElement</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>querySelector</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>.test</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>textContent</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;&quot;test&quot;</span></span></span></div></pre>"
      ],
      "contentsRaw": "@# Popover\n\nPopovers display floating content next to a target element.\n\n`Popover` is built on top of the [__Popper.js__](https://popper.js.org) library.\nPopper.js is a small (~6kb) library that offers a powerful, customizable\npositioning engine and operates at blazing speed (~60fps).\n\n@reactExample PopoverExample\n\n@## Props\n\n`Popover` supports controlled and uncontrolled usage through `isOpen` and\n`defaultIsOpen`, respectively. Use `onInteraction` in controlled mode to respond\nto changes in the `isOpen` state.\n\nSupported user interactions are dictated by the `interactionKind` prop.\n\nThis component is quite powerful and has a wide range of features. Explore the\n[**Concepts**](#core/components/popover.concepts) section below for more advanced\nguides.\n\n@interface IPopoverProps\n\n@## Concepts\n\n@### Structure\n\nWhen creating a popover, you must specify both its __content__ and its __target__.\nThis can be done a few ways:\n\n1. Provide both the `content` and `target` props, which accept a string or a JSX element.\n  Omitting the `target` prop will produce an error.\n  ```tsx\n  <Popover content={<Content />} target={<Button text=\"Open\" />} />\n  ```\n\n1. Provide one or two `children`. Omitting a `target` element will produce an error.\n  ```tsx\n  <Popover>\n      <Button text=\"Open\" />\n      <Content />\n  </Popover>\n  ```\n\n1. It is possible to mix the two: provide the `content` prop and one React child as the target.\n  (Using the `target` prop with `children` is not supported and will produce a warning.)\n  ```tsx\n  <Popover content={<Content />}>\n      <Button text=\"Open\" />\n  </Popover>\n  ```\n\nThe __target__ acts as the trigger for the popover; user interaction will show the popover based on\n`interactionKind`. The __content__ will be shown in the popover itself. The popover's will always be\npositioned on the page next to the target; the `position` prop determines the relative position (on\nwhich side of the target).\n\nInternally, the provided target is wrapped in a `span.bp3-popover-target`. This\nin turn is wrapped in a `span.bp3-popover-wrapper`. The extra\n`bp3-popover-wrapper` is present so that both the popover and target will be\nwrapped in a single element when rendering\n[popovers without a portal](#core/components/popover.portal-rendering).\n\n```tsx\n<span class=\"bp3-popover-wrapper\">\n    <span class=\"bp3-popover-target\">\n        <Button text=\"My target\" />\n    </span>\n    <!-- inline Popover would render here -->\n</span>\n```\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Button targets</h4>\n    Buttons make great popover targets, but the `disabled` attribute on a `<button>` blocks all\n    events, which interferes with the popover functioning. If you need to disable a button that\n    triggers a popover, you should use [`AnchorButton`](#core/components/button.anchor-button) instead.\n    See the [callout here](#core/components/button.props) for more details.\n</div>\n\n```tsx\nconst { Button, Intent, Popover, PopoverInteractionKind, Position } = \"@blueprintjs/core\";\n\nexport class PopoverExample extends React.Component {\n    public render() {\n        // popover content gets no padding by default; add the \"bp3-popover-content-sizing\"\n        // class to the popover to set nice padding between its border and content,\n        // and a default width when inline.\n        return (\n            <Popover\n                interactionKind={PopoverInteractionKind.CLICK}\n                popoverClassName=\"bp3-popover-content-sizing\"\n                position={Position.RIGHT}\n            >\n                <Button intent={Intent.PRIMARY}>Popover target</Button>\n                <div>\n                    <h5>Popover title</h5>\n                    <p>...</p>\n                    <Button className=\"bp3-popover-dismiss\">Dismiss</Button>\n                </div>\n            </Popover>\n        );\n    }\n}\n```\n\n@### Position\n\nThe `position` prop controls the Popover's position relative to the target. The `Position` enumeration defines the full set of supported values. There are two attributes of positioning to consider:\n\n- Which <span class=\"docs-popover-position-label-side\">__side__</span> of the target the popover should render on.\n- The popover's <span class=\"docs-popover-position-label-alignment\">__alignment__</span> relative to the target.\n\nThese two attributes can be expressed with a single value having the following structure:\n\n<pre class=\"docs-popover-position-value-code-block\">\n    <span class=\"docs-popover-position-label-side\">[SIDE]</span>_<span class=\"docs-popover-position-label-alignment\">[ALIGNMENT]</span>\n</pre>\n\nThe following example shows all supported `Position` values and how each behaves in practice. Note that if <strong><code>_<span class=\"docs-popover-position-label-alignment\">[ALIGNMENT]</span></code></strong> is ommitted, the popover will align to the __center__ of the target.\n\n@reactExample PopoverPositionExample\n\n#### Automatic positioning\n\nThe Popover's `position` can also be chosen _automatically_ via `\"auto\"`, `\"auto-start\"`, or `\"auto-end\"`. All of these options choose and continually update the <span class=\"docs-popover-position-label-side\">__side__</span> for you to avoid overflowing the boundary element (when scrolling within it, for instance). The options differ in how they handle <span class=\"docs-popover-position-label-alignment\">__alignment__</span>:\n\n- In `\"auto\"` mode (the default for `position`), the Popover will align itself to the center of the target as it flips sides.\n- In `\"auto-start\"` mode, the Popover will align itself to the `start` of the target (i.e., the top edge when the popover is on the left or right, or the left edge when the popover is on the top or bottom).\n- In `\"auto-end\"` mode, the Popover will align itself to the `end` of the target (i.e., the bottom edge when the popover is on the left or right, or the right edge when the popover is on the top or bottom).\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    You can also specify a specific initial position (e.g. `LEFT`, `TOP_RIGHT`) and still update the Popover's position automatically by enabling the modifiers `flip` and `preventOverflow`. [See below](#core/components/popover.modifiers) for information about modifiers.\n</div>\n\n@### Modifiers\n\nModifiers are the tools through which you customize Popper.js's behavior. Popper.js defines several of its own modifiers to handle things such as flipping, preventing overflow from a boundary element, and positioning the arrow. `Popover` defines a few additional modifiers to support itself. You can even define your own modifiers, and customize the Popper.js defaults, through the `modifiers` prop. (Note: it is not currently possible to configure `Popover`'s modifiers through the `modifiers` prop, nor can you define your own with the same name.)\n\n\n**Popper.js modifiers that can be customized via the `modifiers` prop:**\n\n- [`shift`](https://popper.js.org/popper-documentation.html#modifiers..shift) applies the `-start`/`-end` portion of placement\n- [`offset`](https://popper.js.org/popper-documentation.html#modifiers..offset) can be configured to move the popper on both axes using a CSS-like syntax\n- [`preventOverflow`](https://popper.js.org/popper-documentation.html#modifiers..preventOverflow) prevents the popper from being positioned outside the boundary\n- [`keepTogether`](https://popper.js.org/popper-documentation.html#modifiers..keepTogether) ensures the popper stays near to its reference without leaving any gap.\n- [`arrow`](https://popper.js.org/popper-documentation.html#modifiers..arrow) computes the arrow position.\n- [`flip`](https://popper.js.org/popper-documentation.html#modifiers..flip) flips the popper's placement when it starts to overlap its reference element.\n- [`inner`](https://popper.js.org/popper-documentation.html#modifiers..inner) makes the popper flow toward the inner of the reference element (disabled by default).\n- [`hide`](https://popper.js.org/popper-documentation.html#modifiers..hide) hides the popper when its reference element is outside of the popper boundaries.\n- [`computeStyle`](https://popper.js.org/popper-documentation.html#modifiers..computeStyle) generates the CSS styles to apply to the DOM\n\n**Popper.js modifiers that `Popover` manages and that cannot be customized:**\n\n- `arrowOffset` moves the popper a little bit to make room for the arrow\n- `updatePopoverState` saves off some popper data to `Popover` React state for fancy things\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    See [the Popper.js Modifiers documentation](https://popper.js.org/popper-documentation.html#modifiers)\n    for more details on all the available modifiers.\n</div>\n\n@### Controlled mode\n\nIf you prefer to have more control over your popover's behavior, you can specify the `isOpen`\nproperty to use the component in __controlled mode__. You are now in charge of the component's\nopen state.\n\nProviding a non-null value for `isOpen` disables all automatic interaction and instead invokes\nthe `onInteraction` callback prop any time the opened state _would have changed_ in response to\nuser interaction under the current `interactionKind`.\n\nNote that there are cases where `onInteraction` is invoked with an unchanged open state.\nIt is important to pay attention to the value of the `nextOpenState` parameter and determine\nin your application logic whether you should care about a particular invocation (for instance,\nif the `nextOpenState` is not the same as the `Popover`'s current state).\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Disabling controlled popovers</h4>\n    <p>If `disabled={true}`, a controlled popover will remain closed even if `isOpen={true}`.\n    The popover will re-open when `disabled` is set to `false`.</p>\n</div>\n\n#### Example controlled usage\n\n```tsx\nconst { Popover, Position } = \"@blueprintjs/core\";\n\nexport class ControlledPopoverExample extends React.Component<{}, { isOpen: boolean }> {\n    public state = { isOpen: false };\n\n    public render() {\n        let popoverContent = (\n            <div>\n                <h5>Popover Title</h5>\n                <p>...</p>\n                <button class=\"bp3-button bp3-popover-dismiss\">Close popover</button>\n            </div>\n        );\n\n        return (\n            <Popover\n                content={popoverContent}\n                interactionKind={PopoverInteractionKind.CLICK}\n                isOpen={this.state.isOpen}\n                onInteraction={(state) => this.handleInteraction(state)}\n                position={Position.RIGHT}\n            >\n                <button className=\"bp3-button bp3-intent-primary\">Popover target</button>\n            </Popover>\n        );\n    }\n\n    private handleInteraction(nextOpenState: boolean) {\n        this.setState({ isOpen: nextOpenState });\n    }\n}\n```\n\n@### Interactions\n\nThe `interactionKind` prop governs how the popover should open and close in response to user interactions.\nThe supported values are:\n\n- `HOVER`\n    - __Opens when:__ the target is hovered\n    - __Closes when:__ the cursor is no longer inside the target _or_ the popover\n- `HOVER_TARGET_ONLY`:\n    - __Opens when:__ the target is hovered\n    - __Closes when:__ the cursor is no longer inside the target\n- `CLICK`:\n    - __Opens when:__ the target is clicked\n    - __Closes when:__ the user clicks anywhere outside of the popover (including the target)\n- `CLICK_TARGET_ONLY`:\n    - __Opens when:__ the target is clicked\n    - __Closes when:__ the target is clicked\n\nThe following example demonstrates the various interaction kinds (note: these Popovers contain [`MenuItem`](#core/components/menu.menu-item)s with `shouldDismissPopover={false}`, for clarity):\n\n@reactExample PopoverInteractionKindExample\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Conditionally styling popover targets</h4>\n    When a popover is open, `Classes.POPOVER_OPEN` is applied to the target.\n    You can use this to style the target differently when the popover is open.\n</div>\n\n@### Closing on click\n\nSometimes it is desirable for an element inside a `Popover` to close the popover\non click. `Popover` supports a pair of CSS classes, `Classes.POPOVER_DISMISS`\nand `Classes.POPOVER_DISMISS_OVERRIDE`, that can be attached to elements to\ndescribe whether click events should dismiss the enclosing popover.\n\nTo mark an element (and its children) as \"dismiss elements\", simply add the\nclass `Classes.POPOVER_DISMISS`. For example, the **Dismiss** button in the\ntop-level [Popover example](#core/components/popover) has this class, and all\n`MenuItem`s receive this class by default (see `shouldDismissPopover` prop). To\nenable this behavior on the entire popover body, pass\n`popoverClassName={Classes.POPOVER_DISMISS}`.\n\nCancel the dismiss behavior on subtrees by nesting\n`Classes.POPOVER_DISMISS_OVERRIDE` inside `Classes.POPOVER_DISMISS`. Clicks\noriginating inside disabled elements (either via the `disabled` attribute or\n`Classes.DISABLED`) will never dismiss a popover.\n\nAdditionally, the prop `captureDismiss` (disabled by default) will prevent click\nevents from dismissing _grandparent_ popovers (not the `Popover` immediately\ncontaining the dismiss element). `MenuItem` disables this feature such that\nclicking any submenu item will close all submenus, which is desirable behavior\nfor a menu tree.\n\n```tsx\n<div className={Classes.POPOVER_DISMISS}>\n    <button>Click me to dismiss</button>\n    <button disabled={true}>I will not dismiss</button>\n    <div className={Classes.POPOVER_DISMISS_OVERRIDE}>\n        <button>I too shall not dismiss</button>\n    </div>\n</div>\n```\n\n@reactExample PopoverDismissExample\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Dismiss elements won't have any effect in a popover with\n    `PopoverInteractionKind.HOVER_TARGET_ONLY`, because there is no way to\n    interact with the popover content itself: the popover is dismissed the\n    moment the user mouses away from the target.\n</div>\n\n@### Backdrop\n\nThe `hasBackdrop` prop governs whether a backdrop appears while the popover is open. When `true`:\n\n- __A transparent backdrop will render beneath the popover__. This backdrop\n  covers the entire viewport and prevents interaction with the document until\n  the popover is closed. This is useful for preventing stray clicks or hovers in\n  your app when the user tries to close a popover.\n- __The popover will receive focus when opened__, allowing for better keyboard accessibility.\n\nClicking the backdrop will:\n\n- _in uncontrolled mode_, close the popover.\n- _in controlled mode_, invoke the `onInteraction` callback with an argument of `false`.\n\nThis backdrop behavior is only available for popovers having `interactionKind={PopoverInteractionKind.CLICK}`.\nAn error is thrown if used otherwise.\n\n#### Styling the backdrop\n\nBy default, the popover backdrop is invisible, but you can easily add your own styles to\n`.bp3-popover-backdrop` to customize the appearance of the backdrop (for example, you could give it\na translucent background color, like the backdrop for the [`Dialog`](#core/components/dialog) component).\n\nThe backdrop element has the same opacity-fade transition as the `Dialog` backdrop.\n\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Dangerous edge case</h4>\n    Rendering a `<Popover isOpen={true} hasBackdrop={true}>` outside the viewport bounds can easily break\n    your application by covering the UI with an invisible non-interactive backdrop. This edge case\n    must be handled by your application code or simply avoided if possible.\n</div>\n\n@### Portal rendering\n\nBy default, popover contents are rendered in a [`Portal`](#core/components/portal) appended to `document.body`. This\nallows the popover contents to \"escape\" the application DOM tree to avoid incompatible styles on ancestor elements.\n(Incompatible styles typically include hidden `overflow` or complex `position` logic.) It also ensures that the popover\nwill appear above all other content, as its container element appears after the application container in the DOM.\n\nDisable the `usePortal` prop to render popover contents in the normal document flow as a sibling of the target.\nThis behavior can be desirable to inherit CSS styles from surrounding elements, and can result in smoother performance\nwhen scrolling. Not using a `Portal` works well for most layouts, because popovers style themselves to appear above\neverything else on the page without needing to manually adjust z-indices, and Popper.js will keep them nicely positioned.\n\n@reactExample PopoverPortalExample\n\n@## Style\n\n@### Dark theme\n\nThe `Popover` component automatically detects whether its trigger is nested inside a `.bp3-dark`\ncontainer and applies the same class to itself. You can also explicitly apply the dark theme to\nthe React component by providing the prop `popoverClassName=\"bp3-dark\"`.\n\nAs a result, any component that you place inside a `Popover` (such as a `Menu`) automatically\ninherits the dark theme styles. Note that [`Tooltip`](#core/components/tooltip) uses `Popover` internally, so it also benefits\nfrom this behavior.\n\nThis behavior can be disabled (if the `Popover` uses a `Portal`) via the `inheritDarkTheme` prop.\n\n@### Sizing\n\nPopovers by default have a `max-width` but no `max-height`. To constrain the height of a popover\nand make its content scrollable, add a custom class to your popover content element and attach\nstyles to that class:\n\n```tsx\n<Popover content={<div class=\"custom-class\">...</div>}>\n    ...\n</Popover>\n```\n\n```css.scss\n.custom-class {\n    max-height: $pt-grid-size * 15;\n    overflow-y: auto;\n}\n```\n\n@reactExample PopoverSizingExample\n\n@### Minimal style\n\nYou can create a minimal popover by setting `minimal={true}`.\nThis removes the arrow from the popover and makes the transitions more subtle.\n\n@reactExample PopoverMinimalExample\n\nThis minimal style is recommended for popovers that are not triggered by an obvious action like the\nuser clicking or hovering over something. For example, a minimal popover is useful for making\ntypeahead menus where the menu appears almost instantly after the user starts typing.\n\nMinimal popovers are also useful for context menus that require quick enter and leave animations to\nsupport fast workflows. You can see an example in the [context menus](#core/components/context-menu)\ndocumentation.\n\n@## Testing\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Your best resource for strategies in popover testing is\n    [its own unit test suite.](https://github.com/palantir/blueprint/blob/develop/packages/core/test/popover/popoverTests.tsx)\n</div>\n\n#### Animation delays\n\n`Popover` can be difficult to test because it uses `Portal` to inject its contents elsewhere in the\nDOM (outside the usual flow); this can be simplified by using `inline` Popovers in tests.\nHover interactions can also be tricky due to delays and transitions; this can be resolved by\nzeroing the default hover delays.\n\n```tsx\n<Popover inline {...yourProps} hoverCloseDelay={0} hoverOpenDelay={0}>\n    {yourTarget}\n</Popover>\n```\n\n#### Rendering delays\n\n`Popover` delays rendering updates triggered on `mouseleave`, because the mouse might have moved from the popover to the target, which may require special handling depending on the current [`interactionKind`](#core/components/popover.opening-and-closing). Popper.js also throttles rendering updates to improve performance. If your components are not updating in a synchronous fashion as expected, you may need to introduce a `setTimeout` to wait for asynchronous Popover rendering to catch up:\n\n```tsx\nimport { Classes, Overlay, Popover, PopoverInteractionKind } from \"@blueprintjs/core\";\nimport { assert } from \"chai\";\nimport { mount } from \"enzyme\";\nimport { Target } from \"react-popper\";\n\nwrapper = mount(\n    <Popover usePortal={false} interactionKind={PopoverInteractionKind.HOVER}>\n        <div>Target</div>\n        <div>Content</div>\n    </Popover>\n);\n\nwrapper.find(Target).simulate(\"mouseenter\");\n\n// hostNodes() is an Enzyme 3 helper that retains only native-HTML nodes.\nwrapper.find(`.${Classes.POPOVER}`).hostNodes().simulate(\"mouseenter\");\nwrapper.find(`.${Classes.POPOVER}`).hostNodes().simulate(\"mouseleave\");\n\nsetTimeout(() => {\n    // Popover delays closing using setTimeout, so need to defer this check too.\n    const isOpen = wrapper.find(Overlay).prop(\"isOpen\");\n    assert.equal(isOpen, false);\n});\n```\n\n#### Element refs\n\nIf `inline` rendering is not an option, `Popover` instances expose `popoverElement` and\n`targetElement` refs of the actual DOM elements. Importantly, `popoverElement` points to the\n`.bp3-popover` element inside the `Portal` so you can use it to easily query popover contents without\nknowing precisely where they are in the DOM. These properties exist primarily to simplify testing;\ndo not rely on them for feature work.\n\n```tsx\n// using mount() from enzyme\nconst wrapper = mount(<Popover content={<div className=\"test\">test</div>} />);\nconst { popoverElement } = wrapper.instance();\n// popoverElement is the parent element of .bp3-popover\npopoverElement.querySelector(\".test\").textContent; // \"test\"\n```",
      "metadata": {}
    },
    "portal": {
      "reference": "portal",
      "route": "core/components/portal",
      "sourcePath": "packages/core/src/components/portal/portal.md",
      "title": "Portal",
      "contents": [
        {
          "tag": "heading",
          "value": "Portal",
          "level": 1,
          "route": "core/components/portal"
        },
        "<p>The <code>Portal</code> component renders its children into a new &quot;subtree&quot; outside of the current component\nhierarchy. It is an essential piece of <a href=\"#core/components/overlay\"><code>Overlay</code></a>, responsible for ensuring that\nthe overlay contents cover the application below. In most cases you do not need to use a <code>Portal</code>\ndirectly; this documentation is provided simply for reference.</p>\n",
        {
          "tag": "heading",
          "value": "React 15",
          "level": 2,
          "route": "core/components/portal.react-15"
        },
        "<p>In a <strong>React 15</strong> environment, <code>Portal</code> will use <code>ReactDOM.unstable_renderSubtreeIntoContainer</code> to achieve the teleportation effect, which has a few caveats:</p>\n<ol>\n<li><code>Portal</code> <code>children</code> are wrapped in an extra <code>&lt;div&gt;</code> inside the portal container element.</li>\n<li>Test harnesses such as <code>enzyme</code> cannot trivially find elements &quot;through&quot; Portals as they&#39;re not in the same React tree.</li>\n<li>React <code>context</code> _is_ preserved (this one&#39;s a good thing).</li>\n</ol>\n<p>In a <strong>React 16+</strong> environment, the <code>Portal</code> component will use <a href=\"https://reactjs.org/docs/portals.html\"><code>ReactDOM.createPortal</code></a> which preserves the React tree perfectly and does not require any of the above caveats.</p>\n",
        {
          "tag": "heading",
          "value": "React context",
          "level": 2,
          "route": "core/components/portal.react-context"
        },
        "<p><code>Portal</code> supports the following options on its <a href=\"https://facebook.github.io/react/docs/context.html\">React context</a>.\nTo use them, supply a child context to a subtree that contains the Portals you want to customize.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Blueprint uses the React 15-compatible <code>getChildContext()</code> API instead of the newer React 16.3 <code>React.createContext()</code> API.\n</div>\n\n",
        {
          "tag": "interface",
          "value": "IPortalContext"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/portal.props"
        },
        "<p>The <code>Portal</code> component functions like a declarative <code>appendChild()</code>, or jQuery&#39;s\n<code>$.fn.appendTo()</code>. The children of a <code>Portal</code> component are inserted into a new\nchild of the <code>&lt;body&gt;</code>.</p>\n<p><code>Portal</code> is used inside <a href=\"#core/components/overlay\"><code>Overlay</code></a> to actually overlay the content on the\napplication.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">A note about responsive layouts</h4>\n    For a single-page app, if the <code>&lt;body&gt;</code> is styled with <code>width: 100%</code> and <code>height: 100%</code>, a <code>Portal</code>\n    may take up extra whitespace and cause the window to undesirably scroll. To fix this, instead\n    apply <code>position: absolute</code> to the <code>&lt;body&gt;</code> tag.\n</div>\n\n",
        {
          "tag": "interface",
          "value": "IPortalProps"
        }
      ],
      "contentsRaw": "@# Portal\n\nThe `Portal` component renders its children into a new \"subtree\" outside of the current component\nhierarchy. It is an essential piece of [`Overlay`](#core/components/overlay), responsible for ensuring that\nthe overlay contents cover the application below. In most cases you do not need to use a `Portal`\ndirectly; this documentation is provided simply for reference.\n\n@## React 15\n\nIn a **React 15** environment, `Portal` will use `ReactDOM.unstable_renderSubtreeIntoContainer` to achieve the teleportation effect, which has a few caveats:\n\n1. `Portal` `children` are wrapped in an extra `<div>` inside the portal container element.\n1. Test harnesses such as `enzyme` cannot trivially find elements \"through\" Portals as they're not in the same React tree.\n1. React `context` _is_ preserved (this one's a good thing).\n\nIn a **React 16+** environment, the `Portal` component will use [`ReactDOM.createPortal`](https://reactjs.org/docs/portals.html) which preserves the React tree perfectly and does not require any of the above caveats.\n\n@## React context\n\n`Portal` supports the following options on its [React context](https://facebook.github.io/react/docs/context.html).\nTo use them, supply a child context to a subtree that contains the Portals you want to customize.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Blueprint uses the React 15-compatible `getChildContext()` API instead of the newer React 16.3 `React.createContext()` API.\n</div>\n\n@interface IPortalContext\n\n@## Props\n\nThe `Portal` component functions like a declarative `appendChild()`, or jQuery's\n`$.fn.appendTo()`. The children of a `Portal` component are inserted into a new\nchild of the `<body>`.\n\n`Portal` is used inside [`Overlay`](#core/components/overlay) to actually overlay the content on the\napplication.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">A note about responsive layouts</h4>\n    For a single-page app, if the `<body>` is styled with `width: 100%` and `height: 100%`, a `Portal`\n    may take up extra whitespace and cause the window to undesirably scroll. To fix this, instead\n    apply `position: absolute` to the `<body>` tag.\n</div>\n\n@interface IPortalProps",
      "metadata": {}
    },
    "progress-bar": {
      "reference": "progress-bar",
      "route": "core/components/progress-bar",
      "sourcePath": "packages/core/src/components/progress-bar/progress-bar.md",
      "title": "Progress bar",
      "contents": [
        {
          "tag": "heading",
          "value": "Progress bar",
          "level": 1,
          "route": "core/components/progress-bar"
        },
        "<p>Progress bars indicate progress towards the completion of a task or an\nindeterminate loading state.</p>\n",
        {
          "tag": "reactExample",
          "value": "ProgressExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/progress-bar.props"
        },
        "<p><code>ProgressBar</code> is a simple stateless component that renders the appropriate HTML\nmarkup. It supports a <code>value</code> prop between 0 and 1 that determines the width of\nthe progress meter. Omitting <code>value</code> will result in an &quot;indeterminate&quot; progress\nmeter that fills the entire bar.</p>\n",
        {
          "tag": "interface",
          "value": "IProgressBarProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/progress-bar.css"
        },
        "<p>Set the current progress of the bar via a <code>width</code> style rule on the inner\n<code>.bp3-progress-meter</code> element. This is a very simple CSS-only component, and\ninput validation for <code>width</code> values is limited: values above <code>100%</code> appear as\n100% progress and values below <code>0%</code> appear as 0%.</p>\n<p>Omitting <code>width</code> will result in an &quot;indeterminate&quot; progress meter that fills the\nentire bar.</p>\n",
        {
          "tag": "css",
          "value": "progress-bar"
        }
      ],
      "contentsRaw": "@# Progress bar\n\nProgress bars indicate progress towards the completion of a task or an\nindeterminate loading state.\n\n@reactExample ProgressExample\n\n@## Props\n\n`ProgressBar` is a simple stateless component that renders the appropriate HTML\nmarkup. It supports a `value` prop between 0 and 1 that determines the width of\nthe progress meter. Omitting `value` will result in an \"indeterminate\" progress\nmeter that fills the entire bar.\n\n@interface IProgressBarProps\n\n@## CSS\n\nSet the current progress of the bar via a `width` style rule on the inner\n`.bp3-progress-meter` element. This is a very simple CSS-only component, and\ninput validation for `width` values is limited: values above `100%` appear as\n100% progress and values below `0%` appear as 0%.\n\nOmitting `width` will result in an \"indeterminate\" progress meter that fills the\nentire bar.\n\n@css progress-bar",
      "metadata": {}
    },
    "resize-sensor": {
      "reference": "resize-sensor",
      "route": "core/components/resize-sensor",
      "sourcePath": "packages/core/src/components/resize-sensor/resize-sensor.md",
      "title": "Resize sensor",
      "contents": [
        {
          "tag": "heading",
          "value": "Resize sensor",
          "level": 1,
          "route": "core/components/resize-sensor"
        },
        "<p><code>ResizeSensor</code> is a component that provides a <code>&quot;resize&quot;</code> event for its single\nDOM element child. It is a thin wrapper around\n<a href=\"https://developers.google.com/web/updates/2016/10/resizeobserver\"><code>ResizeObserver</code></a> to provide React bindings.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>IResizeEntry</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>ResizeSensor</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"storage type function tsx\"><span>function</span></span><span>&nbsp;</span><span class=\"meta definition function tsx entity name function tsx\"><span>handleResize</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>entries</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>IResizeEntry</span></span><span class=\"meta type tuple tsx\"><span class=\"meta brace square tsx\"><span>[</span><span>]</span></span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"support class console tsx\"><span>console</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function console tsx\"><span>log</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>entries</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>map</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>e</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"string template tsx\"><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span class=\"meta template expression tsx\"><span class=\"punctuation definition template-expression begin tsx\"><span>${</span></span><span class=\"meta embedded line tsx\"><span class=\"variable other object tsx\"><span>e</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>contentRect</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>width</span></span></span><span class=\"punctuation definition template-expression end tsx\"><span>}</span></span></span><span>&nbsp;x&nbsp;</span><span class=\"meta template expression tsx\"><span class=\"punctuation definition template-expression begin tsx\"><span>${</span></span><span class=\"meta embedded line tsx\"><span class=\"variable other object tsx\"><span>e</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>contentRect</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>height</span></span></span><span class=\"punctuation definition template-expression end tsx\"><span>}</span></span></span><span class=\"punctuation definition string template end tsx\"><span>`</span></span></span><span class=\"meta brace round tsx\"><span>)</span><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>ResizeSensor</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onResize</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>handleResize</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>style</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>width</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>props</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>width</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>ResizeSensor</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/resize-sensor.props"
        },
        "<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Asynchronous behavior</h4>\n    The <code>onResize</code> callback is invoked asynchronously after a resize is detected\n    and typically happens at the end of a frame (after layout, before paint).\n    Therefore, testing behavior that relies on this component involves setting a\n    timeout for the next frame.\n</div>\n\n",
        {
          "tag": "interface",
          "value": "IResizeSensorProps"
        }
      ],
      "contentsRaw": "\n@# Resize sensor\n\n`ResizeSensor` is a component that provides a `\"resize\"` event for its single\nDOM element child. It is a thin wrapper around\n[`ResizeObserver`][resizeobserver] to provide React bindings.\n\n[resizeobserver]: https://developers.google.com/web/updates/2016/10/resizeobserver\n\n```tsx\nimport { IResizeEntry, ResizeSensor } from \"@blueprintjs/core\";\n\nfunction handleResize(entries: IResizeEntry[]) {\n    console.log(entries.map(e => `${e.contentRect.width} x ${e.contentRect.height}`));\n}\n\n<ResizeSensor onResize={handleResize}>\n    <div style={{ width: this.props.width }} />\n</ResizeSensor>\n```\n\n@## Props\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Asynchronous behavior</h4>\n    The `onResize` callback is invoked asynchronously after a resize is detected\n    and typically happens at the end of a frame (after layout, before paint).\n    Therefore, testing behavior that relies on this component involves setting a\n    timeout for the next frame.\n</div>\n\n@interface IResizeSensorProps",
      "metadata": {
        "tag": "new"
      }
    },
    "skeleton": {
      "reference": "skeleton",
      "route": "core/components/skeleton",
      "sourcePath": "packages/core/src/components/skeleton/skeleton.md",
      "title": "Skeleton",
      "contents": [
        {
          "tag": "heading",
          "value": "Skeleton",
          "level": 1,
          "route": "core/components/skeleton"
        },
        "<p>Skeletons provide a loading state that mimics the shape of your yet-to-load content.</p>\n<p>This &quot;component&quot; is a single constant <code>Classes.SKELETON</code> that, when applied to\nan element through <code>className</code>, will cover its content with a loading animation.\nThe skeleton inherits the dimensions of whatever element the class is applied\nto, so you should supply a placeholder while awaiting real content.</p>\n",
        {
          "tag": "css",
          "value": "skeleton"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/skeleton.css"
        },
        "<p>Apply the class <code>.bp3-skeleton</code> to elements that you would like to cover up with\na loading animation.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Manually disable focusable elements</h4>\n    When using the <code>.bp3-skeleton</code> class on focusable elements such as inputs\n    and buttons, be sure to disable the element, via either the <code>disabled</code> or\n    <code>tabindex=&quot;-1&quot;</code> attributes. Failing to do so will allow these skeleton\n    elements to be focused when they shouldn&#39;t be.\n</div>"
      ],
      "contentsRaw": "@# Skeleton\n\nSkeletons provide a loading state that mimics the shape of your yet-to-load content.\n\nThis \"component\" is a single constant `Classes.SKELETON` that, when applied to\nan element through `className`, will cover its content with a loading animation.\nThe skeleton inherits the dimensions of whatever element the class is applied\nto, so you should supply a placeholder while awaiting real content.\n\n@css skeleton\n\n@## CSS\n\nApply the class `.bp3-skeleton` to elements that you would like to cover up with\na loading animation.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Manually disable focusable elements</h4>\n    When using the `.bp3-skeleton` class on focusable elements such as inputs\n    and buttons, be sure to disable the element, via either the `disabled` or\n    `tabindex=\"-1\"` attributes. Failing to do so will allow these skeleton\n    elements to be focused when they shouldn't be.\n</div>",
      "metadata": {}
    },
    "sliders": {
      "reference": "sliders",
      "route": "core/components/sliders",
      "sourcePath": "packages/core/src/components/slider/sliders.md",
      "title": "Slider",
      "contents": [
        {
          "tag": "heading",
          "value": "Slider",
          "level": 1,
          "route": "core/components/sliders"
        },
        "<p>A slider is a numeric input for choosing numbers between lower and upper bounds.\nIt also has a labeled axis that supports custom formatting.</p>\n<p>To adjust a slider value, the user clicks and drags a handle or clicks the axis\nto move the nearest handle to that spot. Users can also use arrow keys on the\nkeyboard to adjust individual handles.</p>\n<p>Use <code>Slider</code> for choosing a single value, <code>RangeSlider</code> for choosing two values,\nand <code>MultiSlider</code> for more advanced use cases.</p>\n",
        {
          "tag": "heading",
          "value": "Slider",
          "level": 2,
          "route": "core/components/sliders.slider"
        },
        "<p>Use <code>Slider</code> to choose a single value on a number line. It is a controlled\ncomponent, so the <code>value</code> prop determines its current appearance. Provide an\n<code>onChange</code> handler to receive updates and an <code>onRelease</code> handler to determine\nwhen the user has stopped interacting with the slider.</p>\n",
        {
          "tag": "reactExample",
          "value": "SliderExample"
        },
        {
          "tag": "interface",
          "value": "ISliderProps"
        },
        {
          "tag": "heading",
          "value": "Range slider",
          "level": 2,
          "route": "core/components/sliders.range-slider"
        },
        "<p>Use <code>RangeSlider</code> to choose a range between upper and lower bounds. The\ncomponent functions identically to <code>Slider</code> with the addition of a second\nhandle. It exposes its selected value as <code>[number, number]</code>: a two-element array\nwith minimum and maximum range bounds.</p>\n<p><code>RangeSlider</code> is a controlled component, so the <code>value</code> prop determines its\ncurrent appearance. Provide an <code>onChange</code> handler to receive updates and an\n<code>onRelease</code> handler to determine when the user has stopped interacting with the\nslider.</p>\n",
        {
          "tag": "reactExample",
          "value": "RangeSliderExample"
        },
        {
          "tag": "interface",
          "value": "IRangeSliderProps"
        },
        {
          "tag": "heading",
          "value": "Multi slider",
          "level": 2,
          "route": "core/components/sliders.multi-slider"
        },
        "<p><code>MultiSlider</code> is a flexible solution for picking arbitrary values on a number\nline. It powers both <code>Slider</code> and <code>RangeSlider</code> internally and can be used for\nimplementing more advanced use cases than one or two numbers.</p>\n",
        {
          "tag": "reactExample",
          "value": "MultiSliderExample"
        },
        {
          "tag": "interface",
          "value": "IMultiSliderProps"
        },
        {
          "tag": "heading",
          "value": "Handle",
          "level": 3,
          "route": "core/components/sliders.handle"
        },
        "<p>Handles for a <code>MultiSlider</code> are configured as <code>MultiSlider.Handle</code> children\nelements, each with their own <code>value</code> and other properties.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RangeSlider&nbsp;looks&nbsp;roughly&nbsp;like&nbsp;this:</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MultiSlider</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MultiSlider.Handle</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>startValue</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>type</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>start</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intentAfter</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MultiSlider.Handle</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>endValue</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>type</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>end</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MultiSlider</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IHandleProps"
        }
      ],
      "contentsRaw": "\n@# Slider\n\nA slider is a numeric input for choosing numbers between lower and upper bounds.\nIt also has a labeled axis that supports custom formatting.\n\nTo adjust a slider value, the user clicks and drags a handle or clicks the axis\nto move the nearest handle to that spot. Users can also use arrow keys on the\nkeyboard to adjust individual handles.\n\nUse `Slider` for choosing a single value, `RangeSlider` for choosing two values,\nand `MultiSlider` for more advanced use cases.\n\n@## Slider\n\nUse `Slider` to choose a single value on a number line. It is a controlled\ncomponent, so the `value` prop determines its current appearance. Provide an\n`onChange` handler to receive updates and an `onRelease` handler to determine\nwhen the user has stopped interacting with the slider.\n\n@reactExample SliderExample\n\n@interface ISliderProps\n\n@## Range slider\n\nUse `RangeSlider` to choose a range between upper and lower bounds. The\ncomponent functions identically to `Slider` with the addition of a second\nhandle. It exposes its selected value as `[number, number]`: a two-element array\nwith minimum and maximum range bounds.\n\n`RangeSlider` is a controlled component, so the `value` prop determines its\ncurrent appearance. Provide an `onChange` handler to receive updates and an\n`onRelease` handler to determine when the user has stopped interacting with the\nslider.\n\n@reactExample RangeSliderExample\n\n@interface IRangeSliderProps\n\n@## Multi slider\n\n`MultiSlider` is a flexible solution for picking arbitrary values on a number\nline. It powers both `Slider` and `RangeSlider` internally and can be used for\nimplementing more advanced use cases than one or two numbers.\n\n@reactExample MultiSliderExample\n\n@interface IMultiSliderProps\n\n@### Handle\n\nHandles for a `MultiSlider` are configured as `MultiSlider.Handle` children\nelements, each with their own `value` and other properties.\n\n```tsx\n// RangeSlider looks roughly like this:\n<MultiSlider onChange={...}>\n    <MultiSlider.Handle value={startValue} type=\"start\" intentAfter={Intent.PRIMARY} />\n    <MultiSlider.Handle value={endValue} type=\"end\" />\n</MultiSlider>\n```\n\n@interface IHandleProps",
      "metadata": {
        "tag": "new"
      }
    },
    "spinner": {
      "reference": "spinner",
      "route": "core/components/spinner",
      "sourcePath": "packages/core/src/components/spinner/spinner.md",
      "title": "Spinner",
      "contents": [
        {
          "tag": "heading",
          "value": "Spinner",
          "level": 1,
          "route": "core/components/spinner"
        },
        "<p>Spinners indicate progress in a circular fashion. They&#39;re great for ongoing\noperations and can also represent known progress.</p>\n",
        {
          "tag": "reactExample",
          "value": "SpinnerExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/spinner.props"
        },
        "<p><code>Spinner</code> is a simple stateless component that renders SVG markup. It can be\nused safely in DOM and SVG containers as it only renders SVG elements.</p>\n<p>The <code>value</code> prop determines how much of the track is filled by the head. When\nthis prop is defined, the spinner head will smoothly animate as <code>value</code>\nchanges. Omitting <code>value</code> will result in an &quot;indeterminate&quot; spinner where the\nhead spins indefinitely (this is the default appearance).</p>\n<p>The <code>size</code> prop determines the pixel width/height of the spinner. Size constants\nare provided as static properties: <code>Spinner.SIZE_SMALL</code>,\n<code>Spinner.SIZE_STANDARD</code>, <code>Spinner.SIZE_LARGE</code>. Small and large sizes can be set\nby including <code>Classes.SMALL</code> or <code>Classes.LARGE</code> in <code>className</code> instead of the\n<code>size</code> prop (this prevents an API break when upgrading to 3.x).</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">IE11 compatibility note</h4>\n    IE11 <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/status/csstransitionsforsvgelements/?q=svg\">does not support CSS transitions on SVG elements</a> so spinners with known\n    <code>value</code> will not smoothly transition as <code>value</code> changes. Indeterminate spinners still animate\n    correctly because they rely on CSS animations.\n</div>\n\n",
        {
          "tag": "interface",
          "value": "ISpinnerProps"
        }
      ],
      "contentsRaw": "@# Spinner\n\nSpinners indicate progress in a circular fashion. They're great for ongoing\noperations and can also represent known progress.\n\n@reactExample SpinnerExample\n\n@## Props\n\n`Spinner` is a simple stateless component that renders SVG markup. It can be\nused safely in DOM and SVG containers as it only renders SVG elements.\n\nThe `value` prop determines how much of the track is filled by the head. When\nthis prop is defined, the spinner head will smoothly animate as `value`\nchanges. Omitting `value` will result in an \"indeterminate\" spinner where the\nhead spins indefinitely (this is the default appearance).\n\nThe `size` prop determines the pixel width/height of the spinner. Size constants\nare provided as static properties: `Spinner.SIZE_SMALL`,\n`Spinner.SIZE_STANDARD`, `Spinner.SIZE_LARGE`. Small and large sizes can be set\nby including `Classes.SMALL` or `Classes.LARGE` in `className` instead of the\n`size` prop (this prevents an API break when upgrading to 3.x).\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">IE11 compatibility note</h4>\n    IE11 [does not support CSS transitions on SVG elements][msdn-css-svg] so spinners with known\n    `value` will not smoothly transition as `value` changes. Indeterminate spinners still animate\n    correctly because they rely on CSS animations.\n</div>\n\n[msdn-css-svg]: https://developer.microsoft.com/en-us/microsoft-edge/platform/status/csstransitionsforsvgelements/?q=svg\n\n@interface ISpinnerProps",
      "metadata": {}
    },
    "tabs": {
      "reference": "tabs",
      "route": "core/components/tabs",
      "sourcePath": "packages/core/src/components/tabs/tabs.md",
      "title": "Tabs",
      "contents": [
        {
          "tag": "heading",
          "value": "Tabs",
          "level": 1,
          "route": "core/components/tabs"
        },
        {
          "tag": "reactExample",
          "value": "TabsExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/tabs.props"
        },
        "<p>Tab selection is managed by <code>id</code>, much like the HTML <code>&lt;select&gt;</code> element respects\n<code>&lt;option value&gt;</code>. This is more reliable than using a numeric index as it does\nnot require translating between arbitrary indices and tab names. It does,\nhowever, require that every <code>Tab</code> have a <em>locally unique <code>id</code> value</em>.</p>\n<p>Arbitrary elements are supported in the tab list, and order is respected. Yes,\nyou can even insert things <em>between</em> <code>Tab</code>s.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Tab</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Tabs</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tabs</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>id</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>TabsExample</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleTabChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectedTabId</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>rx</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tab</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>id</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>ng</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>title</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Angular</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>panel</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>AngularPanel</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tab</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>id</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>mb</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>title</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Ember</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>panel</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>EmberPanel</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tab</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>id</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>rx</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>title</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>React</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>panel</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>ReactPanel</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tab</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>id</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bb</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>disabled</span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>title</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Backbone</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>panel</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>BackbonePanel</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tabs.Expander</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>input</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>type</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>placeholder</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Search...</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tabs</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Tabs",
          "level": 3,
          "route": "core/components/tabs.tabs"
        },
        "<p><code>Tabs</code> is the top-level component responsible for rendering the tab list and coordinating selection.\nIt can be used in controlled mode by providing <code>selectedTabId</code> and <code>onChange</code> props, or in\nuncontrolled mode by optionally providing <code>defaultSelectedTabId</code> and <code>onChange</code>.</p>\n<p>Children of the <code>Tabs</code> are rendered in order in the tab list, which is a flex container.\n<code>Tab</code> children are managed by the component; clicking one will change selection. Arbitrary other\nchildren are simply rendered in order; interactions are your responsibility.</p>\n<p>Insert a <code>&lt;Tabs.Expander /&gt;</code> between any two children to right-align all\nsubsequent children (or bottom-align when <code>vertical</code>).</p>\n",
        {
          "tag": "interface",
          "value": "ITabsProps"
        },
        {
          "tag": "heading",
          "value": "Tab",
          "level": 3,
          "route": "core/components/tabs.tab"
        },
        "<p><code>Tab</code> is a minimal wrapper with no functionality of its own&mdash;it is managed entirely by its\nparent <code>Tabs</code> wrapper. Tab title text can be set either via <code>title</code> prop or via React children\n(for more complex content).</p>\n<p>The associated tab <code>panel</code> will be visible when the <code>Tab</code> is active. Omitting\n<code>panel</code> is supported and can be useful when you want the associated panel to\nappear elsewhere in the DOM (by rendering it yourself as needed).</p>\n",
        {
          "tag": "interface",
          "value": "ITabProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/tabs.css"
        },
        "<p>Blueprint offers tab styles with the class <code>bp3-tabs</code>. You should add the proper\naccessibility attributes (<code>role</code>, <code>aria-selected</code>, and <code>aria-hidden</code>) as\nnecessary if you choose to implement tabs with CSS.</p>\n<p><code>.bp3-tab-panel</code> elements with <code>aria-hidden=&quot;true&quot;</code> are hidden automatically by\nthe Blueprint CSS. You may also simply omit hidden tabs from your markup to\nimprove performance (the <code>Tabs</code> JavaScript component supports this through the\n<code>renderActiveTabPanelOnly</code> prop).</p>\n",
        {
          "tag": "css",
          "value": "tabs"
        }
      ],
      "contentsRaw": "@# Tabs\n\n@reactExample TabsExample\n\n@## Props\n\nTab selection is managed by `id`, much like the HTML `<select>` element respects\n`<option value>`. This is more reliable than using a numeric index as it does\nnot require translating between arbitrary indices and tab names. It does,\nhowever, require that every `Tab` have a _locally unique `id` value_.\n\nArbitrary elements are supported in the tab list, and order is respected. Yes,\nyou can even insert things _between_ `Tab`s.\n\n```tsx\nimport { Tab, Tabs } from \"@blueprintjs/core\";\n\n<Tabs id=\"TabsExample\" onChange={this.handleTabChange} selectedTabId=\"rx\">\n    <Tab id=\"ng\" title=\"Angular\" panel={<AngularPanel />} />\n    <Tab id=\"mb\" title=\"Ember\" panel={<EmberPanel />} />\n    <Tab id=\"rx\" title=\"React\" panel={<ReactPanel />} />\n    <Tab id=\"bb\" disabled title=\"Backbone\" panel={<BackbonePanel />} />\n    <Tabs.Expander />\n    <input className=\"bp3-input\" type=\"text\" placeholder=\"Search...\" />\n</Tabs>\n```\n\n@### Tabs\n\n`Tabs` is the top-level component responsible for rendering the tab list and coordinating selection.\nIt can be used in controlled mode by providing `selectedTabId` and `onChange` props, or in\nuncontrolled mode by optionally providing `defaultSelectedTabId` and `onChange`.\n\nChildren of the `Tabs` are rendered in order in the tab list, which is a flex container.\n`Tab` children are managed by the component; clicking one will change selection. Arbitrary other\nchildren are simply rendered in order; interactions are your responsibility.\n\nInsert a `<Tabs.Expander />` between any two children to right-align all\nsubsequent children (or bottom-align when `vertical`).\n\n@interface ITabsProps\n\n@### Tab\n\n`Tab` is a minimal wrapper with no functionality of its own&mdash;it is managed entirely by its\nparent `Tabs` wrapper. Tab title text can be set either via `title` prop or via React children\n(for more complex content).\n\nThe associated tab `panel` will be visible when the `Tab` is active. Omitting\n`panel` is supported and can be useful when you want the associated panel to\nappear elsewhere in the DOM (by rendering it yourself as needed).\n\n@interface ITabProps\n\n@## CSS\n\nBlueprint offers tab styles with the class `bp3-tabs`. You should add the proper\naccessibility attributes (`role`, `aria-selected`, and `aria-hidden`) as\nnecessary if you choose to implement tabs with CSS.\n\n`.bp3-tab-panel` elements with `aria-hidden=\"true\"` are hidden automatically by\nthe Blueprint CSS. You may also simply omit hidden tabs from your markup to\nimprove performance (the `Tabs` JavaScript component supports this through the\n`renderActiveTabPanelOnly` prop).\n\n@css tabs",
      "metadata": {}
    },
    "tag-input": {
      "reference": "tag-input",
      "route": "core/components/tag-input",
      "sourcePath": "packages/core/src/components/tag-input/tag-input.md",
      "title": "Tag input",
      "contents": [
        {
          "tag": "heading",
          "value": "Tag input",
          "level": 1,
          "route": "core/components/tag-input"
        },
        "<p>Tag inputs render <a href=\"#core/components/tag\"><code>Tag</code></a>s inside an input, followed by an\nactual text input. The container is merely styled to look like a Blueprint\ninput; the actual editable element appears after the last tag. Clicking anywhere\non the container will focus the text input for seamless interaction.</p>\n",
        {
          "tag": "reactExample",
          "value": "TagInputExample"
        },
        "<div class=\"bp3-callout bp3-intent-success bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Looking for a dropdown menu?</h4>\n    <a href=\"#select/multi-select\"><code>MultiSelect</code> in the <strong>@blueprintjs/select</strong> package</a>\n    composes this component with a dropdopwn menu of suggestions.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/tag-input.props"
        },
        "<p><strong><code>TagInput</code> must be controlled,</strong> meaning the <code>values</code> prop is required and\nevent handlers are strongly suggested. Typing in the input and pressing\n<kbd>enter</kbd> will <strong>add new items</strong> by invoking callbacks. If <code>addOnBlur</code> is\nset to true, clicking out of the component will also trigger the callback to add\nnew items. A <code>separator</code> prop is supported to allow multiple items to be added\nat once; the default splits on commas and newlines.</p>\n<p><strong>Tags can be removed</strong> by clicking their &lt;span class=&quot;bp3-icon-standard</p>\n",
        {
          "tag": "ns-icon-cross\"></span>",
          "value": "buttons, or by pressing <kbd>backspace</kbd> repeatedly."
        },
        "<p>Arrow keys can also be used to focus on a particular tag before removing it. The\ncursor must be at the beginning of the text input for these interactions.</p>\n<p><strong><code>Tag</code> appearance can be customized</strong> with <code>tagProps</code>: supply an object to\napply the same props to every tag, or supply a callback to apply dynamic props\nper tag. Tag <code>values</code> must be an array of strings so you may need a\ntransformation step between your state and these props.</p>\n<p><code>TagInput</code> provides granular <code>onAdd</code> and <code>onRemove</code> <strong>event props</strong>, which are\npassed the added or removed items in response to the user interactions above. It\nalso provides <code>onChange</code>, which combines both events and is passed the updated\n<code>values</code> array, with new items appended to the end and removed items filtered\naway.</p>\n<p>The <code>&lt;input&gt;</code> element can be controlled directly via the <code>inputValue</code> and\n<code>onInputChange</code> props. Additional properties (such as custom event handlers) can\nbe applied to the input via <code>inputProps</code>.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Handling long words</h4>\n    Set an explicit <code>width</code> on the container element to cause long tags to wrap onto multiple lines.\n    Either supply a specific pixel value, or use <code>&lt;TagInput className={Classes.FILL}&gt;</code>\n    to fill its container&#39;s width (try this in the example above).\n</div>\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Disabling a tag input</h4>\n    <p>Disabling this component requires setting the <code>disabled</code> prop to <code>true</code>\n    and separately disabling the component&#39;s <code>rightElement</code> as appropriate\n    (because <code>TagInput</code> accepts any <code>JSX.Element</code> as its <code>rightElement</code>).</p>\n</div>\n\n",
        {
          "tag": "interface",
          "value": "ITagInputProps"
        }
      ],
      "contentsRaw": "@# Tag input\n\nTag inputs render [`Tag`](#core/components/tag)s inside an input, followed by an\nactual text input. The container is merely styled to look like a Blueprint\ninput; the actual editable element appears after the last tag. Clicking anywhere\non the container will focus the text input for seamless interaction.\n\n@reactExample TagInputExample\n\n<div class=\"bp3-callout bp3-intent-success bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Looking for a dropdown menu?</h4>\n    [`MultiSelect` in the **@blueprintjs/select** package](#select/multi-select)\n    composes this component with a dropdopwn menu of suggestions.\n</div>\n\n@## Props\n\n**`TagInput` must be controlled,** meaning the `values` prop is required and\nevent handlers are strongly suggested. Typing in the input and pressing\n<kbd>enter</kbd> will **add new items** by invoking callbacks. If `addOnBlur` is\nset to true, clicking out of the component will also trigger the callback to add\nnew items. A `separator` prop is supported to allow multiple items to be added\nat once; the default splits on commas and newlines.\n\n**Tags can be removed** by clicking their <span class=\"bp3-icon-standard\nbp3-icon-cross\"></span> buttons, or by pressing <kbd>backspace</kbd> repeatedly.\nArrow keys can also be used to focus on a particular tag before removing it. The\ncursor must be at the beginning of the text input for these interactions.\n\n**`Tag` appearance can be customized** with `tagProps`: supply an object to\napply the same props to every tag, or supply a callback to apply dynamic props\nper tag. Tag `values` must be an array of strings so you may need a\ntransformation step between your state and these props.\n\n`TagInput` provides granular `onAdd` and `onRemove` **event props**, which are\npassed the added or removed items in response to the user interactions above. It\nalso provides `onChange`, which combines both events and is passed the updated\n`values` array, with new items appended to the end and removed items filtered\naway.\n\nThe `<input>` element can be controlled directly via the `inputValue` and\n`onInputChange` props. Additional properties (such as custom event handlers) can\nbe applied to the input via `inputProps`.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Handling long words</h4>\n    Set an explicit `width` on the container element to cause long tags to wrap onto multiple lines.\n    Either supply a specific pixel value, or use `<TagInput className={Classes.FILL}>`\n    to fill its container's width (try this in the example above).\n</div>\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Disabling a tag input</h4>\n    <p>Disabling this component requires setting the `disabled` prop to `true`\n    and separately disabling the component's `rightElement` as appropriate\n    (because `TagInput` accepts any `JSX.Element` as its `rightElement`).</p>\n</div>\n\n@interface ITagInputProps",
      "metadata": {}
    },
    "tag": {
      "reference": "tag",
      "route": "core/components/tag",
      "sourcePath": "packages/core/src/components/tag/tag.md",
      "title": "Tag",
      "contents": [
        {
          "tag": "heading",
          "value": "Tag",
          "level": 1,
          "route": "core/components/tag"
        },
        "<p>Tags are great for lists of strings.</p>\n",
        {
          "tag": "reactExample",
          "value": "TagExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/tag.props"
        },
        "<p><code>Tag</code> is a stateless wrapper around its children with support for an optional\nclose button. It also supports all HTML <code>&lt;span&gt;</code> props.</p>\n",
        {
          "tag": "interface",
          "value": "ITagProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/tag.css"
        },
        "<p>Create a tag with a <code>span.bp3-tag</code>. An optional &quot;remove&quot; button can be added\nwith a <code>button.bp3-tag-remove</code> as the last child. The button is a separate\nelement to support interaction handlers in your framework of choice.</p>\n",
        {
          "tag": "css",
          "value": "tag"
        }
      ],
      "contentsRaw": "@# Tag\n\nTags are great for lists of strings.\n\n@reactExample TagExample\n\n@## Props\n\n`Tag` is a stateless wrapper around its children with support for an optional\nclose button. It also supports all HTML `<span>` props.\n\n@interface ITagProps\n\n@## CSS\n\nCreate a tag with a `span.bp3-tag`. An optional \"remove\" button can be added\nwith a `button.bp3-tag-remove` as the last child. The button is a separate\nelement to support interaction handlers in your framework of choice.\n\n@css tag",
      "metadata": {}
    },
    "text": {
      "reference": "text",
      "route": "core/components/text",
      "sourcePath": "packages/core/src/components/text/text.md",
      "title": "Text",
      "contents": [
        {
          "tag": "heading",
          "value": "Text",
          "level": 1,
          "route": "core/components/text"
        },
        "<p>The <code>Text</code> component adds accessible overflow behavior to a line of text by\nconditionally adding the title attribute and truncating with an ellipsis when content overflows its container.</p>\n",
        {
          "tag": "reactExample",
          "value": "TextExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/text.props"
        },
        "<p><code>Text</code> accepts and renders arbitrary children. It is intended that these children render as text.</p>\n",
        {
          "tag": "interface",
          "value": "ITextProps"
        }
      ],
      "contentsRaw": "@# Text\n\nThe `Text` component adds accessible overflow behavior to a line of text by\nconditionally adding the title attribute and truncating with an ellipsis when content overflows its container.\n\n@reactExample TextExample\n\n@## Props\n\n`Text` accepts and renders arbitrary children. It is intended that these children render as text.\n\n@interface ITextProps",
      "metadata": {}
    },
    "toast": {
      "reference": "toast",
      "route": "core/components/toast",
      "sourcePath": "packages/core/src/components/toast/toast.md",
      "title": "Toast",
      "contents": [
        {
          "tag": "heading",
          "value": "Toast",
          "level": 1,
          "route": "core/components/toast"
        },
        "<p>A toast is a lightweight, ephemeral notice from an application in direct response to a user&#39;s action.</p>\n<p>Toasts can be configured to appear at either the top or the bottom of an application window, and it is possible to\nhave more than one toast onscreen at a time.</p>\n",
        {
          "tag": "reactExample",
          "value": "ToastExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/toast.props"
        },
        {
          "tag": "heading",
          "value": "Toast",
          "level": 3,
          "route": "core/components/toast.toast"
        },
        "<p><code>Toast</code>s have a built-in timeout of five seconds. Users can also dismiss them manually by clicking the &times; button.\nHovering the cursor over a toast prevents it from disappearing. When the cursor leaves the toast, the toast&#39;s timeout restarts.\nSimilarly, focusing the toast (for example, by hitting the <code>tab</code> key) halts the timeout, and blurring restarts the timeout.</p>\n<p>You can add one additional action button to a toast. You might use this to provide an undo button, for example.</p>\n<p>You can also apply the same visual intent styles to <code>Toast</code>s that you can to <a href=\"#core/components/button.css\"><code>Button</code>s</a>.</p>\n",
        {
          "tag": "interface",
          "value": "IToastProps"
        },
        {
          "tag": "heading",
          "value": "Toaster",
          "level": 3,
          "route": "core/components/toast.toaster"
        },
        "<p>The <code>Toaster</code> React component is a stateful container for a single list of toasts. Internally, it\nuses <a href=\"#core/components/overlay\"><code>Overlay</code></a> to manage children and transitions. It can be vertically\naligned along the top or bottom edge of its container (new toasts will slide in from that edge) and\nhorizontally aligned along the left edge, center, or right edge of its container.</p>\n<p>There are three ways to use the <code>Toaster</code> component:</p>\n<ol>\n<li><code>Toaster.create(props)</code> static method returns a new <code>IToaster</code> instance. Use the instance method <code>toaster.show()</code> to manipulate this instance. <strong>(recommended)</strong></li>\n<li><code>&lt;Toaster&gt;&lt;Toast /&gt;...&lt;/Toaster&gt;</code>: Render a <code>&lt;Toaster&gt;</code> element with React <code>children</code>.</li>\n<li><code>&lt;Toaster ref={ref =&gt; ref.show({ ...toast })} /&gt;</code>: Render a <code>&lt;Toaster&gt;</code> element and use the <code>ref</code> prop to access its instance methods.</li>\n</ol>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Working with multiple toasters</h4>\n    You can have multiple toasters in a single application, but you must ensure that each has a unique\n    <code>position</code> to prevent overlap.\n</div>\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Toaster focus</h4>\n    <code>Toaster</code> always disables <code>Overlay</code>&#39;s <code>enforceFocus</code> behavior (meaning that you&#39;re not blocked\n    from accessing other parts of the application while a toast is active), and by default also\n    disables <code>autoFocus</code> (meaning that focus will not switch to a toast when it appears). You can\n    enable <code>autoFocus</code> for an individual <code>Toaster</code> via a prop, if desired.\n</div>\n\n\n",
        {
          "tag": "interface",
          "value": "IToasterProps"
        },
        {
          "tag": "heading",
          "value": "Static usage",
          "level": 2,
          "route": "core/components/toast.static-usage"
        },
        "<p>The <code>Toaster</code> component provides the static <code>create</code> method that returns a new <code>Toaster</code> instance, rendered into an\nelement attached to <code>&lt;body&gt;</code>. A <code>Toaster</code> instance\nhas a collection of methods to show and hide toasts in its given container.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source ts\"><span class=\"meta function-call ts\"><span class=\"variable other object ts\"><span>Toaster</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"entity name function ts\"><span>create</span></span></span><span class=\"meta brace round ts\"><span>(</span></span><span class=\"variable other readwrite ts\"><span>props</span></span><span class=\"keyword operator ternary ts\"><span>?</span><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite ts\"><span>IToasterProps</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite ts\"><span>container</span></span><span>&nbsp;</span><span class=\"keyword operator assignment ts\"><span>=</span></span><span>&nbsp;</span><span class=\"support variable dom ts\"><span>document</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"support variable property dom ts\"><span>body</span></span><span class=\"meta brace round ts\"><span>)</span></span><span>:&nbsp;</span><span class=\"variable other readwrite ts\"><span>IToaster</span></span></span></div></pre><p>The <code>Toaster</code> will be rendered into a new element appended to the given <code>container</code>.\nThe <code>container</code> determines which element toasts are positioned relative to; the default value of <code>&lt;body&gt;</code> allows them to use the entire viewport.</p>\n<p>Note that the return type is <code>IToaster</code>, which is a minimal interface that exposes only the instance\nmethods detailed below. It can be thought of as <code>Toaster</code> minus the <code>React.Component</code> methods,\nbecause the <code>Toaster</code> should not be treated as a normal React component.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">React 16 usage</h4>\n    <code>Toaster.create()</code> will throw an error if invoked inside a component lifecycle method in React 16, as <code>ReactDOM.render()</code> will return\n    <code>null</code> resulting in an inaccessible toaster instance. See the second bullet point on the <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html#breaking-changes\">React 16 release notes</a> for more information.\n</div>\n\n",
        {
          "tag": "interface",
          "value": "IToaster"
        },
        {
          "tag": "heading",
          "value": "Example",
          "level": 3,
          "route": "core/components/toast.example"
        },
        "<p>Your application can contain several <code>Toaster</code> instances and easily share them across the codebase as modules.</p>\n<p>The following code samples demonstrate our preferred pattern for intergrating a toaster into a React application:</p>\n<h4 id=\"toaster-ts\"><code>toaster.ts</code></h4>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Position</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Toaster</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment block documentation tsx\"><span class=\"punctuation definition comment tsx\"><span>/**</span></span><span>&nbsp;Singleton&nbsp;toaster&nbsp;instance.&nbsp;Create&nbsp;separate&nbsp;instances&nbsp;for&nbsp;different&nbsp;options.&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>AppToaster</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Toaster</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>create</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>className</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>recipe-toaster</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>position</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support class dom tsx\"><span>Position</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>TOP</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre><h4 id=\"application-ts\"><code>application.ts</code></h4>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"constant language import-export-all tsx\"><span>*</span></span><span>&nbsp;</span><span class=\"keyword control as tsx\"><span>as</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>React</span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>react</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>AppToaster</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>./toaster</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>App</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>PureComponent</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>showToast</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Toast&nbsp;please</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx entity name function tsx\"><span>showToast</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;create&nbsp;toasts&nbsp;in&nbsp;response&nbsp;to&nbsp;interactions.</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;in&nbsp;most&nbsp;cases,&nbsp;it&#39;s&nbsp;enough&nbsp;to&nbsp;simply&nbsp;create&nbsp;and&nbsp;forget&nbsp;(thanks&nbsp;to&nbsp;timeout).</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>AppToaster</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>show</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>message</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Toasted.</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "React component usage",
          "level": 2,
          "route": "core/components/toast.react-component-usage"
        },
        "<p>Render the <code>&lt;Toaster&gt;</code> component like any other element and supply <code>&lt;Toast&gt;</code> elements as <code>children</code>. You can\noptionally attach a <code>ref</code> handler to access the instance methods, but we strongly recommend using the\n<a href=\"#core/components/toast.static-usage\"><code>Toaster.create</code> static method</a> documented above instead. Note that\n<code>children</code> and <code>ref</code> can be used together, but <code>children</code> will always appear <em>after</em> toasts created with\n<code>ref.show()</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Position</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Toast</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Toaster</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"constant language import-export-all tsx\"><span>*</span></span><span>&nbsp;</span><span class=\"keyword control as tsx\"><span>as</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>React</span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>react</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>MyComponent</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>PureComponent</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>state</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>toasts</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span>&nbsp;</span><span class=\"comment block tsx\"><span class=\"punctuation definition comment tsx\"><span>/*</span></span><span>&nbsp;IToastProps[]&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span><span>&nbsp;</span><span class=\"meta brace square tsx\"><span>]</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>toaster</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Toaster</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>refHandlers</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span class=\"entity name function tsx\"><span>toaster</span></span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>ref</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Toaster</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>toaster</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>ref</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta field declaration tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>addToast</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Procure&nbsp;toast</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Toaster</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>position</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"support class dom tsx\"><span>Position</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>TOP_RIGHT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>ref</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>refHandlers</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>toaster</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"comment block tsx\"><span class=\"punctuation definition comment tsx\"><span>/*</span></span><span>&nbsp;&quot;Toasted!&quot;&nbsp;will&nbsp;appear&nbsp;here&nbsp;after&nbsp;clicking&nbsp;button.&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>toasts</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>map</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>toast</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Toast</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"variable other readwrite tsx\"><span>toast</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Toaster</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;addToast&nbsp;=&nbsp;()&nbsp;=&gt;&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>toaster</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>show</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>message</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Toasted!</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span>;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"meta jsx children tsx\"><span>}</span></span></span></span></span></span></span></div></pre>"
      ],
      "contentsRaw": "@# Toast\n\nA toast is a lightweight, ephemeral notice from an application in direct response to a user's action.\n\nToasts can be configured to appear at either the top or the bottom of an application window, and it is possible to\nhave more than one toast onscreen at a time.\n\n@reactExample ToastExample\n\n@## Props\n\n@### Toast\n\n`Toast`s have a built-in timeout of five seconds. Users can also dismiss them manually by clicking the &times; button.\nHovering the cursor over a toast prevents it from disappearing. When the cursor leaves the toast, the toast's timeout restarts.\nSimilarly, focusing the toast (for example, by hitting the `tab` key) halts the timeout, and blurring restarts the timeout.\n\nYou can add one additional action button to a toast. You might use this to provide an undo button, for example.\n\nYou can also apply the same visual intent styles to `Toast`s that you can to [`Button`s](#core/components/button.css).\n\n@interface IToastProps\n\n@### Toaster\n\nThe `Toaster` React component is a stateful container for a single list of toasts. Internally, it\nuses [`Overlay`](#core/components/overlay) to manage children and transitions. It can be vertically\naligned along the top or bottom edge of its container (new toasts will slide in from that edge) and\nhorizontally aligned along the left edge, center, or right edge of its container.\n\nThere are three ways to use the `Toaster` component:\n\n1. `Toaster.create(props)` static method returns a new `IToaster` instance. Use the instance method `toaster.show()` to manipulate this instance. __(recommended)__\n1. `<Toaster><Toast />...</Toaster>`: Render a `<Toaster>` element with React `children`.\n1. `<Toaster ref={ref => ref.show({ ...toast })} />`: Render a `<Toaster>` element and use the `ref` prop to access its instance methods.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Working with multiple toasters</h4>\n    You can have multiple toasters in a single application, but you must ensure that each has a unique\n    `position` to prevent overlap.\n</div>\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Toaster focus</h4>\n    `Toaster` always disables `Overlay`'s `enforceFocus` behavior (meaning that you're not blocked\n    from accessing other parts of the application while a toast is active), and by default also\n    disables `autoFocus` (meaning that focus will not switch to a toast when it appears). You can\n    enable `autoFocus` for an individual `Toaster` via a prop, if desired.\n</div>\n\n\n@interface IToasterProps\n\n@## Static usage\n\nThe `Toaster` component provides the static `create` method that returns a new `Toaster` instance, rendered into an\nelement attached to `<body>`. A `Toaster` instance\nhas a collection of methods to show and hide toasts in its given container.\n\n```ts\nToaster.create(props?: IToasterProps, container = document.body): IToaster\n```\n\nThe `Toaster` will be rendered into a new element appended to the given `container`.\nThe `container` determines which element toasts are positioned relative to; the default value of `<body>` allows them to use the entire viewport.\n\nNote that the return type is `IToaster`, which is a minimal interface that exposes only the instance\nmethods detailed below. It can be thought of as `Toaster` minus the `React.Component` methods,\nbecause the `Toaster` should not be treated as a normal React component.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">React 16 usage</h4>\n    `Toaster.create()` will throw an error if invoked inside a component lifecycle method in React 16, as `ReactDOM.render()` will return\n    `null` resulting in an inaccessible toaster instance. See the second bullet point on the [React 16 release notes](https://reactjs.org/blog/2017/09/26/react-v16.0.html#breaking-changes) for more information.\n</div>\n\n@interface IToaster\n\n@### Example\n\nYour application can contain several `Toaster` instances and easily share them across the codebase as modules.\n\nThe following code samples demonstrate our preferred pattern for intergrating a toaster into a React application:\n\n#### `toaster.ts`\n```tsx\nimport { Position, Toaster } from \"@blueprintjs/core\";\n\n/** Singleton toaster instance. Create separate instances for different options. */\nexport const AppToaster = Toaster.create({\n    className: \"recipe-toaster\",\n    position: Position.TOP,\n});\n```\n\n#### `application.ts`\n```tsx\nimport { Button } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { AppToaster } from \"./toaster\";\n\nexport class App extends React.PureComponent {\n    render() {\n        return <Button onClick={this.showToast} text=\"Toast please\" />;\n    }\n\n    showToast = () => {\n        // create toasts in response to interactions.\n        // in most cases, it's enough to simply create and forget (thanks to timeout).\n        AppToaster.show({ message: \"Toasted.\" });\n    }\n}\n```\n\n@## React component usage\n\nRender the `<Toaster>` component like any other element and supply `<Toast>` elements as `children`. You can\noptionally attach a `ref` handler to access the instance methods, but we strongly recommend using the\n[`Toaster.create` static method](#core/components/toast.static-usage) documented above instead. Note that\n`children` and `ref` can be used together, but `children` will always appear _after_ toasts created with\n`ref.show()`.\n\n```tsx\nimport { Button, Position, Toast, Toaster } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nclass MyComponent extends React.PureComponent {\n    public state = { toasts: [ /* IToastProps[] */ ] }\n\n    private toaster: Toaster;\n    private refHandlers = {\n        toaster: (ref: Toaster) => this.toaster = ref,\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button onClick={this.addToast} text=\"Procure toast\" />\n                <Toaster position={Position.TOP_RIGHT} ref={this.refHandlers.toaster}>\n                    {/* \"Toasted!\" will appear here after clicking button. */}\n                    {this.state.toasts.map(toast => <Toast {...toast} />)}\n                </Toaster>\n            </div\n        )\n    }\n\n    private addToast = () => {\n        this.toaster.show({ message: \"Toasted!\" });\n    }\n}\n```",
      "metadata": {}
    },
    "tooltip": {
      "reference": "tooltip",
      "route": "core/components/tooltip",
      "sourcePath": "packages/core/src/components/tooltip/tooltip.md",
      "title": "Tooltip",
      "contents": [
        {
          "tag": "heading",
          "value": "Tooltip",
          "level": 1,
          "route": "core/components/tooltip"
        },
        "<p>A tooltip is a lightweight popover for showing additional infromation on hover.</p>\n",
        {
          "tag": "reactExample",
          "value": "TooltipExample"
        },
        {
          "tag": "heading",
          "value": "Combining with popover",
          "level": 2,
          "route": "core/components/tooltip.combining-with-popover"
        },
        "<p>A single target can be wrapped in both a popover and a tooltip.</p>\n<p>You must put the <code>Tooltip</code> <em>inside</em> the <code>Popover</code> (and the target inside the\n<code>Tooltip</code>), so the final hierarchy is <code>Popover &gt; Tooltip &gt; target</code> This order is\nrequired because the popover will disable the tooltip when it is open,\npreventing both elements from appearing at the same time.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Popover</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Position</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Tooltip</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>h1</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Popover!</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>h1</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>position</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"support class dom tsx\"><span>Position</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>RIGHT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tooltip</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>content</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>I&nbsp;has&nbsp;a&nbsp;popover!</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>position</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"support class dom tsx\"><span>Position</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>RIGHT</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Hover&nbsp;and&nbsp;click&nbsp;me</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Tooltip</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Popover</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/tooltip.props"
        },
        "<p><code>Tooltip</code> simply passes its props to <a href=\"#core/components/popover\"><code>Popover</code></a>, with\nsome exceptions. Notably, it only supports <code>HOVER</code> interactions and the <code>target</code>\nprop is not supported.</p>\n<p>When creating a tooltip, you must specify both:</p>\n<ul>\n<li>its <em>content</em> via the <code>content</code> prop, and</li>\n<li>its <em>target</em> as a single child element or string.</li>\n</ul>\n<p>The content will appear in a contrasting popover when the target is hovered.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Button targets</h4>\n    Buttons make great tooltip targets, but the <code>disabled</code> attribute will prevent all\n    events so the enclosing <code>Tooltip</code> will not know when to respond.\n    Use <a href=\"#core/components/button.anchor-button\"><code>AnchorButton</code></a> instead;\n    see the <a href=\"#core/components/button.props\">callout here</a> for more details.\n</div>\n\n",
        {
          "tag": "interface",
          "value": "ITooltipProps"
        }
      ],
      "contentsRaw": "@# Tooltip\n\nA tooltip is a lightweight popover for showing additional infromation on hover.\n\n@reactExample TooltipExample\n\n@## Combining with popover\n\nA single target can be wrapped in both a popover and a tooltip.\n\nYou must put the `Tooltip` _inside_ the `Popover` (and the target inside the\n`Tooltip`), so the final hierarchy is `Popover > Tooltip > target` This order is\nrequired because the popover will disable the tooltip when it is open,\npreventing both elements from appearing at the same time.\n\n```tsx\nimport { Button, Popover, Position, Tooltip } from \"@blueprintjs/core\";\n\n<Popover content={<h1>Popover!</h1>} position={Position.RIGHT}>\n    <Tooltip content=\"I has a popover!\" position={Position.RIGHT}>\n        <Button>Hover and click me</Button>\n    </Tooltip>\n</Popover>\n```\n\n@## Props\n\n`Tooltip` simply passes its props to [`Popover`](#core/components/popover), with\nsome exceptions. Notably, it only supports `HOVER` interactions and the `target`\nprop is not supported.\n\nWhen creating a tooltip, you must specify both:\n- its _content_ via the `content` prop, and\n- its _target_ as a single child element or string.\n\nThe content will appear in a contrasting popover when the target is hovered.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Button targets</h4>\n    Buttons make great tooltip targets, but the `disabled` attribute will prevent all\n    events so the enclosing `Tooltip` will not know when to respond.\n    Use [`AnchorButton`](#core/components/button.anchor-button) instead;\n    see the [callout here](#core/components/button.props) for more details.\n</div>\n\n@interface ITooltipProps",
      "metadata": {}
    },
    "tree": {
      "reference": "tree",
      "route": "core/components/tree",
      "sourcePath": "packages/core/src/components/tree/tree.md",
      "title": "Tree",
      "contents": [
        {
          "tag": "heading",
          "value": "Tree",
          "level": 1,
          "route": "core/components/tree"
        },
        "<p>Trees display hierarchical data.</p>\n",
        {
          "tag": "reactExample",
          "value": "TreeExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "core/components/tree.props"
        },
        "<p><code>Tree</code> is a stateless component. Its contents are dictated by the <code>contents</code> prop, which is an array\nof <code>ITreeNode</code>s (see <a href=\"#components/tree.tree-node\">below</a>). The tree is multi-rooted if\n<code>contents</code> contains more than one top-level object.</p>\n<p>A variety of interaction callbacks are also exposed as props. All interaction callbacks supply a\nparameter <code>nodePath</code>, which is an array of numbers representing a node&#39;s position in the tree. For\nexample, <code>[2, 0]</code> represents the first child (<code>0</code>) of the third top-level node (<code>2</code>).</p>\n",
        {
          "tag": "interface",
          "value": "ITreeProps"
        },
        {
          "tag": "heading",
          "value": "Instance methods",
          "level": 3,
          "route": "core/components/tree.instance-methods"
        },
        "<ul>\n<li><code>Tree.getNodeContentElement(nodeId: string | number): HTMLElement | undefined</code> &ndash;\nReturns the underlying HTML element of the <code>Tree</code> node with an id of <code>nodeId</code>.\nThis element does not contain the children of the node, only its label and controls.\nIf the node is not currently mounted, <code>undefined</code> is returned.</li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Tree node",
          "level": 3,
          "route": "core/components/tree.tree-node"
        },
        "<p><code>ITreeNode</code> objects determine the contents, appearance, and state of each node in the tree.</p>\n<p>For example, <code>icon</code> controls the icon displayed for the node, and <code>isExpanded</code> determines\nwhether the node&#39;s children are shown.</p>\n",
        {
          "tag": "interface",
          "value": "ITreeNodeProps"
        },
        {
          "tag": "heading",
          "value": "CSS",
          "level": 2,
          "route": "core/components/tree.css"
        },
        "<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Note that the following examples set a maximum width and background color for the tree;\n    you may want to do this as well in your own usage.\n</div>\n\n",
        {
          "tag": "css",
          "value": "tree"
        }
      ],
      "contentsRaw": "@# Tree\n\nTrees display hierarchical data.\n\n@reactExample TreeExample\n\n@## Props\n\n`Tree` is a stateless component. Its contents are dictated by the `contents` prop, which is an array\nof `ITreeNode`s (see [below](#components/tree.tree-node)). The tree is multi-rooted if\n`contents` contains more than one top-level object.\n\nA variety of interaction callbacks are also exposed as props. All interaction callbacks supply a\nparameter `nodePath`, which is an array of numbers representing a node's position in the tree. For\nexample, `[2, 0]` represents the first child (`0`) of the third top-level node (`2`).\n\n@interface ITreeProps\n\n@### Instance methods\n\n* `Tree.getNodeContentElement(nodeId: string | number): HTMLElement | undefined` &ndash;\n  Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n  This element does not contain the children of the node, only its label and controls.\n  If the node is not currently mounted, `undefined` is returned.\n\n@### Tree node\n\n`ITreeNode` objects determine the contents, appearance, and state of each node in the tree.\n\nFor example, `icon` controls the icon displayed for the node, and `isExpanded` determines\nwhether the node's children are shown.\n\n@interface ITreeNodeProps\n\n@## CSS\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    Note that the following examples set a maximum width and background color for the tree;\n    you may want to do this as well in your own usage.\n</div>\n\n@css tree",
      "metadata": {}
    },
    "accessibility": {
      "reference": "accessibility",
      "route": "core/accessibility",
      "sourcePath": "packages/core/src/docs/accessibility.md",
      "title": "Accessibility",
      "contents": [
        {
          "tag": "heading",
          "value": "Accessibility",
          "level": 1,
          "route": "core/accessibility"
        },
        "<p>Blueprint strives to provide accessible components out of the box. Many of the JS components\nwill apply accessible HTML attributes to support different modes of usage.</p>\n",
        {
          "tag": "heading",
          "value": "Focus management",
          "level": 2,
          "route": "core/accessibility.focus-management"
        },
        "<p>Focus states (that glowy blue outline around the active element) are essential for keyboard\nnavigation to indicate which element is currently active. They are less important, and\noccasionally outright intrusive, when using a mouse because you can click wherever you want at\nany time.</p>\n<p>Blueprint includes a utility that manages the appearance of focus styles. When enabled, focus styles\nwill be hidden while the user interacts using the mouse and will appear when the\n<kbd>tab</kbd> key is pressed to begin keyboard navigation. Try this out for yourself\nbelow.</p>\n<p><strong>You must explictly enable this feature in your app (and you probably want to):</strong></p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source ts\"><span class=\"meta import ts\"><span class=\"keyword control import ts\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block ts\"><span class=\"punctuation definition block ts\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias ts\"><span>FocusStyleManager</span></span><span>&nbsp;</span><span class=\"punctuation definition block ts\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from ts\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double ts\"><span class=\"punctuation definition string begin ts\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end ts\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta function-call ts\"><span class=\"variable other object ts\"><span>FocusStyleManager</span></span><span class=\"punctuation accessor ts\"><span>.</span></span><span class=\"entity name function ts\"><span>onlyShowFocusOnTabs</span></span></span><span class=\"meta brace round ts\"><span>(</span><span>)</span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div></pre><p>Note that the focus style for text inputs (a slightly thicker colored border) is not removed by this\nutility because it is always useful to know where you&#39;re typing.</p>\n",
        {
          "tag": "reactExample",
          "value": "FocusExample"
        },
        {
          "tag": "heading",
          "value": "JavaScript API",
          "level": 3,
          "route": "core/accessibility.javascript-api"
        },
        "<p>This behavior is controlled by a singleton instance called <code>FocusStyleManager</code> that lives in the\n<strong>@blueprintjs/core</strong> package. It supports the following public methods:</p>\n<ul>\n<li><code>FocusStyleManager.isActive(): boolean</code>: Returns whether the <code>FocusStyleManager</code> is currently running.</li>\n<li><code>FocusStyleManager.onlyShowFocusOnTabs(): void</code>: Enable behavior which hides focus styles during mouse interaction.</li>\n<li><code>FocusStyleManager.alwaysShowFocus(): void</code>: Stop this behavior (focus styles are always visible).</li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Color contrast",
          "level": 2,
          "route": "core/accessibility.color-contrast"
        },
        "<p>Colors have been designed to be accessible to as many people as possible, even those who are\nvisually impaired or experiencing any kind of colorblindness. Our colors have not only been chosen\nto go well together but to also adhere to <a href=\"https://www.w3.org/TR/WCAG20/\">WCAG 2.0</a> standards.</p>\n"
      ],
      "contentsRaw": "@# Accessibility\n\nBlueprint strives to provide accessible components out of the box. Many of the JS components\nwill apply accessible HTML attributes to support different modes of usage.\n\n@## Focus management\n\nFocus states (that glowy blue outline around the active element) are essential for keyboard\nnavigation to indicate which element is currently active. They are less important, and\noccasionally outright intrusive, when using a mouse because you can click wherever you want at\nany time.\n\nBlueprint includes a utility that manages the appearance of focus styles. When enabled, focus styles\nwill be hidden while the user interacts using the mouse and will appear when the\n<kbd>tab</kbd> key is pressed to begin keyboard navigation. Try this out for yourself\nbelow.\n\n**You must explictly enable this feature in your app (and you probably want to):**\n\n```ts\nimport { FocusStyleManager } from \"@blueprintjs/core\";\n\nFocusStyleManager.onlyShowFocusOnTabs();\n```\n\nNote that the focus style for text inputs (a slightly thicker colored border) is not removed by this\nutility because it is always useful to know where you're typing.\n\n@reactExample FocusExample\n\n@### JavaScript API\n\nThis behavior is controlled by a singleton instance called `FocusStyleManager` that lives in the\n__@blueprintjs/core__ package. It supports the following public methods:\n\n- `FocusStyleManager.isActive(): boolean`: Returns whether the `FocusStyleManager` is currently running.\n- `FocusStyleManager.onlyShowFocusOnTabs(): void`: Enable behavior which hides focus styles during mouse interaction.\n- `FocusStyleManager.alwaysShowFocus(): void`: Stop this behavior (focus styles are always visible).\n\n@## Color contrast\n\nColors have been designed to be accessible to as many people as possible, even those who are\nvisually impaired or experiencing any kind of colorblindness. Our colors have not only been chosen\nto go well together but to also adhere to [WCAG 2.0](https://www.w3.org/TR/WCAG20/) standards.",
      "metadata": {}
    },
    "classes": {
      "reference": "classes",
      "route": "core/classes",
      "sourcePath": "packages/core/src/docs/classes.md",
      "title": "Classes",
      "contents": [
        {
          "tag": "heading",
          "value": "Classes",
          "level": 1,
          "route": "core/classes"
        },
        "<p>Blueprint packages provide React components in JS files and associated styles in\na CSS file. Each package exports a <code>Classes</code> constants object in JavaScript that\ncontains keys of the form <code>NAMED_CONSTANT</code> for every CSS class used. This\nseparation allows us to change CSS classes between versions without breaking\ndownstream users (although in practice this happens very rarely).</p>\n<p><strong>Avoid referencing hardcoded Blueprint class names in your JS or CSS code.</strong></p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;Don&#39;t&nbsp;do&nbsp;this!&nbsp;Avoid&nbsp;hardcoding&nbsp;Blueprint&nbsp;class&nbsp;names.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-large</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Don&#39;t&nbsp;do&nbsp;this!</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>button</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><p>The <strong>best practice</strong> is to add your own class to an element and then reference\nthat class whenever needed.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>my-custom-class</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>customized&nbsp;button</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>my-custom-class</span></span><span>&nbsp;</span><span class=\"meta property-list scss\"><span class=\"punctuation section property-list begin scss\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>width</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"constant numeric scss\"><span>4000</span></span><span class=\"keyword other unit scss\"><span>px</span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"punctuation section property-list end scss\"><span>}</span></span></span></span></div></pre><p>In cases where adding and styling a new class is impractical or undesirable, use\nthe <code>Classes</code> constants or <code>$ns</code> Sass/Less variable. The <code>Classes</code> constants can\nbe particularly useful when writing UI tests.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;use&nbsp;Classes&nbsp;constants&nbsp;for&nbsp;forward-compatible&nbsp;custom&nbsp;elements.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Classes</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>a</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>MENU_ITEM</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>custom&nbsp;menu&nbsp;item</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span>a</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;interpolate&nbsp;the&nbsp;$ns&nbsp;variable&nbsp;to&nbsp;generate&nbsp;forward-compatible&nbsp;class&nbsp;names.</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;this&nbsp;approach&nbsp;is&nbsp;*not&nbsp;encouraged*&nbsp;as&nbsp;it&nbsp;increases&nbsp;maintenance&nbsp;cost.</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>~@blueprintjs/core/lib/scss/variables</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span>.</span><span class=\"variable interpolation scss\"><span>#{</span><span class=\"variable scss\"><span class=\"variable scss\"><span>$ns</span></span></span><span>}-menu-item</span></span><span>&nbsp;</span><span class=\"meta property-list scss\"><span class=\"punctuation section property-list begin scss\"><span>{</span></span><span class=\"punctuation section property-list end scss\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Modifiers",
          "level": 2,
          "route": "core/classes.modifiers"
        },
        "<p>Blueprint components support a range of <strong>modifiers</strong> to adjust their\nappearance. Some commonly used modifiers are <code>intent</code>, <code>large</code>, and <code>minimal</code>.\nWhile modifiers are typically implemented as simple CSS classes, it is always\npreferrable to use the corresponding prop on a React component.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;Prefer&nbsp;props&nbsp;over&nbsp;modifier&nbsp;classes.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>primary</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>minimal</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Good&nbsp;stuff</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;Don&#39;t&nbsp;do&nbsp;this!</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>classNames</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>INTENT_PRIMARY</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>MINIMAL</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span>Don&#39;t&nbsp;do&nbsp;this!</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><p>Another important note: Since modifiers typically correspond directly to CSS classes, they will often\ncascade to children and <em>cannot be disabled</em> on descendants. If a <code>&lt;ButtonGroup&gt;</code>\nis marked <code>minimal={true}</code>, then setting <code>&lt;Button minimal={false}&gt;</code> on a child\nwill have <em>no effect</em> since <code>Classes.MINIMAL</code> cannot be removed or overriden\nby a descendant.</p>\n",
        {
          "tag": "heading",
          "value": "Namespacing",
          "level": 2,
          "route": "core/classes.namespacing"
        },
        "<p>All Blueprint CSS classes begin with a namespace prefix to isolate our styles\nfrom other frameworks: <code>.button</code> is a very common name, but only Blueprint\ndefines <code>.bp3-button</code>.</p>\n<p>Beginning with Blueprint 3.0, this namespace will be versioned by major version\nof the library so two major versions can be used together on a single page. This\nmeans the namespace at the beginning of every class <em>will change in each\nsubsequent major version</em>. In Blueprint 1.x and 2.x this namespace was <code>pt-</code>,\nbut in Blueprint 3.0 it will change to <code>bp3-</code> and increase accordingly.</p>\n<h3 id=\"custom-namespace\">Custom namespace</h3>\n<p>The namespace can be changed <em>at build time</em> to produce a custom Blueprint build\n(though this usage is not recommended and we cannot offer support for it). This\nrequires several things:</p>\n<ol>\n<li>You must use Sass and import Blueprint Sass source into your app, rather than using the CSS file distributed in the NPM package.<ul>\n<li>Compiling Blueprint Sass source requires two additional tools:\n<a href=\"https://www.npmjs.com/package/node-sass-package-importer\">node-sass-package-importer</a>\nfor resolving node_modules imports and\n<a href=\"https://github.com/haithembelhaj/sass-inline-svg\">sass-inline-svg</a> for\ninlining SVG images.</li>\n</ul>\n</li>\n<li>Define the <code>$ns</code> Sass variable in your app styles before importing <code>blueprint.scss</code> to update the generated CSS.</li>\n<li>When bundling your code, set the <code>BLUEPRINT_NAMESPACE</code> environment variable to the same value to update the generated <code>Classes</code> constants. The easiest way to do this is on the command line: <code>BLUEPRINT_NAMESPACE=&quot;custom&quot; webpack ...args</code></li>\n</ol>\n",
        {
          "tag": "heading",
          "value": "Linting",
          "level": 2,
          "route": "core/classes.linting"
        },
        "<p>The <a href=\"https://www.npmjs.com/package/@blueprintjs/tslint-config\"><strong>@blueprintjs/tslint-config</strong></a> NPM package provides advanced configuration for <a href=\"http://palantir.github.io/tslint/\">TSLint</a>, including a custom <code>blueprint-classes-constants</code> rule that will detect and warn about hardcoded <code>pt-</code>prefixed strings. See the package&#39;s <a href=\"https://www.npmjs.com/package/@blueprintjs/tslint-config\">README</a> for usage instructions.</p>\n"
      ],
      "contentsRaw": "\n@# Classes\n\nBlueprint packages provide React components in JS files and associated styles in\na CSS file. Each package exports a `Classes` constants object in JavaScript that\ncontains keys of the form `NAMED_CONSTANT` for every CSS class used. This\nseparation allows us to change CSS classes between versions without breaking\ndownstream users (although in practice this happens very rarely).\n\n**Avoid referencing hardcoded Blueprint class names in your JS or CSS code.**\n\n```tsx\n// Don't do this! Avoid hardcoding Blueprint class names.\n<button className=\"bp3-button bp3-large\">Don't do this!</button>\n```\n\nThe **best practice** is to add your own class to an element and then reference\nthat class whenever needed.\n\n```tsx\n<Button className=\"my-custom-class\" text=\"customized button\" />\n```\n```css.scss\n.my-custom-class {\n    width: 4000px;\n}\n```\n\nIn cases where adding and styling a new class is impractical or undesirable, use\nthe `Classes` constants or `$ns` Sass/Less variable. The `Classes` constants can\nbe particularly useful when writing UI tests.\n\n```tsx\n// use Classes constants for forward-compatible custom elements.\nimport { Classes } from \"@blueprintjs/core\"\n<a className={Classes.MENU_ITEM}>custom menu item</a>\n```\n\n```css.scss\n// interpolate the $ns variable to generate forward-compatible class names.\n// this approach is *not encouraged* as it increases maintenance cost.\n@import \"~@blueprintjs/core/lib/scss/variables\";\n.bp3-menu-item {}\n```\n\n@## Modifiers\n\nBlueprint components support a range of **modifiers** to adjust their\nappearance. Some commonly used modifiers are `intent`, `large`, and `minimal`.\nWhile modifiers are typically implemented as simple CSS classes, it is always\npreferrable to use the corresponding prop on a React component.\n\n```tsx\n// Prefer props over modifier classes.\n<Button intent=\"primary\" minimal={true}>Good stuff</Button>\n\n// Don't do this!\n<Button className={classNames(Classes.INTENT_PRIMARY, Classes.MINIMAL)}>Don't do this!</Button>\n```\n\nAnother important note: Since modifiers typically correspond directly to CSS classes, they will often\ncascade to children and _cannot be disabled_ on descendants. If a `<ButtonGroup>`\nis marked `minimal={true}`, then setting `<Button minimal={false}>` on a child\nwill have _no effect_ since `Classes.MINIMAL` cannot be removed or overriden\nby a descendant.\n\n@## Namespacing\n\nAll Blueprint CSS classes begin with a namespace prefix to isolate our styles\nfrom other frameworks: `.button` is a very common name, but only Blueprint\ndefines `.bp3-button`.\n\nBeginning with Blueprint 3.0, this namespace will be versioned by major version\nof the library so two major versions can be used together on a single page. This\nmeans the namespace at the beginning of every class _will change in each\nsubsequent major version_. In Blueprint 1.x and 2.x this namespace was `pt-`,\nbut in Blueprint 3.0 it will change to `bp3-` and increase accordingly.\n\n### Custom namespace\n\nThe namespace can be changed _at build time_ to produce a custom Blueprint build\n(though this usage is not recommended and we cannot offer support for it). This\nrequires several things:\n\n1. You must use Sass and import Blueprint Sass source into your app, rather than using the CSS file distributed in the NPM package.\n    - Compiling Blueprint Sass source requires two additional tools:\n      [node-sass-package-importer](https://www.npmjs.com/package/node-sass-package-importer)\n      for resolving node_modules imports and\n      [sass-inline-svg](https://github.com/haithembelhaj/sass-inline-svg) for\n      inlining SVG images.\n1. Define the `$ns` Sass variable in your app styles before importing `blueprint.scss` to update the generated CSS.\n1. When bundling your code, set the `BLUEPRINT_NAMESPACE` environment variable to the same value to update the generated `Classes` constants. The easiest way to do this is on the command line: `BLUEPRINT_NAMESPACE=\"custom\" webpack ...args`\n\n@## Linting\n\nThe [**@blueprintjs/tslint-config**](https://www.npmjs.com/package/@blueprintjs/tslint-config) NPM package provides advanced configuration for [TSLint](http://palantir.github.io/tslint/), including a custom `blueprint-classes-constants` rule that will detect and warn about hardcoded `pt-`prefixed strings. See the package's [README](https://www.npmjs.com/package/@blueprintjs/tslint-config) for usage instructions.",
      "metadata": {
        "tag": "new"
      }
    },
    "colors": {
      "reference": "colors",
      "route": "core/colors",
      "sourcePath": "packages/core/src/docs/colors.md",
      "title": "Colors",
      "contents": [
        {
          "tag": "heading",
          "value": "Colors",
          "level": 1,
          "route": "core/colors"
        },
        {
          "tag": "heading",
          "value": "Gray scale",
          "level": 2,
          "route": "core/colors.gray-scale"
        },
        "<p>Black, white and everything in between. The gray scale should be used for\nthe main UI frame: containers, headers, sections, boxes, etc.\nIf you need to call attention to a particular element (buttons, icons, tooltips, etc.),\nuse one of the <a href=\"#core/colors.core-colors\">core colors</a>.</p>\n",
        {
          "tag": "reactDocs",
          "value": "BlackWhitePalette"
        },
        {
          "tag": "reactDocs",
          "value": "GrayscalePalette"
        },
        {
          "tag": "heading",
          "value": "Core colors",
          "level": 2,
          "route": "core/colors.core-colors"
        },
        "<p>Core colors are reserved for user interface design. Use these to help call\nattention to specific UI elements, such as buttons, callouts, icons, etc.\nEach core color is mapped to what we call a <strong>visual intent</strong>. We use intents\nto convey the status of UI elements:</p>\n<ul>\n<li><em>Blue</em> (intent: primary) elevates elements from the typical gray scale UI frame.</li>\n<li><em>Green</em> (intent: success) indicates successful operations.</li>\n<li><em>Orange</em> (intent: warning) indicates warnings and intermediate states.</li>\n<li><em>Red</em> (intent: danger) indicates errors and potentially destructive operations.</li>\n</ul>\n<p>Core colors are also designed to:</p>\n<ul>\n<li>go well together and be used alongside each other in any application.</li>\n<li>adhere to <a href=\"https://www.w3.org/TR/WCAG20/\">WCAG 2.0</a> standards, and therefore are\nhighly accessible to visually impaired and color blind users.</li>\n</ul>\n",
        {
          "tag": "reactDocs",
          "value": "CoreColorsPalette"
        },
        {
          "tag": "heading",
          "value": "Extended colors",
          "level": 2,
          "route": "core/colors.extended-colors"
        },
        "<p>Extended colors should typically be reserved for data visualizations: any time\nyou need to represent data of some sort, you can use these.\nThese colors are less strict on <a href=\"https://www.w3.org/TR/WCAG20/\">WCAG 2.0</a>\naccessibility standards and should therefore not be used for typical user\ninterface design — take a look at <a href=\"#colors.core-colors\">core colors</a> instead.</p>\n",
        {
          "tag": "reactDocs",
          "value": "ExtendedColorsPalette"
        },
        {
          "tag": "heading",
          "value": "Usage",
          "level": 2,
          "route": "core/colors.usage"
        },
        "<p>Blueprint provides variables for colors in Sass, Less, and JavaScript.\n<a href=\"#core/variables.color-aliases\">Semantic aliases for common colors</a> are also provided in Sass and Less.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>~@blueprintjs/core/lib/scss/variables</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>rule</span></span><span>&nbsp;</span><span class=\"meta property-list scss\"><span class=\"punctuation section property-list begin scss\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>color</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"variable scss\"><span class=\"variable scss\"><span>$pt-link-color</span></span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta property-name scss\"><span class=\"support type property-name scss\"><span>background</span></span></span><span class=\"meta property-value scss\"><span class=\"punctuation separator key-value scss\"><span>:</span></span><span>&nbsp;</span><span class=\"variable scss\"><span class=\"variable scss\"><span>$black</span></span></span><span class=\"punctuation terminator rule scss\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"punctuation section property-list end scss\"><span>}</span></span></span></span></div></pre><p>Hex values for these colors can be accessed in JavaScript through the <code>Colors</code> export.\nNote that aliases are not currently available in JavaScript.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Colors</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span>div</span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>style</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>color</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Colors</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>BLUE3</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>background</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Colors</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>BLACK</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Color schemes",
          "level": 2,
          "route": "core/colors.color-schemes"
        },
        "<p>Use the following color scheme generators to produce color schemes for your data visualizations.\nFirst, choose the kind of scheme based on the type of your data, then customize the number of values\nusing the forms below. Finally, copy the colors array into your application and make it live!</p>\n<p>The following schemes have been carefully crafted to be visually striking and easily understandable\nwhile remaining accessible to visually impaired and color blind users.</p>\n",
        {
          "tag": "heading",
          "value": "Sequential color schemes",
          "level": 3,
          "route": "core/colors.sequential-color-schemes"
        },
        "<p>Sequential color schemes imply order and are best suited for representing data that\nranges from low-to-high values either on an ordinal or on a numerical scale.</p>\n",
        {
          "tag": "reactDocs",
          "value": "SequentialSchemePalette"
        },
        {
          "tag": "heading",
          "value": "Diverging color schemes",
          "level": 3,
          "route": "core/colors.diverging-color-schemes"
        },
        "<p>Diverging color schemes put equal emphasis on mid-range values and extremes\nat both ends of the data range.</p>\n",
        {
          "tag": "reactDocs",
          "value": "DivergingSchemePalette"
        },
        {
          "tag": "heading",
          "value": "Qualitative color schemes",
          "level": 3,
          "route": "core/colors.qualitative-color-schemes"
        },
        "<p>Qualitative color schemes use a series of unrelated colors to create a\nscheme that does not imply order, merely difference in kind.</p>\n",
        {
          "tag": "reactDocs",
          "value": "QualitativeSchemePalette"
        }
      ],
      "contentsRaw": "@# Colors\n\n@## Gray scale\n\nBlack, white and everything in between. The gray scale should be used for\nthe main UI frame: containers, headers, sections, boxes, etc.\nIf you need to call attention to a particular element (buttons, icons, tooltips, etc.),\nuse one of the [core colors](#core/colors.core-colors).\n\n@reactDocs BlackWhitePalette\n@reactDocs GrayscalePalette\n\n@## Core colors\n\nCore colors are reserved for user interface design. Use these to help call\nattention to specific UI elements, such as buttons, callouts, icons, etc.\nEach core color is mapped to what we call a __visual intent__. We use intents\nto convey the status of UI elements:\n\n- _Blue_ (intent: primary) elevates elements from the typical gray scale UI frame.\n- _Green_ (intent: success) indicates successful operations.\n- _Orange_ (intent: warning) indicates warnings and intermediate states.\n- _Red_ (intent: danger) indicates errors and potentially destructive operations.\n\nCore colors are also designed to:\n\n- go well together and be used alongside each other in any application.\n- adhere to [WCAG 2.0](https://www.w3.org/TR/WCAG20/) standards, and therefore are\nhighly accessible to visually impaired and color blind users.\n\n@reactDocs CoreColorsPalette\n\n@## Extended colors\n\nExtended colors should typically be reserved for data visualizations: any time\nyou need to represent data of some sort, you can use these.\nThese colors are less strict on [WCAG 2.0](https://www.w3.org/TR/WCAG20/)\naccessibility standards and should therefore not be used for typical user\ninterface design — take a look at [core colors](#colors.core-colors) instead.\n\n@reactDocs ExtendedColorsPalette\n\n@## Usage\n\nBlueprint provides variables for colors in Sass, Less, and JavaScript.\n[Semantic aliases for common colors](#core/variables.color-aliases) are also provided in Sass and Less.\n\n```css.scss\n@import \"~@blueprintjs/core/lib/scss/variables\";\n\n.rule {\n    color: $pt-link-color;\n    background: $black;\n}\n```\n\nHex values for these colors can be accessed in JavaScript through the `Colors` export.\nNote that aliases are not currently available in JavaScript.\n\n```tsx\nimport { Colors } from \"@blueprintjs/core\";\n\n<div style={{ color: Colors.BLUE3, background: Colors.BLACK }} />\n```\n\n@## Color schemes\n\nUse the following color scheme generators to produce color schemes for your data visualizations.\nFirst, choose the kind of scheme based on the type of your data, then customize the number of values\nusing the forms below. Finally, copy the colors array into your application and make it live!\n\nThe following schemes have been carefully crafted to be visually striking and easily understandable\nwhile remaining accessible to visually impaired and color blind users.\n\n@### Sequential color schemes\n\nSequential color schemes imply order and are best suited for representing data that\nranges from low-to-high values either on an ordinal or on a numerical scale.\n\n@reactDocs SequentialSchemePalette\n\n@### Diverging color schemes\n\nDiverging color schemes put equal emphasis on mid-range values and extremes\nat both ends of the data range.\n\n@reactDocs DivergingSchemePalette\n\n@### Qualitative color schemes\n\nQualitative color schemes use a series of unrelated colors to create a\nscheme that does not imply order, merely difference in kind.\n\n@reactDocs QualitativeSchemePalette",
      "metadata": {}
    },
    "core": {
      "reference": "core",
      "route": "core",
      "sourcePath": "packages/core/src/docs/index.md",
      "title": "Core",
      "contents": [
        {
          "tag": "heading",
          "value": "Core",
          "level": 1,
          "route": "core"
        },
        "<p>The <strong>@blueprintjs/core</strong> NPM package is the basis of any Blueprint app. It includes many (30+)\nReact components covering all the basic bases, from buttons to form controls to tooltips and trees.\nIt also includes CSS styles for every component and the tools to style your own components and apps\nwith Sass and Less variables an elegant color palette.</p>\n<p>The core package depends on <strong>@blueprintjs/icons</strong> which provides 300+ UI icons in two sizes: small (&lt;= 16px) and large.\nBe sure to include the icons CSS file in your app alongside the core CSS file.</p>\n",
        {
          "tag": "page",
          "value": "accessibility"
        },
        {
          "tag": "page",
          "value": "classes"
        },
        {
          "tag": "page",
          "value": "colors"
        },
        {
          "tag": "page",
          "value": "typography"
        },
        {
          "tag": "page",
          "value": "variables"
        },
        {
          "tag": "page",
          "value": "components"
        }
      ],
      "contentsRaw": "\n@# Core\n\nThe __@blueprintjs/core__ NPM package is the basis of any Blueprint app. It includes many (30+)\nReact components covering all the basic bases, from buttons to form controls to tooltips and trees.\nIt also includes CSS styles for every component and the tools to style your own components and apps\nwith Sass and Less variables an elegant color palette.\n\nThe core package depends on __@blueprintjs/icons__ which provides 300+ UI icons in two sizes: small (<= 16px) and large.\nBe sure to include the icons CSS file in your app alongside the core CSS file.\n\n@page accessibility\n@page classes\n@page colors\n@page typography\n@page variables\n@page components",
      "metadata": {
        "reference": "core"
      }
    },
    "typography": {
      "reference": "typography",
      "route": "core/typography",
      "sourcePath": "packages/core/src/docs/typography.md",
      "title": "Typography",
      "contents": [
        {
          "tag": "heading",
          "value": "Typography",
          "level": 1,
          "route": "core/typography"
        },
        {
          "tag": "heading",
          "value": "Usage",
          "level": 2,
          "route": "core/typography.usage"
        },
        "<p>Keep in mind these general web typography guidelines when building your applications.</p>\n<ul>\n<li>The default text color in all components is compliant with the recommended\n<a href=\"https://www.w3.org/TR/WCAG20/\">WCAG 2.0</a> minimum contrast ratio.</li>\n<li>If you choose to go with a custom text color, make sure the background behind it provides\nproper contrast.</li>\n<li>Try not to explicitly write pixel values for your font-size or line-height CSS rules.\nInstead, reference the classes and variables we provide in Blueprint (<code>.bp3-ui-text</code>,\n<code>$bp3-font-size-large</code>, etc.).</li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "UI text",
          "level": 2,
          "route": "core/typography.ui-text"
        },
        "<p>Blueprint does not include any fonts of its own; it will use the default sans-serif operating system font.\nA handful of utility CSS classes can be combined freely to further customize a block of text.</p>\n<p>The base font size for Blueprint web applications is 14px. This should be the default type size\nfor most short strings of text which are not headings or titles. If you wish to reset some\nelement&#39;s font size and line height to the default base styles, use the <code>.bp3-ui-text</code> class.</p>\n<p>For longer blocks of running text, such as articles or documents, see <a href=\"#core/typography.running-text\">running text styles</a>.</p>\n",
        {
          "tag": "css",
          "value": "ui-text"
        },
        {
          "tag": "heading",
          "value": "Running text",
          "level": 2,
          "route": "core/typography.running-text"
        },
        "<p>Longform text, such as rendered Markdown documents, benefit from increased spacing and support for unclassed textual elements.\nApply <code>.bp3-running-text</code> to the parent element to apply the following styles to all children:</p>\n<ul>\n<li><code>&lt;h*&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;blockquote&gt;</code>, <code>&lt;code&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;kbd&gt;</code> tags do not require additional CSS classes for styles. This is great for rendered Markdown documents.</li>\n<li><code>&lt;h*&gt;</code> tag margins are adjusted to provide clear separation between sections in a document.</li>\n<li><code>&lt;ul&gt;</code> and <code>&lt;ol&gt;</code> tags receive <a href=\"#core/typography.lists\"><code>.bp3-list</code></a> styles for legibility.</li>\n</ul>\n",
        {
          "tag": "css",
          "value": "running-text"
        },
        {
          "tag": "heading",
          "value": "Headings",
          "level": 2,
          "route": "core/typography.headings"
        },
        "<p>Apply the <code>.bp3-heading</code> class to one of the six <code>&lt;h*&gt;</code> tags (or nest them inside a <code>.bp3-running-text</code> container)\nto adjust font size and line height.</p>\n",
        {
          "tag": "css",
          "value": "headings"
        },
        {
          "tag": "heading",
          "value": "Links",
          "level": 2,
          "route": "core/typography.links"
        },
        "<p>Simply use an <code>&lt;a href=&quot;&quot;&gt;</code> tag as you normally would. No class is necessary for Blueprint styles.\nLinks are underlined only when hovered.</p>\n<p>Putting an icon inside a link will cause it to inherit the link&#39;s text color.</p>\n",
        {
          "tag": "heading",
          "value": "Preformatted text",
          "level": 2,
          "route": "core/typography.preformatted-text"
        },
        "<p>Use <code>.bp3-code</code> for inline code elements (typically with the <code>&lt;code&gt;</code> tag).\nUse <code>.bp3-code-block</code> for mulitline blocks of code (typically on a <code>&lt;pre&gt;</code> tag).\nNote that <code>&lt;pre&gt;</code> blocks will retain <em>all</em> whitespace so you&#39;ll have to format the content accordingly.</p>\n<p>When nested inside a <code>.bp3-running-text</code> container, use the <code>&lt;pre&gt;</code> or <code>&lt;code&gt;</code> tags directly without CSS classes.</p>\n",
        {
          "tag": "css",
          "value": "preformatted"
        },
        {
          "tag": "heading",
          "value": "Block quotes",
          "level": 2,
          "route": "core/typography.block-quotes"
        },
        "<p>Block quotes receive a left border and padding to distinguish them from body text.</p>\n<p>Use the <code>.bp3-blockquote</code> class or nest a <code>&lt;blockquote&gt;</code> element inside a <code>.bp3-running-text</code> container.</p>\n",
        {
          "tag": "css",
          "value": "blockquote"
        },
        {
          "tag": "heading",
          "value": "Lists",
          "level": 2,
          "route": "core/typography.lists"
        },
        "<p>Blueprint provides a small amount of global styling and a few modifier classes for list elements.</p>\n<p><code>&lt;ul&gt;</code> and <code>&lt;ol&gt;</code> elements in blocks with the <code>.bp3-running-text</code> modifier class will\nautomatically assume the <code>.bp3-list</code> styles to promote readability.</p>\n<p>Use <code>.bp3-list-unstyled</code> to remove list item decorations and margins and padding.</p>\n<p>Note that these classes must be applied to each nested <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code> element in a tree.</p>\n",
        {
          "tag": "css",
          "value": "lists"
        },
        {
          "tag": "heading",
          "value": "Internationalization",
          "level": 2,
          "route": "core/typography.internationalization"
        },
        "<p>I18n in Blueprint is straightforward. React components expose props for customizing any strings;\nuse the library of your choice for managing internationalized strings.</p>\n",
        {
          "tag": "heading",
          "value": "Right-to-left text",
          "level": 3,
          "route": "core/typography.right-to-left-text"
        },
        "<p>Use the utility class <code>.bp3-rtl</code>.</p>\n",
        {
          "tag": "css",
          "value": "rtl"
        },
        {
          "tag": "heading",
          "value": "Dark theme",
          "level": 2,
          "route": "core/typography.dark-theme"
        },
        "<p>Blueprint provides two UI color themes: light and dark. The light theme is active by default. The\ndark theme can be applied by adding the class <code>bp3-dark</code> to a container element to theme all nested\nelements.</p>\n<p>Once applied, the dark theme will cascade to nested <code>.bp3-*</code> elements inside a <code>.bp3-dark</code> container.\nThere is no way to nest light-themed elements inside a dark container.</p>\n<p>Most elements only support the dark theme when nested inside a <code>.bp3-dark</code> container because it does\nnot make sense to mark individual elements as dark. The dark container is therefore responsible for\nsetting a dark background color.</p>\n<p>The following elements and components support the <code>.bp3-dark</code> class directly (i.e, <code>.bp3-card.bp3-dark</code>)\nand can be used as a container for nested dark children:</p>\n<ul>\n<li><code>Card</code></li>\n<li>Overlays: <code>Dialog</code>, <code>Popover</code>, <code>Tooltip</code>, <code>Toast</code></li>\n<li><code>Popover</code> and <code>Tooltip</code> will automatically detect when their trigger is inside a <code>.bp3-dark</code>\ncontainer and add the same class to themselves.</li>\n</ul>\n<p>Rather than illustrating dark components inline, this documentation site provides a site-wide switch\nin the sidebar to enable the dark theme. Try it out as you read the docs.</p>\n"
      ],
      "contentsRaw": "@# Typography\n\n@## Usage\n\nKeep in mind these general web typography guidelines when building your applications.\n\n- The default text color in all components is compliant with the recommended\n[WCAG 2.0](https://www.w3.org/TR/WCAG20/) minimum contrast ratio.\n- If you choose to go with a custom text color, make sure the background behind it provides\nproper contrast.\n- Try not to explicitly write pixel values for your font-size or line-height CSS rules.\nInstead, reference the classes and variables we provide in Blueprint (`.bp3-ui-text`,\n`$bp3-font-size-large`, etc.).\n\n@## UI text\n\nBlueprint does not include any fonts of its own; it will use the default sans-serif operating system font.\nA handful of utility CSS classes can be combined freely to further customize a block of text.\n\nThe base font size for Blueprint web applications is 14px. This should be the default type size\nfor most short strings of text which are not headings or titles. If you wish to reset some\nelement's font size and line height to the default base styles, use the `.bp3-ui-text` class.\n\nFor longer blocks of running text, such as articles or documents, see [running text styles](#core/typography.running-text).\n\n@css ui-text\n\n@## Running text\n\nLongform text, such as rendered Markdown documents, benefit from increased spacing and support for unclassed textual elements.\nApply `.bp3-running-text` to the parent element to apply the following styles to all children:\n\n- `<h*>`, `<ul>`, `<ol>`, `<blockquote>`, `<code>`, `<pre>`, `<kbd>` tags do not require additional CSS classes for styles. This is great for rendered Markdown documents.\n- `<h*>` tag margins are adjusted to provide clear separation between sections in a document.\n- `<ul>` and `<ol>` tags receive [`.bp3-list`](#core/typography.lists) styles for legibility.\n\n@css running-text\n\n@## Headings\n\nApply the `.bp3-heading` class to one of the six `<h*>` tags (or nest them inside a `.bp3-running-text` container)\nto adjust font size and line height.\n\n@css headings\n\n@## Links\n\nSimply use an `<a href=\"\">` tag as you normally would. No class is necessary for Blueprint styles.\nLinks are underlined only when hovered.\n\nPutting an icon inside a link will cause it to inherit the link's text color.\n\n@## Preformatted text\n\nUse `.bp3-code` for inline code elements (typically with the `<code>` tag).\nUse `.bp3-code-block` for mulitline blocks of code (typically on a `<pre>` tag).\nNote that `<pre>` blocks will retain _all_ whitespace so you'll have to format the content accordingly.\n\nWhen nested inside a `.bp3-running-text` container, use the `<pre>` or `<code>` tags directly without CSS classes.\n\n@css preformatted\n\n@## Block quotes\n\nBlock quotes receive a left border and padding to distinguish them from body text.\n\nUse the `.bp3-blockquote` class or nest a `<blockquote>` element inside a `.bp3-running-text` container.\n\n@css blockquote\n\n@## Lists\n\nBlueprint provides a small amount of global styling and a few modifier classes for list elements.\n\n`<ul>` and `<ol>` elements in blocks with the `.bp3-running-text` modifier class will\nautomatically assume the `.bp3-list` styles to promote readability.\n\nUse `.bp3-list-unstyled` to remove list item decorations and margins and padding.\n\nNote that these classes must be applied to each nested `<ul>` or `<ol>` element in a tree.\n\n@css lists\n\n@## Internationalization\n\nI18n in Blueprint is straightforward. React components expose props for customizing any strings;\nuse the library of your choice for managing internationalized strings.\n\n@### Right-to-left text\n\nUse the utility class `.bp3-rtl`.\n\n@css rtl\n\n@## Dark theme\n\nBlueprint provides two UI color themes: light and dark. The light theme is active by default. The\ndark theme can be applied by adding the class `bp3-dark` to a container element to theme all nested\nelements.\n\nOnce applied, the dark theme will cascade to nested `.bp3-*` elements inside a `.bp3-dark` container.\nThere is no way to nest light-themed elements inside a dark container.\n\nMost elements only support the dark theme when nested inside a `.bp3-dark` container because it does\nnot make sense to mark individual elements as dark. The dark container is therefore responsible for\nsetting a dark background color.\n\nThe following elements and components support the `.bp3-dark` class directly (i.e, `.bp3-card.bp3-dark`)\nand can be used as a container for nested dark children:\n\n- `Card`\n- Overlays: `Dialog`, `Popover`, `Tooltip`, `Toast`\n- `Popover` and `Tooltip` will automatically detect when their trigger is inside a `.bp3-dark`\ncontainer and add the same class to themselves.\n\nRather than illustrating dark components inline, this documentation site provides a site-wide switch\nin the sidebar to enable the dark theme. Try it out as you read the docs.",
      "metadata": {}
    },
    "variables": {
      "reference": "variables",
      "route": "core/variables",
      "sourcePath": "packages/core/src/docs/variables.md",
      "title": "Variables",
      "contents": [
        {
          "tag": "heading",
          "value": "Variables",
          "level": 1,
          "route": "core/variables"
        },
        "<p>Available for use with Sass and Less.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;Sass</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>path/to/@blueprintjs/core/lib/scss/variables</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css less\"><span class=\"comment line double-slash less\"><span class=\"punctuation definition comment less\"><span>//</span></span><span>&nbsp;Less</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css less\"><span class=\"meta at-rule import css\"><span class=\"keyword control at-rule import less\"><span class=\"punctuation definition keyword less\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double css\"><span class=\"punctuation definition string begin css\"><span>&quot;</span></span><span>path/to/@blueprintjs/core/lib/less/variables</span><span class=\"punctuation definition string end css\"><span>&quot;</span></span></span><span class=\"punctuation terminator rule css\"><span>;</span></span></span></span></div></pre><p>The Sass <code>$</code> convention is used in this documentation for consistency with the original source code.\nEvery variable mentioned below is also available in <code>variables.less</code> with an <code>@</code> prefix instead of <code>$</code>.</p>\n",
        {
          "tag": "heading",
          "value": "Font variables",
          "level": 2,
          "route": "core/variables.font-variables"
        },
        "<p>Typically, correct typography styles should be achieved by using the proper HTML tag (<code>&lt;p&gt;</code> for\ntext, <code>&lt;h*&gt;</code> for headings, <code>&lt;code&gt;</code> for code, etc.). The following variables are provided for the\nrare cases where custom styling is necessary and should be used sparingly:</p>\n<ul>\n<li><code>$pt-font-family</code></li>\n<li><code>$pt-font-family-monospace</code></li>\n<li><code>$pt-font-size</code></li>\n<li><code>$pt-font-size-small</code></li>\n<li><code>$pt-font-size-large</code></li>\n<li><code>$pt-line-height</code></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Icon variables",
          "level": 2,
          "route": "core/variables.icon-variables"
        },
        "<p>Most icons should be displayed using the <code>span.bp3-icon-*</code> classes or via modifier classes on\ncomponents like <code>.bp3-button</code>. In rare cases, you may need direct access to the content\nstring that generates each icon in the icon font. Blueprint provides these variables with\nstraightforward names (see the <a href=\"#icons\">Icons section</a> for the full list of identifiers):</p>\n<ul>\n<li><code>$pt-icon-style</code></li>\n<li><code>$pt-icon-align-left</code></li>\n<li><code>$pt-icon-align-center</code></li>\n<li>...</li>\n</ul>\n<p>Variables are also provided for the two icon font families and their pixel sizes:</p>\n<ul>\n<li><code>$icons16-family</code></li>\n<li><code>$icons20-family</code></li>\n<li><code>$pt-icon-size-standard</code></li>\n<li><code>$pt-icon-size-large</code></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Grids & dimensions",
          "level": 2,
          "route": "core/variables.grids---dimensions"
        },
        "<p>Sizes of common components. Most sizing variables are based on <code>$pt-grid-size</code>, which has\na value of <code>10px</code>. Custom components should adhere to the relevant <code>height</code> variable.</p>\n<ul>\n<li><code>$pt-grid-size</code></li>\n<li><code>$pt-border-radius</code></li>\n<li><code>$pt-button-height</code></li>\n<li><code>$pt-button-height-large</code></li>\n<li><code>$pt-input-height</code></li>\n<li><code>$pt-input-height-large</code></li>\n<li><code>$pt-navbar-height</code></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Grid system",
          "level": 3,
          "route": "core/variables.grid-system"
        },
        "<p>Blueprint doesn&#39;t provide a grid system. In general, you should try to use the <code>$pt-grid-size</code>\nvariable to generate layout &amp; sizing style rules in your CSS codebase.</p>\n<p>In lieu of a full grid system, you should try to use the <strong>CSS flexible box layout model</strong> (a.k.a.\n&quot;flexbox&quot;). It&#39;s quite powerful on its own and allows you to build robust, responsive layouts\nwithout writing much CSS. Here are some resources for learning flexbox:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">MDN guide</a></li>\n<li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS Tricks guide</a></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Layering",
          "level": 2,
          "route": "core/variables.layering"
        },
        "<p>Blueprint provides variables for three z-index layers. This should be enough for most use cases,\nespecially if you make correct use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\">stacking context</a>. <a href=\"#core/components/overlay\">Overlay</a>\ncomponents such as dialogs and popovers use these z-index values to configure their stacking\ncontexts.</p>\n<ul>\n<li><code>$pt-z-index-base</code></li>\n<li><code>$pt-z-index-content</code></li>\n<li><code>$pt-z-index-overlay</code></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Light theme styles",
          "level": 2,
          "route": "core/variables.light-theme-styles"
        },
        "<p>Use these when you need to build custom UI components that look similar to Blueprint&#39;s\nlight theme components.</p>\n<ul>\n<li><code>$pt-dialog-box-shadow</code></li>\n<li><code>$pt-input-box-shadow</code></li>\n<li><code>$pt-popover-box-shadow</code></li>\n<li><code>$pt-tooltip-box-shadow</code></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Dark theme styles",
          "level": 2,
          "route": "core/variables.dark-theme-styles"
        },
        "<p>Use these when you need to build custom UI components that look similar to Blueprint&#39;s\ndark theme components.</p>\n<ul>\n<li><code>$pt-dark-dialog-box-shadow</code></li>\n<li><code>$pt-dark-input-box-shadow</code></li>\n<li><code>$pt-dark-popover-box-shadow</code></li>\n<li><code>$pt-dark-tooltip-box-shadow</code></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Elevation drop shadows",
          "level": 2,
          "route": "core/variables.elevation-drop-shadows"
        },
        "<p>Use these when you need to apply a drop shadow to custom UI components to simulate height.\nThese elevations correspond to those of the <a href=\"#core/components/card.elevation\">Card</a> component.</p>\n<ul>\n<li><code>$pt-elevation-shadow-0</code></li>\n<li><code>$pt-elevation-shadow-1</code></li>\n<li><code>$pt-elevation-shadow-2</code></li>\n<li><code>$pt-elevation-shadow-3</code></li>\n<li><code>$pt-elevation-shadow-4</code></li>\n</ul>\n<p>Use these for drop shadows in dark theme.</p>\n<ul>\n<li><code>$pt-dark-elevation-shadow-0</code></li>\n<li><code>$pt-dark-elevation-shadow-1</code></li>\n<li><code>$pt-dark-elevation-shadow-2</code></li>\n<li><code>$pt-dark-elevation-shadow-3</code></li>\n<li><code>$pt-dark-elevation-shadow-4</code></li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Color aliases",
          "level": 2,
          "route": "core/variables.color-aliases"
        },
        "<p>These variables are semantic aliases of our <a href=\"#core/colors\">colors</a>.\nThey are used throughout Blueprint itself to ensure consistent color usage across components\nand are available in the Sass or Less variables files.</p>\n<table class=\"bp3-html-table docs-color-aliases-table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>Variable</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-primary\"></div>\n            </td>\n            <td><code>$pt-intent-primary</code></td>\n            <td>Primary intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-success\"></div>\n            </td>\n            <td><code>$pt-intent-success</code></td>\n            <td>Success intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-warning\"></div>\n            </td>\n            <td><code>$pt-intent-warning</code></td>\n            <td>Warning intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-danger\"></div>\n            </td>\n            <td><code>$pt-intent-danger</code></td>\n            <td>Danger intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-app-background-color\"></div>\n            </td>\n            <td><code>$pt-app-background-color</code></td>\n            <td>Application background color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-app-background-color\"></div>\n            </td>\n            <td><code>$pt-dark-app-background-color</code></td>\n            <td>Dark theme application background color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-color\"></div>\n            </td>\n            <td><code>$pt-text-color</code></td>\n            <td>Default text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-color-muted\"></div>\n            </td>\n            <td><code>$pt-text-color-muted</code></td>\n            <td>Muted text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-color-disabled\"></div>\n            </td>\n            <td><code>$pt-text-color-disabled</code></td>\n            <td>Disabled text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-heading-color\"></div>\n            </td>\n            <td><code>$pt-heading-color</code></td>\n            <td>Text color for headers</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-link-color\"></div>\n            </td>\n            <td><code>$pt-link-color</code></td>\n            <td>Text color for links</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-text-color\"></div>\n            </td>\n            <td><code>$pt-dark-text-color</code></td>\n            <td>Dark theme default text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-text-color-muted\"></div>\n            </td>\n            <td><code>$pt-dark-text-color-muted</code></td>\n            <td>Dark theme muted text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-text-color-disabled\"></div>\n            </td>\n            <td><code>$pt-dark-text-color-disabled</code></td>\n            <td>Dark theme disabled text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-heading-color\"></div>\n            </td>\n            <td><code>$pt-dark-heading-color</code></td>\n            <td>Dark theme text color for headers</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-link-color\"></div>\n            </td>\n            <td><code>$pt-dark-link-color</code></td>\n            <td>Dark theme text color for links</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-selection-color\"></div>\n            </td>\n            <td><code>$pt-text-selection-color</code></td>\n            <td>Text selection color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color\"></div>\n            </td>\n            <td><code>$pt-icon-color</code></td>\n            <td>Default icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color-hover\"></div>\n            </td>\n            <td><code>$pt-icon-color-hover</code></td>\n            <td>Hovered icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color-disabled\"></div>\n            </td>\n            <td><code>$pt-icon-color-disabled</code></td>\n            <td>Disabled icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color-selected\"></div>\n            </td>\n            <td><code>$pt-icon-color-selected</code></td>\n            <td>Selected icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color</code></td>\n            <td>Dark theme default icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-hover\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-hover</code></td>\n            <td>Dark theme hovered icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-disabled\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-disabled</code></td>\n            <td>Dark theme disabled icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-selected\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-selected</code></td>\n            <td>Dark theme selected icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-divider-black\"></div>\n            </td>\n            <td><code>$pt-divider-black</code></td>\n            <td>Black divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-divider-black\"></div>\n            </td>\n            <td><code>$pt-dark-divider-black</code></td>\n            <td>Dark theme black divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-divider-white\"></div>\n            </td>\n            <td><code>$pt-dark-divider-white</code></td>\n            <td>Dark theme white divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-code-text-color\"></div>\n            </td>\n            <td><code>$pt-code-text-color</code></td>\n            <td>Code text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-code-background-color\"></div>\n            </td>\n            <td><code>$pt-code-background-color</code></td>\n            <td>Code background color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-code-text-color\"></div>\n            </td>\n            <td><code>$pt-dark-code-text-color</code></td>\n            <td>Dark theme code text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-code-background-color\"></div>\n            </td>\n            <td><code>$pt-dark-code-background-color</code></td>\n            <td>Dark theme code background color</td>\n        </tr>\n    </tbody>\n</table>"
      ],
      "contentsRaw": "@# Variables\n\nAvailable for use with Sass and Less.\n\n```css.scss\n// Sass\n@import \"path/to/@blueprintjs/core/lib/scss/variables\";\n```\n\n```css.less\n// Less\n@import \"path/to/@blueprintjs/core/lib/less/variables\";\n```\n\nThe Sass `$` convention is used in this documentation for consistency with the original source code.\nEvery variable mentioned below is also available in `variables.less` with an `@` prefix instead of `$`.\n\n@## Font variables\n\nTypically, correct typography styles should be achieved by using the proper HTML tag (`<p>` for\ntext, `<h*>` for headings, `<code>` for code, etc.). The following variables are provided for the\nrare cases where custom styling is necessary and should be used sparingly:\n\n- `$pt-font-family`\n- `$pt-font-family-monospace`\n- `$pt-font-size`\n- `$pt-font-size-small`\n- `$pt-font-size-large`\n- `$pt-line-height`\n\n@## Icon variables\n\nMost icons should be displayed using the `span.bp3-icon-*` classes or via modifier classes on\ncomponents like `.bp3-button`. In rare cases, you may need direct access to the content\nstring that generates each icon in the icon font. Blueprint provides these variables with\nstraightforward names (see the [Icons section](#icons) for the full list of identifiers):\n\n- `$pt-icon-style`\n- `$pt-icon-align-left`\n- `$pt-icon-align-center`\n- ...\n\nVariables are also provided for the two icon font families and their pixel sizes:\n\n- `$icons16-family`\n- `$icons20-family`\n- `$pt-icon-size-standard`\n- `$pt-icon-size-large`\n\n@## Grids & dimensions\n\nSizes of common components. Most sizing variables are based on `$pt-grid-size`, which has\na value of `10px`. Custom components should adhere to the relevant `height` variable.\n\n- `$pt-grid-size`\n- `$pt-border-radius`\n- `$pt-button-height`\n- `$pt-button-height-large`\n- `$pt-input-height`\n- `$pt-input-height-large`\n- `$pt-navbar-height`\n\n@### Grid system\n\nBlueprint doesn't provide a grid system. In general, you should try to use the `$pt-grid-size`\nvariable to generate layout & sizing style rules in your CSS codebase.\n\nIn lieu of a full grid system, you should try to use the __CSS flexible box layout model__ (a.k.a.\n\"flexbox\"). It's quite powerful on its own and allows you to build robust, responsive layouts\nwithout writing much CSS. Here are some resources for learning flexbox:\n- [MDN guide](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes)\n- [CSS Tricks guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n\n@## Layering\n\nBlueprint provides variables for three z-index layers. This should be enough for most use cases,\nespecially if you make correct use of [stacking context][MDN]. [Overlay](#core/components/overlay)\ncomponents such as dialogs and popovers use these z-index values to configure their stacking\ncontexts.\n\n- `$pt-z-index-base`\n- `$pt-z-index-content`\n- `$pt-z-index-overlay`\n\n[MDN]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n\n@## Light theme styles\n\nUse these when you need to build custom UI components that look similar to Blueprint's\nlight theme components.\n\n- `$pt-dialog-box-shadow`\n- `$pt-input-box-shadow`\n- `$pt-popover-box-shadow`\n- `$pt-tooltip-box-shadow`\n\n@## Dark theme styles\n\nUse these when you need to build custom UI components that look similar to Blueprint's\ndark theme components.\n\n- `$pt-dark-dialog-box-shadow`\n- `$pt-dark-input-box-shadow`\n- `$pt-dark-popover-box-shadow`\n- `$pt-dark-tooltip-box-shadow`\n\n@## Elevation drop shadows\n\nUse these when you need to apply a drop shadow to custom UI components to simulate height.\nThese elevations correspond to those of the [Card](#core/components/card.elevation) component.\n\n- `$pt-elevation-shadow-0`\n- `$pt-elevation-shadow-1`\n- `$pt-elevation-shadow-2`\n- `$pt-elevation-shadow-3`\n- `$pt-elevation-shadow-4`\n\nUse these for drop shadows in dark theme.\n\n- `$pt-dark-elevation-shadow-0`\n- `$pt-dark-elevation-shadow-1`\n- `$pt-dark-elevation-shadow-2`\n- `$pt-dark-elevation-shadow-3`\n- `$pt-dark-elevation-shadow-4`\n\n@## Color aliases\n\nThese variables are semantic aliases of our [colors](#core/colors).\nThey are used throughout Blueprint itself to ensure consistent color usage across components\nand are available in the Sass or Less variables files.\n\n<table class=\"bp3-html-table docs-color-aliases-table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>Variable</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-primary\"></div>\n            </td>\n            <td><code>$pt-intent-primary</code></td>\n            <td>Primary intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-success\"></div>\n            </td>\n            <td><code>$pt-intent-success</code></td>\n            <td>Success intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-warning\"></div>\n            </td>\n            <td><code>$pt-intent-warning</code></td>\n            <td>Warning intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-intent-danger\"></div>\n            </td>\n            <td><code>$pt-intent-danger</code></td>\n            <td>Danger intent color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-app-background-color\"></div>\n            </td>\n            <td><code>$pt-app-background-color</code></td>\n            <td>Application background color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-app-background-color\"></div>\n            </td>\n            <td><code>$pt-dark-app-background-color</code></td>\n            <td>Dark theme application background color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-color\"></div>\n            </td>\n            <td><code>$pt-text-color</code></td>\n            <td>Default text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-color-muted\"></div>\n            </td>\n            <td><code>$pt-text-color-muted</code></td>\n            <td>Muted text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-color-disabled\"></div>\n            </td>\n            <td><code>$pt-text-color-disabled</code></td>\n            <td>Disabled text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-heading-color\"></div>\n            </td>\n            <td><code>$pt-heading-color</code></td>\n            <td>Text color for headers</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-link-color\"></div>\n            </td>\n            <td><code>$pt-link-color</code></td>\n            <td>Text color for links</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-text-color\"></div>\n            </td>\n            <td><code>$pt-dark-text-color</code></td>\n            <td>Dark theme default text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-text-color-muted\"></div>\n            </td>\n            <td><code>$pt-dark-text-color-muted</code></td>\n            <td>Dark theme muted text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-text-color-disabled\"></div>\n            </td>\n            <td><code>$pt-dark-text-color-disabled</code></td>\n            <td>Dark theme disabled text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-heading-color\"></div>\n            </td>\n            <td><code>$pt-dark-heading-color</code></td>\n            <td>Dark theme text color for headers</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-link-color\"></div>\n            </td>\n            <td><code>$pt-dark-link-color</code></td>\n            <td>Dark theme text color for links</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-text-selection-color\"></div>\n            </td>\n            <td><code>$pt-text-selection-color</code></td>\n            <td>Text selection color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color\"></div>\n            </td>\n            <td><code>$pt-icon-color</code></td>\n            <td>Default icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color-hover\"></div>\n            </td>\n            <td><code>$pt-icon-color-hover</code></td>\n            <td>Hovered icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color-disabled\"></div>\n            </td>\n            <td><code>$pt-icon-color-disabled</code></td>\n            <td>Disabled icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color-selected\"></div>\n            </td>\n            <td><code>$pt-icon-color-selected</code></td>\n            <td>Selected icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color</code></td>\n            <td>Dark theme default icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-hover\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-hover</code></td>\n            <td>Dark theme hovered icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-disabled\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-disabled</code></td>\n            <td>Dark theme disabled icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-selected\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-selected</code></td>\n            <td>Dark theme selected icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-divider-black\"></div>\n            </td>\n            <td><code>$pt-divider-black</code></td>\n            <td>Black divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-divider-black\"></div>\n            </td>\n            <td><code>$pt-dark-divider-black</code></td>\n            <td>Dark theme black divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-divider-white\"></div>\n            </td>\n            <td><code>$pt-dark-divider-white</code></td>\n            <td>Dark theme white divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-code-text-color\"></div>\n            </td>\n            <td><code>$pt-code-text-color</code></td>\n            <td>Code text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-code-background-color\"></div>\n            </td>\n            <td><code>$pt-code-background-color</code></td>\n            <td>Code background color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-code-text-color\"></div>\n            </td>\n            <td><code>$pt-dark-code-text-color</code></td>\n            <td>Dark theme code text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-code-background-color\"></div>\n            </td>\n            <td><code>$pt-dark-code-background-color</code></td>\n            <td>Dark theme code background color</td>\n        </tr>\n    </tbody>\n</table>",
      "metadata": {}
    },
    "dateinput": {
      "reference": "dateinput",
      "route": "datetime/dateinput",
      "sourcePath": "packages/datetime/src/dateinput.md",
      "title": "Date input",
      "contents": [
        {
          "tag": "heading",
          "value": "Date input",
          "level": 1,
          "route": "datetime/dateinput"
        },
        "<p>The <code>DateInput</code> component is an <a href=\"#core/components/text-inputs.input-group\">input group</a>\nthat shows a <a href=\"#datetime/datepicker\"><code>DatePicker</code></a> in a <a href=\"#core/components/popover\"><code>Popover</code></a>\non focus. Use it in forms where the user must enter a date.</p>\n",
        {
          "tag": "reactExample",
          "value": "DateInputExample"
        },
        {
          "tag": "heading",
          "value": "Date formatting",
          "level": 2,
          "route": "datetime/dateinput.date-formatting"
        },
        "<p><code>DateInput</code> and its more complex cousin <code>DateRangeInput</code> require two props for formatting and parsing dates:</p>\n<ul>\n<li><code>formatDate(date, locale?)</code> receives the current <code>Date</code> and returns a string representation of it. The result of this function becomes the input value when it is not being edited.</li>\n<li><code>parseDate(str, locale?)</code> receives text inputted by the user and converts it to a <code>Date</code> object. The returned <code>Date</code> becomes the next value of the component.</li>\n</ul>\n<p>The optional <code>locale</code> argument is the value of the <code>locale</code> prop.</p>\n<p>A simple implementation using built-in browser methods could look like this:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>DateInput</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>IDateFormatProps</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/datetime</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>jsDateFormatter</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>IDateFormatProps</span></span><span>&nbsp;</span></span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;note&nbsp;that&nbsp;the&nbsp;native&nbsp;implementation&nbsp;of&nbsp;Date&nbsp;functions&nbsp;differs&nbsp;between&nbsp;browsers</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span class=\"entity name function tsx\"><span>formatDate</span></span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>date</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>date</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>toLocaleDateString</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span class=\"entity name function tsx\"><span>parseDate</span></span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>str</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"new expr tsx\"><span class=\"keyword operator new tsx\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Date</span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>str</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>placeholder</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>M/D/YYYY</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>DateInput</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"variable other readwrite tsx\"><span>jsDateFormatter</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>An implementation using <code>moment.js</code> could look like this:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>DateInput</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>IDateFormatProps</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/datetime</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>moment</span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>moment</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"storage type function tsx\"><span>function</span></span><span>&nbsp;</span><span class=\"meta definition function tsx entity name function tsx\"><span>getMomentFormatter</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>format</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>string</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span class=\"meta return type tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>IDateFormatProps</span></span><span>&nbsp;</span></span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;note&nbsp;that&nbsp;locale&nbsp;argument&nbsp;comes&nbsp;from&nbsp;locale&nbsp;prop&nbsp;and&nbsp;may&nbsp;be&nbsp;undefined</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span class=\"meta objectliteral tsx\"><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span class=\"entity name function tsx\"><span>formatDate</span></span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>date</span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>locale</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>moment</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>date</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>locale</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>locale</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>format</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>format</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span class=\"entity name function tsx\"><span>parseDate</span></span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>str</span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>locale</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>moment</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>str</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>format</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>locale</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>locale</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>toDate</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>placeholder</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>format</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>DateInput</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>getMomentFormatter</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>LL</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>locale</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>de</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "datetime/dateinput.props"
        },
        "<p>Use the <code>onChange</code> function to listen for changes to the selected date. Use\n<code>onError</code> to listen for invalid entered dates.</p>\n<p>You can control the selected date by setting the <code>value</code> prop, or use the\ncomponent in uncontrolled mode and specify an initial date by setting\n<code>defaultValue</code>.</p>\n<p>Customize the date format with the required <code>formatDate</code> and <code>parseDate</code>\ncallbacks.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>DateInput</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/datetime</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>DateInput</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>formatDate</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>date</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>date</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>toLocaleString</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleDateChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>parseDate</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>str</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"new expr tsx\"><span class=\"keyword operator new tsx\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Date</span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>str</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>placeholder</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>M/D/YYYY</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>date</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IDateInputProps"
        }
      ],
      "contentsRaw": "@# Date input\n\nThe `DateInput` component is an [input group](#core/components/text-inputs.input-group)\nthat shows a [`DatePicker`](#datetime/datepicker) in a [`Popover`](#core/components/popover)\non focus. Use it in forms where the user must enter a date.\n\n@reactExample DateInputExample\n\n@## Date formatting\n\n`DateInput` and its more complex cousin `DateRangeInput` require two props for formatting and parsing dates:\n\n- `formatDate(date, locale?)` receives the current `Date` and returns a string representation of it. The result of this function becomes the input value when it is not being edited.\n- `parseDate(str, locale?)` receives text inputted by the user and converts it to a `Date` object. The returned `Date` becomes the next value of the component.\n\nThe optional `locale` argument is the value of the `locale` prop.\n\nA simple implementation using built-in browser methods could look like this:\n\n```tsx\nimport { DateInput, IDateFormatProps } from \"@blueprintjs/datetime\";\n\nconst jsDateFormatter: IDateFormatProps = {\n    // note that the native implementation of Date functions differs between browsers\n    formatDate: date => date.toLocaleDateString(),\n    parseDate: str => new Date(str),\n    placeholder: \"M/D/YYYY\",\n};\n\n<DateInput {...jsDateFormatter} />\n```\n\nAn implementation using `moment.js` could look like this:\n\n```tsx\nimport { DateInput, IDateFormatProps } from \"@blueprintjs/datetime\";\nimport moment from \"moment\";\n\nfunction getMomentFormatter(format: string): IDateFormatProps {\n    // note that locale argument comes from locale prop and may be undefined\n    return {\n        formatDate: (date, locale) => moment(date).locale(locale).format(format),\n        parseDate: (str, locale) => moment(str, format).locale(locale).toDate(),\n        placeholder: format,\n    }\n};\n\n<DateInput {...getMomentFormatter(\"LL\")} locale=\"de\" />\n```\n\n@## Props\n\nUse the `onChange` function to listen for changes to the selected date. Use\n`onError` to listen for invalid entered dates.\n\nYou can control the selected date by setting the `value` prop, or use the\ncomponent in uncontrolled mode and specify an initial date by setting\n`defaultValue`.\n\nCustomize the date format with the required `formatDate` and `parseDate`\ncallbacks.\n\n```tsx\nimport { DateInput } from \"@blueprintjs/datetime\";\n\n<DateInput\n    formatDate={date => date.toLocaleString()}\n    onChange={this.handleDateChange}\n    parseDate={str => new Date(str)}\n    placeholder={\"M/D/YYYY\"}\n    value={this.state.date}\n/>\n```\n\n@interface IDateInputProps",
      "metadata": {}
    },
    "datepicker": {
      "reference": "datepicker",
      "route": "datetime/datepicker",
      "sourcePath": "packages/datetime/src/datepicker.md",
      "title": "Date picker",
      "contents": [
        {
          "tag": "heading",
          "value": "Date picker",
          "level": 1,
          "route": "datetime/datepicker"
        },
        "<p>A <code>DatePicker</code> shows a monthly calendar and allows the user to choose a single date.</p>\n<p><code>DatePicker</code> is built on top of the <a href=\"https://github.com/gpbl/react-day-picker\"><strong>react-day-picker</strong></a> library.</p>\n",
        {
          "tag": "reactExample",
          "value": "DatePickerExample"
        },
        {
          "tag": "heading",
          "value": "Modifiers",
          "level": 2,
          "route": "datetime/datepicker.modifiers"
        },
        "<p>You can use the <code>modifiers</code> prop to conditionally apply styles to days.\nModifiers are a react-day-picker concept and are documented in full in the\n<a href=\"http://react-day-picker.js.org/docs/matching-days\"><strong>react-day-picker</strong> documentation</a>.</p>\n<p>The example below creates a <code>DatePicker</code> that prevents the user from selecting any Sundays,\nby using the component in controlled mode and with the <code>modifiers</code> prop:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;in&nbsp;CSS</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span>.</span><span class=\"variable interpolation scss\"><span>#{</span><span class=\"variable scss\"><span class=\"variable scss\"><span>$ns</span></span></span><span>}-datepicker</span></span><span>&nbsp;</span><span class=\"entity other attribute-name class css\"><span class=\"punctuation definition entity css\"><span>.</span></span><span>DayPicker-Day--isSunday</span></span><span>&nbsp;</span><span class=\"meta property-list scss\"><span class=\"punctuation section property-list begin scss\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"comment line scss\"><span>&nbsp;&nbsp;//</span><span>&nbsp;CSS&nbsp;rules&nbsp;to&nbsp;make&nbsp;the&nbsp;day&nbsp;appear&nbsp;disabled</span><span>&nbsp;</span></span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta property-list scss\"><span class=\"punctuation section property-list end scss\"><span>}</span></span></span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;in&nbsp;TypeScript</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>DatePickerExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>selectedDate</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Date</span></span><span>&nbsp;</span></span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>state</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>selectedDate</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"new expr tsx\"><span class=\"keyword operator new tsx\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Date</span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;name&nbsp;of&nbsp;modifier&nbsp;function&nbsp;becomes&nbsp;the&nbsp;suffix&nbsp;for&nbsp;the&nbsp;CSS&nbsp;class&nbsp;above</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>modifiers</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"variable other readwrite tsx\"><span>isSunday</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>DatePicker</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>modifiers</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>modifiers</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>newDate</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>handleChange</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>newDate</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>selectedDate</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>handleChange</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>date</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Date</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control conditional tsx\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"keyword operator logical tsx\"><span>!</span></span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>isSunday</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>date</span></span><span class=\"meta brace round tsx\"><span>)</span><span>)</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>setState</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>selectedDate</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>date</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"storage type function tsx\"><span>function</span></span><span>&nbsp;</span><span class=\"meta definition function tsx entity name function tsx\"><span>isSunday</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>date</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Date</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>date</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>getDay</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span><span>&nbsp;</span><span class=\"keyword operator comparison tsx\"><span>===</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "datetime/datepicker.props"
        },
        "<p><code>DatePicker</code> supports both controlled and uncontrolled usage. You can control\nthe selected day by setting the <code>value</code> prop, or use the component in\nuncontrolled mode and specify an initial day by setting <code>defaultValue</code>. Use the\n<code>onChange</code> prop to listen for changes to the selected day.</p>\n<p>Some props are managed by the <code>DatePicker</code> component, while others are passed\nto the <strong>react-day-picker</strong> library. These passed props are documented in full\nin the <a href=\"http://www.gpbl.org/react-day-picker/index.html\"><strong>react-day-picker</strong> documentation</a>.</p>\n",
        {
          "tag": "interface",
          "value": "IDatePickerProps"
        }
      ],
      "contentsRaw": "@# Date picker\n\nA `DatePicker` shows a monthly calendar and allows the user to choose a single date.\n\n`DatePicker` is built on top of the [**react-day-picker**](https://github.com/gpbl/react-day-picker) library.\n\n@reactExample DatePickerExample\n\n@## Modifiers\n\nYou can use the `modifiers` prop to conditionally apply styles to days.\nModifiers are a react-day-picker concept and are documented in full in the\n[**react-day-picker** documentation](http://react-day-picker.js.org/docs/matching-days).\n\nThe example below creates a `DatePicker` that prevents the user from selecting any Sundays,\nby using the component in controlled mode and with the `modifiers` prop:\n\n```css.scss\n// in CSS\n.bp3-datepicker .DayPicker-Day--isSunday {\n  // CSS rules to make the day appear disabled\n}\n```\n\n```tsx\n// in TypeScript\nexport class DatePickerExample extends React.Component<{}, { selectedDate: Date }> {\n    public state = { selectedDate: new Date() };\n\n    public render() {\n        // name of modifier function becomes the suffix for the CSS class above\n        const modifiers = { isSunday };\n        return (\n            <DatePicker\n                modifiers={modifiers}\n                onChange={(newDate) => this.handleChange(newDate)}\n                value={this.state.selectedDate}\n            />\n        );\n    }\n\n    private handleChange(date: Date) {\n        if (!isSunday(date)) {\n            this.setState({ selectedDate: date });\n        }\n    }\n}\n\nfunction isSunday(date: Date) {\n    return date.getDay() === 0;\n}\n```\n\n@## Props\n\n`DatePicker` supports both controlled and uncontrolled usage. You can control\nthe selected day by setting the `value` prop, or use the component in\nuncontrolled mode and specify an initial day by setting `defaultValue`. Use the\n`onChange` prop to listen for changes to the selected day.\n\nSome props are managed by the `DatePicker` component, while others are passed\nto the **react-day-picker** library. These passed props are documented in full\nin the [**react-day-picker** documentation](http://www.gpbl.org/react-day-picker/index.html).\n\n@interface IDatePickerProps",
      "metadata": {}
    },
    "daterangeinput": {
      "reference": "daterangeinput",
      "route": "datetime/daterangeinput",
      "sourcePath": "packages/datetime/src/daterangeinput.md",
      "title": "Date range input",
      "contents": [
        {
          "tag": "heading",
          "value": "Date range input",
          "level": 1,
          "route": "datetime/daterangeinput"
        },
        "<p>The <code>DateRangeInput</code> component is a <a href=\"#core/components/control-group\">control group</a> composed of two\n<a href=\"#core/components/text-inputs.input-group\">input groups</a>. It shows a\n<a href=\"#datetime/daterangepicker\"><code>DateRangePicker</code></a> in a <a href=\"#core/components/popover\"><code>Popover</code></a> on focus.</p>\n<p>Use this component in forms where the user must enter a date range.</p>\n",
        {
          "tag": "reactExample",
          "value": "DateRangeInputExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "datetime/daterangeinput.props"
        },
        "<p>Use the <code>onChange</code> function to listen for changes to the selected date. Use\n<code>onError</code> to listen for invalid entered dates or date ranges.</p>\n<p>You can control the selected date by setting the <code>value</code> prop, or use the\ncomponent in uncontrolled mode and specify an initial date by setting\n<code>defaultValue</code>.</p>\n<p>Customize the date format with the required <code>formatDate</code> and <code>parseDate</code>\ncallbacks. See <a href=\"#datetime/dateinput.date-formatting\">date formatting</a> for more\ninformation on these props.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>DateRangeInput</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/datetime</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>DateRangeInput</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>formatDate</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>date</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>date</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>toLocaleString</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleRangeChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>parseDate</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>str</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"new expr tsx\"><span class=\"keyword operator new tsx\"><span>new</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>Date</span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>str</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>startDate</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>endDate</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IDateRangeInputProps"
        }
      ],
      "contentsRaw": "@# Date range input\n\nThe `DateRangeInput` component is a [control group](#core/components/control-group) composed of two\n[input groups](#core/components/text-inputs.input-group). It shows a\n[`DateRangePicker`](#datetime/daterangepicker) in a [`Popover`](#core/components/popover) on focus.\n\nUse this component in forms where the user must enter a date range.\n\n@reactExample DateRangeInputExample\n\n@## Props\n\nUse the `onChange` function to listen for changes to the selected date. Use\n`onError` to listen for invalid entered dates or date ranges.\n\nYou can control the selected date by setting the `value` prop, or use the\ncomponent in uncontrolled mode and specify an initial date by setting\n`defaultValue`.\n\nCustomize the date format with the required `formatDate` and `parseDate`\ncallbacks. See [date formatting](#datetime/dateinput.date-formatting) for more\ninformation on these props.\n\n```tsx\nimport { DateRangeInput } from \"@blueprintjs/datetime\";\n\n<DateRangeInput\n    formatDate={date => date.toLocaleString()}\n    onChange={this.handleRangeChange}\n    parseDate={str => new Date(str)}\n    value={[this.state.startDate, this.state.endDate]}\n/>\n```\n\n@interface IDateRangeInputProps",
      "metadata": {}
    },
    "daterangepicker": {
      "reference": "daterangepicker",
      "route": "datetime/daterangepicker",
      "sourcePath": "packages/datetime/src/daterangepicker.md",
      "title": "Date range picker",
      "contents": [
        {
          "tag": "heading",
          "value": "Date range picker",
          "level": 1,
          "route": "datetime/daterangepicker"
        },
        "<p>A <code>DateRangePicker</code> shows two sequential month calendars and lets the user select a single range of\ndays.</p>\n",
        {
          "tag": "reactExample",
          "value": "DateRangePickerExample"
        },
        {
          "tag": "heading",
          "value": "Date ranges",
          "level": 2,
          "route": "datetime/daterangepicker.date-ranges"
        },
        "<p><code>DateRangePicker</code> uses the <code>DateRange</code> type across its API. This is an alias for\nthe tuple type <code>[Date, Date]</code>.</p>\n<p>Semantically:</p>\n<ul>\n<li><code>[null, null]</code> represents an empty selection.</li>\n<li><code>[someDate, null]</code> represents a date range where a single endpoint is known.</li>\n<li><code>[someDate, someOtherDate]</code> represents a full date range where both endpoints are known.</li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "datetime/daterangepicker.props"
        },
        "<p>Use the <code>onChange</code> prop to listen for changes to the set date range. You can\ncontrol the selected date range by setting the <code>value</code> prop, or use the\ncomponent in uncontrolled mode and specify an initial date range by setting\n<code>defaultValue</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>DateRangePicker</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/datetime</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>DateRangePicker</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>startDate</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>endDate</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleDateChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IDateRangePickerProps"
        }
      ],
      "contentsRaw": "@# Date range picker\n\nA `DateRangePicker` shows two sequential month calendars and lets the user select a single range of\ndays.\n\n@reactExample DateRangePickerExample\n\n@## Date ranges\n\n`DateRangePicker` uses the `DateRange` type across its API. This is an alias for\nthe tuple type `[Date, Date]`.\n\nSemantically:\n* `[null, null]` represents an empty selection.\n* `[someDate, null]` represents a date range where a single endpoint is known.\n* `[someDate, someOtherDate]` represents a full date range where both endpoints are known.\n\n@## Props\n\nUse the `onChange` prop to listen for changes to the set date range. You can\ncontrol the selected date range by setting the `value` prop, or use the\ncomponent in uncontrolled mode and specify an initial date range by setting\n`defaultValue`.\n\n```tsx\nimport { DateRangePicker } from \"@blueprintjs/datetime\";\n\n<DateRangePicker\n    value={[this.state.startDate, this.state.endDate]}\n    onChange={this.handleDateChange}\n/>\n```\n\n@interface IDateRangePickerProps",
      "metadata": {}
    },
    "datetimepicker": {
      "reference": "datetimepicker",
      "route": "datetime/datetimepicker",
      "sourcePath": "packages/datetime/src/datetimepicker.md",
      "title": "Date time picker",
      "contents": [
        {
          "tag": "heading",
          "value": "Date time picker",
          "level": 1,
          "route": "datetime/datetimepicker"
        },
        "<p><code>DateTimePicker</code> composes a <a href=\"#datetime/datepicker\"><code>DatePicker</code></a>\nand a <a href=\"#datetime/timepicker\"><code>TimePicker</code></a> into one container.</p>\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Deprecated: use <a href=\"#datetime/datepicker\">Date picker</a></h4>\n    This component is <strong>deprecated since @blueprintjs/datetime v3.2.0</strong> with the addition\n    of <code>&lt;DatePicker&gt;</code> <code>timePrecision</code> and <code>timePickerProps</code> props to trivially\n    compose time selection with the existing date selection.\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "DateTimePickerExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "datetime/datetimepicker.props"
        },
        "<p>Use the <code>onChange</code> prop to listen for changes to the selected date and time. You\ncan control the selected date and time by setting the <code>value</code> prop, or use the\ncomponent in uncontrolled mode and specify an initial day by setting\n<code>defaultValue</code>. (If <code>defaultValue</code> is not set, the current date and time is used\nas the default.)</p>\n<p>You can pass props to the inner <code>DatePicker</code> and <code>TimePicker</code> components using\n<code>datePickerProps</code> and <code>timePickerProps</code>, respectively.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>DateTimePicker</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/datetime</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>DateTimePicker</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>date</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleDateChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IDateTimePickerProps"
        }
      ],
      "contentsRaw": "@# Date time picker\n\n`DateTimePicker` composes a [`DatePicker`](#datetime/datepicker)\nand a [`TimePicker`](#datetime/timepicker) into one container.\n\n<div class=\"bp3-callout bp3-intent-danger bp3-icon-error\">\n    <h4 class=\"bp3-heading\">Deprecated: use [Date picker](#datetime/datepicker)</h4>\n    This component is **deprecated since @blueprintjs/datetime v3.2.0** with the addition\n    of `<DatePicker>` `timePrecision` and `timePickerProps` props to trivially\n    compose time selection with the existing date selection.\n</div>\n\n@reactExample DateTimePickerExample\n\n@## Props\n\nUse the `onChange` prop to listen for changes to the selected date and time. You\ncan control the selected date and time by setting the `value` prop, or use the\ncomponent in uncontrolled mode and specify an initial day by setting\n`defaultValue`. (If `defaultValue` is not set, the current date and time is used\nas the default.)\n\nYou can pass props to the inner `DatePicker` and `TimePicker` components using\n`datePickerProps` and `timePickerProps`, respectively.\n\n```tsx\nimport { DateTimePicker } from \"@blueprintjs/datetime\";\n\n<DateTimePicker value={this.state.date} onChange={this.handleDateChange} />\n```\n\n@interface IDateTimePickerProps",
      "metadata": {}
    },
    "datetime": {
      "reference": "datetime",
      "route": "datetime",
      "sourcePath": "packages/datetime/src/index.md",
      "title": "Datetime",
      "contents": [
        {
          "tag": "heading",
          "value": "Datetime",
          "level": 1,
          "route": "datetime"
        },
        "<p>The <a href=\"https://www.npmjs.com/package/@blueprintjs/datetime\"><strong>@blueprintjs/datetime</strong> NPM package</a>\nprovides several components for interacting with dates and times:</p>\n<ul>\n<li><p><a href=\"#datetime/datepicker\"><code>DatePicker</code></a> for selecting a single date (day, month, year).</p>\n</li>\n<li><p><a href=\"#datetime/daterangepicker\"><code>DateRangePicker</code></a> for selecting date ranges.</p>\n</li>\n<li><p><a href=\"#datetime/timepicker\"><code>TimePicker</code></a> for selecting a time (hour, minute, second,\nmillisecond).</p>\n</li>\n<li><p><a href=\"#datetime/datetimepicker\"><code>DateTimePicker</code></a>, which composes <code>DatePicker</code> and\n<code>TimePicker</code> to select a date and time together.</p>\n</li>\n<li><p><a href=\"#datetime/dateinput\"><code>DateInput</code></a>, which composes a text input with a <code>DatePicker</code> in\na <code>Popover</code>, for use in forms.</p>\n</li>\n<li><p><a href=\"#datetime/daterangeinput\"><code>DateRangeInput</code></a>, which composes two text inputs with a <code>DateRangePicker</code> in\na <code>Popover</code>, for use in forms.</p>\n</li>\n</ul>\n<p>Make sure to review the <a href=\"#blueprint/getting-started\">getting started docs for installation info</a>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@blueprintjs/datetime</span></span></div></pre>",
        {
          "tag": "page",
          "value": "datepicker"
        },
        {
          "tag": "page",
          "value": "daterangepicker"
        },
        {
          "tag": "page",
          "value": "timepicker"
        },
        {
          "tag": "page",
          "value": "datetimepicker"
        },
        {
          "tag": "page",
          "value": "dateinput"
        },
        {
          "tag": "page",
          "value": "daterangeinput"
        }
      ],
      "contentsRaw": "\n@# Datetime\n\nThe [__@blueprintjs/datetime__ NPM package](https://www.npmjs.com/package/@blueprintjs/datetime)\nprovides several components for interacting with dates and times:\n\n- [`DatePicker`](#datetime/datepicker) for selecting a single date (day, month, year).\n\n- [`DateRangePicker`](#datetime/daterangepicker) for selecting date ranges.\n\n- [`TimePicker`](#datetime/timepicker) for selecting a time (hour, minute, second,\n  millisecond).\n\n- [`DateTimePicker`](#datetime/datetimepicker), which composes `DatePicker` and\n  `TimePicker` to select a date and time together.\n\n- [`DateInput`](#datetime/dateinput), which composes a text input with a `DatePicker` in\n  a `Popover`, for use in forms.\n\n- [`DateRangeInput`](#datetime/daterangeinput), which composes two text inputs with a `DateRangePicker` in\n  a `Popover`, for use in forms.\n\nMake sure to review the [getting started docs for installation info](#blueprint/getting-started).\n\n```sh\nnpm install --save @blueprintjs/datetime\n```\n\n@page datepicker\n@page daterangepicker\n@page timepicker\n@page datetimepicker\n@page dateinput\n@page daterangeinput",
      "metadata": {
        "reference": "datetime"
      }
    },
    "timepicker": {
      "reference": "timepicker",
      "route": "datetime/timepicker",
      "sourcePath": "packages/datetime/src/timepicker.md",
      "title": "Time picker",
      "contents": [
        {
          "tag": "heading",
          "value": "Time picker",
          "level": 1,
          "route": "datetime/timepicker"
        },
        "<p>A <code>TimePicker</code> allows the user to specify a time.</p>\n<p><code>TimePicker</code> has no direct localization support. You should handle localization directly in your\napplication if needed.</p>\n",
        {
          "tag": "reactExample",
          "value": "TimePickerExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "datetime/timepicker.props"
        },
        "<p>Use the <code>onChange</code> prop to listen for changes to the set time. You can control the selected time by\nsetting the <code>value</code> prop, or use the component in uncontrolled mode and specify an initial time by\nsetting <code>defaultValue</code>.</p>\n<p><code>TimePicker</code> uses <code>Date</code> objects across its API but ignores their year, month, and day fields.</p>\n",
        {
          "tag": "interface",
          "value": "ITimePickerProps"
        }
      ],
      "contentsRaw": "@# Time picker\n\nA `TimePicker` allows the user to specify a time.\n\n`TimePicker` has no direct localization support. You should handle localization directly in your\napplication if needed.\n\n@reactExample TimePickerExample\n\n@## Props\n\nUse the `onChange` prop to listen for changes to the set time. You can control the selected time by\nsetting the `value` prop, or use the component in uncontrolled mode and specify an initial time by\nsetting `defaultValue`.\n\n`TimePicker` uses `Date` objects across its API but ignores their year, month, and day fields.\n\n@interface ITimePickerProps",
      "metadata": {}
    },
    "_nav": {
      "reference": "_nav",
      "route": "_nav",
      "sourcePath": "packages/docs-app/src/_nav.md",
      "title": "(untitled)",
      "contents": [
        "<!--\nThis file enumerates the exact order of root pages in the left sidebar.\n-->\n",
        {
          "tag": "page",
          "value": "blueprint"
        },
        {
          "tag": "page",
          "value": "core"
        },
        {
          "tag": "page",
          "value": "datetime"
        },
        {
          "tag": "page",
          "value": "icons"
        },
        {
          "tag": "page",
          "value": "select"
        },
        {
          "tag": "page",
          "value": "table"
        },
        {
          "tag": "page",
          "value": "timezone"
        },
        {
          "tag": "page",
          "value": "labs"
        },
        {
          "tag": "page",
          "value": "resources"
        }
      ],
      "contentsRaw": "<!--\nThis file enumerates the exact order of root pages in the left sidebar.\n-->\n\n@page blueprint\n@page core\n@page datetime\n@page icons\n@page select\n@page table\n@page timezone\n@page labs\n@page resources",
      "metadata": {}
    },
    "blueprint": {
      "reference": "blueprint",
      "route": "blueprint",
      "sourcePath": "packages/docs-app/src/blueprint.md",
      "title": "Blueprint",
      "contents": [
        {
          "tag": "heading",
          "value": "Blueprint",
          "level": 1,
          "route": "blueprint"
        },
        "<h4 id=\"blueprint-is-a-react-based-ui-toolkit-for-the-web-\">Blueprint is a React-based UI toolkit for the web.</h4>\n<p>It is optimized for building complex data-dense interfaces for desktop applications.</p>\n",
        {
          "tag": "reactDocs",
          "value": "Welcome"
        },
        "<div class=\"bp3-callout bp3-intent-success bp3-icon-endorsed\">\n    <h4 class=\"bp3-heading\">Blueprint v3 is available now! <a href=\"#blueprint/whats-new-3.0\">See what&#39;s new.</a></h4>\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Quick start",
          "level": 2,
          "route": "blueprint.quick-start"
        },
        "<h3 id=\"install\">Install</h3>\n<p><strong>@blueprintjs/core</strong> is the primary Blueprint package on NPM and home to over 40 components.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>yarn&nbsp;add&nbsp;@blueprintjs/core&nbsp;react&nbsp;react-dom</span></span></div></pre><p>Additional components live in the <strong>@blueprintjs/icons</strong>, <strong>@blueprintjs/datetime</strong>, <strong>@blueprintjs/select</strong>, <strong>@blueprintjs/table</strong>, and <strong>@blueprintjs/timezone</strong> packages, separated by use case and significant dependencies. All have peer dependencies on <strong>react</strong> and <strong>react-dom</strong>, so these two packages must be installed alongside Blueprint.</p>\n<h3 id=\"import\">Import</h3>\n<p>Import React components from the appropriate package.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>success</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>button&nbsp;content</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>incrementCounter</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>Don&#39;t forget to include the <strong>main CSS file</strong> from each Blueprint package!</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;in&nbsp;index.html,&nbsp;or&nbsp;however&nbsp;you&nbsp;manage&nbsp;your&nbsp;CSS&nbsp;files&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/normalize.css/normalize.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;blueprint-icons.css&nbsp;file&nbsp;must&nbsp;be&nbsp;included&nbsp;alongside&nbsp;blueprint.css!&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;add&nbsp;other&nbsp;blueprint-*.css&nbsp;files&nbsp;here&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "Browser support",
          "level": 2,
          "route": "blueprint.browser-support"
        },
        "<p><strong>Blueprint supports Chrome, Firefox, Safari, IE 11, and Microsoft Edge.</strong></p>\n<p>You may experience degraded visuals in IE.\nIE 10 and below are unsupported due to their lack of support for CSS Flexbox Layout.\nThese browsers were deprecated by Microsoft (end of support) in <a href=\"https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support\">January 2016</a>.</p>\n",
        {
          "tag": "page",
          "value": "getting-started"
        },
        {
          "tag": "page",
          "value": "reading-the-docs"
        },
        {
          "tag": "page",
          "value": "whats-new-2.0"
        },
        {
          "tag": "page",
          "value": "whats-new-3.0"
        }
      ],
      "contentsRaw": "@# Blueprint\n\n#### Blueprint is a React-based UI toolkit for the web.\n\nIt is optimized for building complex data-dense interfaces for desktop applications.\n\n@reactDocs Welcome\n\n<div class=\"bp3-callout bp3-intent-success bp3-icon-endorsed\">\n    <h4 class=\"bp3-heading\">Blueprint v3 is available now! [See what's new.](#blueprint/whats-new-3.0)</h4>\n</div>\n\n@## Quick start\n\n### Install\n\n**@blueprintjs/core** is the primary Blueprint package on NPM and home to over 40 components.\n\n```sh\nyarn add @blueprintjs/core react react-dom\n```\n\nAdditional components live in the **@blueprintjs/icons**, **@blueprintjs/datetime**, **@blueprintjs/select**, **@blueprintjs/table**, and **@blueprintjs/timezone** packages, separated by use case and significant dependencies. All have peer dependencies on **react** and **react-dom**, so these two packages must be installed alongside Blueprint.\n\n### Import\n\nImport React components from the appropriate package.\n\n```tsx\nimport { Button } from \"@blueprintjs/core\";\n\n<Button intent=\"success\" text=\"button content\" onClick={incrementCounter} />\n```\n\nDon't forget to include the **main CSS file** from each Blueprint package!\n\n```html\n<!-- in index.html, or however you manage your CSS files -->\n<link href=\"path/to/node_modules/normalize.css/normalize.css\" rel=\"stylesheet\" />\n<!-- blueprint-icons.css file must be included alongside blueprint.css! -->\n<link href=\"path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n<link href=\"path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css\" rel=\"stylesheet\" />\n<!-- add other blueprint-*.css files here -->\n```\n\n@## Browser support\n\n**Blueprint supports Chrome, Firefox, Safari, IE 11, and Microsoft Edge.**\n\nYou may experience degraded visuals in IE.\nIE 10 and below are unsupported due to their lack of support for CSS Flexbox Layout.\nThese browsers were deprecated by Microsoft (end of support) in [January 2016](https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support).\n\n@page getting-started\n@page reading-the-docs\n@page whats-new-2.0\n@page whats-new-3.0",
      "metadata": {}
    },
    "getting-started": {
      "reference": "getting-started",
      "route": "blueprint/getting-started",
      "sourcePath": "packages/docs-app/src/getting-started.md",
      "title": "Getting started",
      "contents": [
        {
          "tag": "heading",
          "value": "Getting started",
          "level": 1,
          "route": "blueprint/getting-started"
        },
        {
          "tag": "heading",
          "value": "Installing Blueprint",
          "level": 2,
          "route": "blueprint/getting-started.installing-blueprint"
        },
        {
          "tag": "heading",
          "value": "NPM packages",
          "level": 3,
          "route": "blueprint/getting-started.npm-packages"
        },
        "<p>Blueprint is available as a collection of NPM packages under the <code>@blueprintjs</code> scope.\nEach package appears at the top level of the sidebar, along with its current version.</p>\n<p>Each package contains a CSS file and a collection of CommonJS modules exposing React components.\nThe <code>main</code> module exports all symbols from all modules so you don&#39;t have to import individual files\n(though you can if you want to). The JavaScript components are stable and their APIs adhere to\n<a href=\"http://semver.org/\">semantic versioning</a>.</p>\n<ol>\n<li><p>Install the core package with an NPM client like <code>npm</code> or <code>yarn</code>, pulling in all relevant\ndependencies:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>yarn&nbsp;add&nbsp;@blueprintjs/core</span></span></div></pre></li>\n<li><p>If you see <code>UNMET PEER DEPENDENCY</code> errors, you should manually install React (v15.3 or greater):</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>yarn&nbsp;add&nbsp;react&nbsp;react-dom</span></span></div></pre></li>\n<li><p>After installation, you&#39;ll be able to import the React components in your application:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Intent</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Spinner</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;using&nbsp;JSX:</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>mySpinner</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Spinner</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;use&nbsp;React.createElement&nbsp;if&nbsp;you&#39;re&nbsp;not&nbsp;using&nbsp;JSX.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>myButton</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>createElement</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>intent</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>SUCCESS</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>button&nbsp;content</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre></li>\n<li><p>Don&#39;t forget to include the main CSS file from each Blueprint package! Additionally, the\n<code>resources/</code> directory contains supporting media such as fonts and images.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;in&nbsp;plain&nbsp;old&nbsp;HTML&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag sgml html\"><span class=\"punctuation definition tag html\"><span>&lt;!</span></span><span class=\"meta tag sgml doctype html\"><span class=\"entity name tag doctype html\"><span>DOCTYPE</span></span><span>&nbsp;HTML</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;...</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;include&nbsp;dependencies&nbsp;manually&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/normalize.css/normalize.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;NOTE:&nbsp;blueprint-icons.css&nbsp;file&nbsp;must&nbsp;be&nbsp;included&nbsp;alongside&nbsp;blueprint.css!&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;...</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;...</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source css scss\"><span class=\"comment line scss\"><span>//</span><span>&nbsp;or,&nbsp;using&nbsp;node-style&nbsp;package&nbsp;resolution&nbsp;in&nbsp;a&nbsp;CSS&nbsp;file:</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>~@blueprintjs/core/lib/css/blueprint.css</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div><div class=\"line\"><span class=\"source css scss\"><span class=\"meta at-rule import scss\"><span class=\"keyword control at-rule import scss\"><span class=\"punctuation definition keyword scss\"><span>@</span></span><span>import</span></span><span>&nbsp;</span><span class=\"string quoted double scss\"><span class=\"punctuation definition string begin scss\"><span>&quot;</span></span><span>~@blueprintjs/icons/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end scss\"><span>&quot;</span></span></span></span><span>;</span></span></div></pre></li>\n</ol>\n",
        {
          "tag": "heading",
          "value": "CDN consumption",
          "level": 3,
          "route": "blueprint/getting-started.cdn-consumption"
        },
        "<p>Blueprint supports the venerable <a href=\"https://unpkg.com\">unpkg CDN</a>. Each package provides a UMD\n<code>dist/[name].bundle.js</code> file containing the bundled source code. The UMD wrapper exposes each\nlibrary on the <code>Blueprint</code> global variable: <code>Blueprint.Core</code>, <code>Blueprint.Datetime</code>, etc.</p>\n<p>These bundles <em>do not include</em> external dependencies; your application will need to ensure that\n<code>normalize.css</code>, <code>classnames</code>, <code>dom4</code>, <code>react</code>, <code>react-dom</code>, <code>react-transition-group</code>, <code>popper.js</code>, and\n<code>react-popper</code> are available at runtime.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag sgml html\"><span class=\"punctuation definition tag html\"><span>&lt;!</span></span><span class=\"meta tag sgml doctype html\"><span class=\"entity name tag doctype html\"><span>DOCTYPE</span></span><span>&nbsp;html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>meta</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>charset</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>utf-8</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>meta</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>name</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>viewport</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>content</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width=device-width</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Blueprint&nbsp;Starter&nbsp;Kit</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/normalize.css@</span></span><span>^7.0.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/core@</span></span><span>^3.0.0/lib/css/blueprint.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>link</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/icons@</span></span><span>^3.0.0/lib/css/blueprint-icons.css</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>rel</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>stylesheet</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>body</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/classnames@</span></span><span>^2.2</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/dom4@</span></span><span>^1.8</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react@</span></span><span>^16.2.0/umd/react.production.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react-dom@</span></span><span>^16.2.0/umd/react-dom.production.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react-transition-group@</span></span><span>^2.2.1/dist/react-transition-group.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/popper.js@</span></span><span>^1.14.1/dist/umd/popper.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/react-popper@</span></span><span>^1.0.0/dist/index.umd.min.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/core@</span></span><span>^3.0.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>src</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"markup underline link https hyperlink\"><span>https://unpkg.com/@blueprintjs/icons@</span></span><span>^3.0.0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>div</span></span><span>&nbsp;</span><span class=\"meta attribute-with-value id html\"><span class=\"entity other attribute-name id html\"><span>id</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>btn</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage type const js\"><span>const</span></span><span>&nbsp;</span><span class=\"constant other js\"><span>button</span></span><span>&nbsp;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&nbsp;</span><span class=\"variable other object js\"><span>React</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>createElement</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"variable other object js\"><span>Blueprint</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other object property js\"><span>Core</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>Button</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;icon</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>cloud</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text</span><span class=\"keyword operator assignment js\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>CDN&nbsp;Blueprint&nbsp;is&nbsp;go!</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span class=\"meta method-call js\"><span class=\"meta arguments js\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other object js\"><span>ReactDOM</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>render</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span>button</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&nbsp;</span><span class=\"support variable dom js\"><span>document</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>querySelector</span></span><span class=\"meta arguments js\"><span class=\"punctuation definition arguments begin bracket round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>#btn</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation definition arguments end bracket round js\"><span>)</span></span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"source js embedded html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>body</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "JS environment",
          "level": 2,
          "route": "blueprint/getting-started.js-environment"
        },
        {
          "tag": "heading",
          "value": "Language features",
          "level": 3,
          "route": "blueprint/getting-started.language-features"
        },
        "<p>Note that since the minimum supported version of React is <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html\">v16</a>,\nall of its <a href=\"https://reactjs.org/docs/javascript-environment-requirements.html\">JavaScript Environment Requirements</a> apply to\nBlueprint as well. Blueprint components require the following ES2015 features:</p>\n<ul>\n<li><code>Map</code></li>\n<li><code>Set</code></li>\n<li><code>Array.fill</code></li>\n<li><code>Array.from</code></li>\n</ul>\n<p>We recommend polyfilling these features using <a href=\"https://github.com/paulmillr/es6-shim\">es6-shim</a> or\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>.</p>\n",
        {
          "tag": "heading",
          "value": "DOM4",
          "level": 3,
          "route": "blueprint/getting-started.dom4"
        },
        "<p>Blueprint relies on a handful of DOM Level 4 API methods: <code>el.closest()</code> and <code>el.contains()</code>.\n<code>@blueprintjs/core</code> depends on a <a href=\"https://webreflection.github.io/dom4/\">polyfill library called <code>dom4</code></a> to ensure\nthese methods are available. This module is conditionally loaded if Blueprint is used in a browser environment.</p>\n",
        {
          "tag": "heading",
          "value": "TypeScript",
          "level": 2,
          "route": "blueprint/getting-started.typescript"
        },
        "<p>Blueprint is written in TypeScript and therefore its own <code>.d.ts</code> type definitions are distributed in\nthe NPM package and should be resolved automatically by the compiler. However, you&#39;ll need to\ninstall typings for Blueprint&#39;s dependencies before you can consume it:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>#&nbsp;required&nbsp;for&nbsp;all&nbsp;@blueprintjs&nbsp;packages:</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@types/react&nbsp;@types/react-dom</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>#&nbsp;@blueprintjs/timezone&nbsp;requires:</span></span></div><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@types/moment-timezone</span></span></div></pre><p>Blueprint&#39;s declaration files require <strong>TypeScript 2.3+</strong> for default generic parameter arguments: <code>&lt;P = {}&gt;</code>.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n  For more information, see <a href=\"#blueprint/reading-the-docs.understanding-typescript\">Understanding TypeScript</a>.\n</div>\n\n",
        {
          "tag": "heading",
          "value": "Vanilla JS APIs",
          "level": 2,
          "route": "blueprint/getting-started.vanilla-js-apis"
        },
        "<p>JS components are built using React, but that does not limit their usage to just React applications.\nYou can render any component in any JavaScript application with <code>ReactDOM.render</code>. Think of it like\nusing a jQuery plugin.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Classes</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Intent</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Spinner</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>myContainerElement</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"support variable dom tsx\"><span>document</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>getElementById</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>container</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;with&nbsp;JSX</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>ReactDOM</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>render</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Spinner</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>className</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>SMALL</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>intent</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite tsx\"><span>myContainerElement</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;with&nbsp;vanilla&nbsp;JS,&nbsp;use&nbsp;React.createElement</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>ReactDOM</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>render</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>createElement</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>Spinner</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>className</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Classes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>SMALL</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta objectliteral tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>intent</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>Intent</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>PRIMARY</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta objectliteral tsx\"><span class=\"meta object member tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"variable other readwrite tsx\"><span>myContainerElement</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre><p>To remove the component from the DOM and clean up, unmount it:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>ReactDOM</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>unmountComponentAtNode</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>myContainerElement</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre><p>Check out the <a href=\"https://facebook.github.io/react/docs/react-api.html\">React API docs</a> for more details.</p>\n<p>You&#39;ll need to install React v15.3 or greater alongside Blueprint.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@blueprintjs/core&nbsp;react&nbsp;react-dom&nbsp;react-transition-group</span></span></div></pre><p>Import components from the <code>@blueprintjs/core</code> module into your project.\nDon&#39;t forget to include the main CSS stylesheet too!</p>\n"
      ],
      "contentsRaw": "@# Getting started\n\n@## Installing Blueprint\n\n@### NPM packages\n\nBlueprint is available as a collection of NPM packages under the `@blueprintjs` scope.\nEach package appears at the top level of the sidebar, along with its current version.\n\nEach package contains a CSS file and a collection of CommonJS modules exposing React components.\nThe `main` module exports all symbols from all modules so you don't have to import individual files\n(though you can if you want to). The JavaScript components are stable and their APIs adhere to\n[semantic versioning](http://semver.org/).\n\n1.  Install the core package with an NPM client like `npm` or `yarn`, pulling in all relevant\n    dependencies:\n\n    ```sh\n    yarn add @blueprintjs/core\n    ```\n\n1.  If you see `UNMET PEER DEPENDENCY` errors, you should manually install React (v15.3 or greater):\n\n    ```sh\n    yarn add react react-dom\n    ```\n\n1.  After installation, you'll be able to import the React components in your application:\n\n    ```tsx\n    import { Button, Intent, Spinner } from \"@blueprintjs/core\";\n\n    // using JSX:\n    const mySpinner = <Spinner intent={Intent.PRIMARY} />;\n\n    // use React.createElement if you're not using JSX.\n    const myButton = React.createElement(Button, { intent: Intent.SUCCESS }, \"button content\");\n    ```\n\n1.  Don't forget to include the main CSS file from each Blueprint package! Additionally, the\n    `resources/` directory contains supporting media such as fonts and images.\n\n    ```html\n    <!-- in plain old HTML -->\n    <!DOCTYPE HTML>\n    <html>\n      <head>\n        ...\n        <!-- include dependencies manually -->\n        <link href=\"path/to/node_modules/normalize.css/normalize.css\" rel=\"stylesheet\" />\n        <link href=\"path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css\" rel=\"stylesheet\" />\n        <link href=\"path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n        <!-- NOTE: blueprint-icons.css file must be included alongside blueprint.css! -->\n        ...\n      </head>\n      ...\n    </html>\n    ```\n\n    ```css.scss\n    // or, using node-style package resolution in a CSS file:\n    @import \"~@blueprintjs/core/lib/css/blueprint.css\";\n    @import \"~@blueprintjs/icons/lib/css/blueprint-icons.css\";\n    ```\n\n@### CDN consumption\n\nBlueprint supports the venerable [unpkg CDN](https://unpkg.com). Each package provides a UMD\n`dist/[name].bundle.js` file containing the bundled source code. The UMD wrapper exposes each\nlibrary on the `Blueprint` global variable: `Blueprint.Core`, `Blueprint.Datetime`, etc.\n\nThese bundles _do not include_ external dependencies; your application will need to ensure that\n`normalize.css`, `classnames`, `dom4`, `react`, `react-dom`, `react-transition-group`, `popper.js`, and\n`react-popper` are available at runtime.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title>Blueprint Starter Kit</title>\n    <link href=\"https://unpkg.com/normalize.css@^7.0.0\" rel=\"stylesheet\" />\n    <link href=\"https://unpkg.com/@blueprintjs/core@^3.0.0/lib/css/blueprint.css\" rel=\"stylesheet\" />\n    <link href=\"https://unpkg.com/@blueprintjs/icons@^3.0.0/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n    <script src=\"https://unpkg.com/classnames@^2.2\"></script>\n    <script src=\"https://unpkg.com/dom4@^1.8\"></script>\n    <script src=\"https://unpkg.com/react@^16.2.0/umd/react.production.min.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@^16.2.0/umd/react-dom.production.min.js\"></script>\n    <script src=\"https://unpkg.com/react-transition-group@^2.2.1/dist/react-transition-group.min.js\"></script>\n    <script src=\"https://unpkg.com/popper.js@^1.14.1/dist/umd/popper.js\"></script>\n    <script src=\"https://unpkg.com/react-popper@^1.0.0/dist/index.umd.min.js\"></script>\n    <script src=\"https://unpkg.com/@blueprintjs/core@^3.0.0\"></script>\n    <script src=\"https://unpkg.com/@blueprintjs/icons@^3.0.0\"></script>\n\n    <div id=\"btn\"></div>\n    <script>\n      const button = React.createElement(Blueprint.Core.Button, {\n        icon: \"cloud\",\n        text: \"CDN Blueprint is go!\",\n      });\n      ReactDOM.render(button, document.querySelector(\"#btn\"));\n    </script>\n  </body>\n</html>\n```\n\n@## JS environment\n\n@### Language features\n\nNote that since the minimum supported version of React is [v16](https://reactjs.org/blog/2017/09/26/react-v16.0.html),\nall of its [JavaScript Environment Requirements](https://reactjs.org/docs/javascript-environment-requirements.html) apply to\nBlueprint as well. Blueprint components require the following ES2015 features:\n\n-   `Map`\n-   `Set`\n-   `Array.fill`\n-   `Array.from`\n\nWe recommend polyfilling these features using [es6-shim](https://github.com/paulmillr/es6-shim) or\n[core-js](https://github.com/zloirock/core-js).\n\n@### DOM4\n\nBlueprint relies on a handful of DOM Level 4 API methods: `el.closest()` and `el.contains()`.\n`@blueprintjs/core` depends on a [polyfill library called `dom4`](https://webreflection.github.io/dom4/) to ensure\nthese methods are available. This module is conditionally loaded if Blueprint is used in a browser environment.\n\n@## TypeScript\n\nBlueprint is written in TypeScript and therefore its own `.d.ts` type definitions are distributed in\nthe NPM package and should be resolved automatically by the compiler. However, you'll need to\ninstall typings for Blueprint's dependencies before you can consume it:\n\n```sh\n# required for all @blueprintjs packages:\nnpm install --save @types/react @types/react-dom\n\n# @blueprintjs/timezone requires:\nnpm install --save @types/moment-timezone\n```\n\nBlueprint's declaration files require **TypeScript 2.3+** for default generic parameter arguments: `<P = {}>`.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n  For more information, see [Understanding TypeScript](#blueprint/reading-the-docs.understanding-typescript).\n</div>\n\n@## Vanilla JS APIs\n\nJS components are built using React, but that does not limit their usage to just React applications.\nYou can render any component in any JavaScript application with `ReactDOM.render`. Think of it like\nusing a jQuery plugin.\n\n```tsx\nimport { Classes, Intent, Spinner } from \"@blueprintjs/core\";\n\nconst myContainerElement = document.getElementById(\"container\");\n\n// with JSX\nReactDOM.render(<Spinner className={Classes.SMALL} intent={Intent.PRIMARY} />, myContainerElement);\n\n// with vanilla JS, use React.createElement\nReactDOM.render(\n    React.createElement(Spinner, {\n        className: Classes.SMALL,\n        intent: Intent.PRIMARY\n    }),\n    myContainerElement\n);\n```\n\nTo remove the component from the DOM and clean up, unmount it:\n\n```tsx\nReactDOM.unmountComponentAtNode(myContainerElement);\n```\n\nCheck out the [React API docs](https://facebook.github.io/react/docs/react-api.html) for more details.\n\nYou'll need to install React v15.3 or greater alongside Blueprint.\n\n```sh\nnpm install --save @blueprintjs/core react react-dom react-transition-group\n```\n\nImport components from the `@blueprintjs/core` module into your project.\nDon't forget to include the main CSS stylesheet too!",
      "metadata": {}
    },
    "reading-the-docs": {
      "reference": "reading-the-docs",
      "route": "blueprint/reading-the-docs",
      "sourcePath": "packages/docs-app/src/reading-the-docs.md",
      "title": "Reading the documentation",
      "contents": [
        {
          "tag": "heading",
          "value": "Reading the documentation",
          "level": 1,
          "route": "blueprint/reading-the-docs"
        },
        {
          "tag": "heading",
          "value": "Understanding TypeScript",
          "level": 2,
          "route": "blueprint/reading-the-docs.understanding-typescript"
        },
        "<p>Blueprint is written in <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, a statically typed superset\nof JavaScript that compiles to plain JavaScript. All the code samples throughout this site and\nall interactive examples are also written in TypeScript. TypeScript code looks exactly like ES2015+\ncode with the addition of type signatures, which typically appear after colons and are <em>italicized</em>\nin our syntax theme.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source ts\"><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;variables</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta var expr ts\"><span class=\"storage type ts\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr ts\"><span class=\"meta definition variable ts variable other readwrite ts\"><span>variableName</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>varType</span></span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta var expr ts\"><span class=\"storage type ts\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr ts\"><span class=\"meta definition variable ts variable other readwrite ts\"><span>name</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>string</span></span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta var expr ts\"><span class=\"storage type ts\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr ts\"><span class=\"meta definition variable ts variable other readwrite ts\"><span>disabled</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>boolean</span></span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;functions&nbsp;(and&nbsp;function&nbsp;variables)</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta function ts\"><span class=\"storage type function ts\"><span>function</span></span><span>&nbsp;</span><span class=\"meta definition function ts entity name function ts\"><span>funcName</span></span><span class=\"meta parameters ts\"><span class=\"punctuation definition parameters begin ts\"><span>(</span></span><span class=\"variable parameter ts\"><span>arg1</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>argType</span></span></span><span class=\"punctuation separator parameter ts\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter ts\"><span>arg2</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>argType</span></span></span><span class=\"punctuation definition parameters end ts\"><span>)</span></span></span><span class=\"meta return type ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>returnType</span></span><span>&nbsp;</span></span><span class=\"meta block ts\"><span class=\"punctuation definition block ts\"><span>{</span><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta var expr ts\"><span class=\"storage type ts\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr ts\"><span class=\"meta definition variable ts entity name function ts\"><span>funcName</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"meta type function ts\"><span class=\"meta parameters ts\"><span class=\"punctuation definition parameters begin ts\"><span>(</span></span><span class=\"variable parameter ts\"><span>arg1</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>argType</span></span></span><span class=\"punctuation definition parameters end ts\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"meta type function return ts\"><span class=\"storage type function arrow ts\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>returnType</span></span></span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta function ts\"><span class=\"storage type function ts\"><span>function</span></span><span>&nbsp;</span><span class=\"meta definition function ts entity name function ts\"><span>split</span></span><span class=\"meta parameters ts\"><span class=\"punctuation definition parameters begin ts\"><span>(</span></span><span class=\"variable parameter ts\"><span>str</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>string</span></span></span><span class=\"punctuation separator parameter ts\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter ts\"><span>delim</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>string</span></span></span><span class=\"punctuation definition parameters end ts\"><span>)</span></span></span><span class=\"meta return type ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>string</span></span><span class=\"meta type tuple ts\"><span class=\"meta brace square ts\"><span>[</span><span>]</span></span></span><span>&nbsp;</span></span><span class=\"meta block ts\"><span class=\"punctuation definition block ts\"><span>{</span><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta function ts\"><span class=\"storage type function ts\"><span>function</span></span><span>&nbsp;</span><span class=\"meta definition function ts entity name function ts\"><span>map</span></span><span class=\"meta type parameters ts\"><span class=\"punctuation definition typeparameters begin ts\"><span>&lt;</span></span><span class=\"entity name type ts\"><span>T</span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>U</span></span><span class=\"punctuation definition typeparameters end ts\"><span>&gt;</span></span></span><span class=\"meta parameters ts\"><span class=\"punctuation definition parameters begin ts\"><span>(</span></span><span class=\"variable parameter ts\"><span>array</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>T</span></span><span class=\"meta type tuple ts\"><span class=\"meta brace square ts\"><span>[</span><span>]</span></span></span></span><span class=\"punctuation separator parameter ts\"><span>,</span></span><span>&nbsp;</span><span class=\"entity name function ts\"><span>iterator</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"meta type function ts\"><span class=\"meta parameters ts\"><span class=\"punctuation definition parameters begin ts\"><span>(</span></span><span class=\"variable parameter ts\"><span>item</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>T</span></span></span><span class=\"punctuation separator parameter ts\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter ts\"><span>index</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>number</span></span></span><span class=\"punctuation definition parameters end ts\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"meta type function return ts\"><span class=\"storage type function arrow ts\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>U</span></span></span></span><span class=\"punctuation definition parameters end ts\"><span>)</span></span></span><span class=\"meta return type ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>U</span></span><span class=\"meta type tuple ts\"><span class=\"meta brace square ts\"><span>[</span><span>]</span></span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;interfaces&nbsp;describe&nbsp;plain&nbsp;objects</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"comment line double-slash ts\"><span class=\"punctuation definition comment ts\"><span>//</span></span><span>&nbsp;(we&nbsp;use&nbsp;the&nbsp;convention&nbsp;that&nbsp;interfaces&nbsp;begin&nbsp;with&nbsp;&quot;I&quot;)</span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta interface ts\"><span class=\"storage type interface ts\"><span>interface</span></span><span>&nbsp;</span><span class=\"entity name type interface ts\"><span>IOption</span></span><span>&nbsp;</span><span class=\"punctuation definition block ts\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta interface ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta field declaration ts\"><span class=\"meta definition property ts variable object property ts\"><span>label</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>string</span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta interface ts\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta field declaration ts\"><span class=\"meta definition property ts variable object property ts\"><span>value</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive ts\"><span>string</span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta interface ts\"><span class=\"punctuation definition block ts\"><span>}</span></span></span></span></div><div class=\"line\"><span class=\"source ts\"><span class=\"meta var expr ts\"><span class=\"storage type ts\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr ts\"><span class=\"meta definition variable ts variable other readwrite ts\"><span>option</span></span><span class=\"meta type annotation ts\"><span class=\"keyword operator type annotation ts\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type ts\"><span>IOption</span></span><span>&nbsp;</span></span></span><span class=\"keyword operator assignment ts\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral ts\"><span class=\"punctuation definition block ts\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>label</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double ts\"><span class=\"punctuation definition string begin ts\"><span>&quot;</span></span><span>Name</span><span class=\"punctuation definition string end ts\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma ts\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member ts\"><span class=\"meta object-literal key ts\"><span>value</span></span><span class=\"meta object-literal key ts punctuation separator key-value ts\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double ts\"><span class=\"punctuation definition string begin ts\"><span>&quot;</span></span><span>Gilad</span><span class=\"punctuation definition string end ts\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block ts\"><span>}</span></span></span></span><span class=\"punctuation terminator statement ts\"><span>;</span></span></span></div></pre><p><strong>You do not need to use TypeScript to consume Blueprint</strong> (but major &quot;props&quot; if you do).\nSimply ignoring the type annotations (any italics in code blocks) will produce valid ES2015 code.\nFamiliarity with the syntax is suggested so you can follow our examples source code.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n  For more information, see the TypeScript Handbook for <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">basic types</a>\n  and <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\">consuming declaration files</a>.\n</div>\n\n"
      ],
      "contentsRaw": "@# Reading the documentation\n\n@## Understanding TypeScript\n\nBlueprint is written in [TypeScript](https://www.typescriptlang.org/), a statically typed superset\nof JavaScript that compiles to plain JavaScript. All the code samples throughout this site and\nall interactive examples are also written in TypeScript. TypeScript code looks exactly like ES2015+\ncode with the addition of type signatures, which typically appear after colons and are _italicized_\nin our syntax theme.\n\n```ts\n// variables\nconst variableName: varType;\nconst name: string;\nconst disabled: boolean;\n\n// functions (and function variables)\nfunction funcName(arg1: argType, arg2: argType): returnType {}\nconst funcName: (arg1: argType) => returnType;\nfunction split(str: string, delim: string): string[] {}\nfunction map<T, U>(array: T[], iterator: (item: T, index: number) => U): U[];\n\n// interfaces describe plain objects\n// (we use the convention that interfaces begin with \"I\")\ninterface IOption {\n    label: string;\n    value: string;\n}\nconst option: IOption = { label: \"Name\", value: \"Gilad\" };\n```\n\n**You do not need to use TypeScript to consume Blueprint** (but major \"props\" if you do).\nSimply ignoring the type annotations (any italics in code blocks) will produce valid ES2015 code.\nFamiliarity with the syntax is suggested so you can follow our examples source code.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n  For more information, see the TypeScript Handbook for [basic types][basic-types]\n  and [consuming declaration files][decl-files].\n</div>\n\n[basic-types]: https://www.typescriptlang.org/docs/handbook/basic-types.html\n[decl-files]: https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html",
      "metadata": {}
    },
    "resources": {
      "reference": "resources",
      "route": "resources",
      "sourcePath": "packages/docs-app/src/resources.md",
      "title": "Resources",
      "contents": [
        {
          "tag": "heading",
          "value": "Resources",
          "level": 1,
          "route": "resources"
        },
        {
          "tag": "heading",
          "value": "Sketch assets",
          "level": 2,
          "route": "resources.sketch-assets"
        },
        "<p><a class=\"blueprint-resource bp3-card bp3-interactive\" href=\"https://github.com/palantir/blueprint/tree/develop/resources/sketch/Core%20Kit.sketch\" target=\"_blank\">\n    <span>Core Kit.sketch</span>\n    <small>Last updated August 22, 2018</small>\n</a>\n<a class=\"blueprint-resource bp3-card bp3-interactive\" href=\"https://github.com/palantir/blueprint/tree/develop/resources/sketch/Blueprint%20Colors.sketchpalette\" target=\"_blank\">\n    <span>Blueprint Colors.sketchpalette</span>\n    <small>Last updated March 22, 2016</small>\n</a></p>\n"
      ],
      "contentsRaw": "@# Resources\n\n@## Sketch assets\n\n<a class=\"blueprint-resource bp3-card bp3-interactive\" href=\"https://github.com/palantir/blueprint/tree/develop/resources/sketch/Core%20Kit.sketch\" target=\"_blank\">\n    <span>Core Kit.sketch</span>\n    <small>Last updated August 22, 2018</small>\n</a>\n<a class=\"blueprint-resource bp3-card bp3-interactive\" href=\"https://github.com/palantir/blueprint/tree/develop/resources/sketch/Blueprint%20Colors.sketchpalette\" target=\"_blank\">\n    <span>Blueprint Colors.sketchpalette</span>\n    <small>Last updated March 22, 2016</small>\n</a>",
      "metadata": {}
    },
    "whats-new-2.0": {
      "reference": "whats-new-2.0",
      "route": "blueprint/whats-new-2.0",
      "sourcePath": "packages/docs-app/src/whats-new-2.0.md",
      "title": "What's new in 2.0",
      "contents": [
        {
          "tag": "heading",
          "value": "What's new in 2.0",
          "level": 1,
          "route": "blueprint/whats-new-2.0"
        },
        "<p>Blueprint 2.0 features JavaScript API refactors, smaller &amp; more modular packages, and very few changes to the CSS API.</p>\n<h3 id=\"highlights\">Highlights</h3>\n<ul>\n<li>The minimum version of React is now 16.2.</li>\n<li>The minimum version of TypeScript for the declaration files is now 2.3.</li>\n<li><code>Portal</code> now uses React 16&#39;s built-in Portal functionality instead of <code>ReactDOM.unstable_renderSubtreeIntoContainer</code>.</li>\n<li><code>Icon</code> now renders SVG elements and is used in all Blueprint components.<ul>\n<li>This also means that you can <em>provide your own SVG icons for all components</em>.</li>\n<li>Support for the icon font remains, but will be removed in the next major version.</li>\n</ul>\n</li>\n<li>Icon styles and fonts have moved to a new <strong>@blueprintjs/icons</strong> package<ul>\n<li>Core depends on this package, so you will have to import its CSS alongside <code>blueprint.css</code></li>\n</ul>\n</li>\n<li><code>Popover2</code> is now the default <code>Popover</code>. It uses <a href=\"https://popper.js.org/\">Popper.js</a> instead of <a href=\"http://tether.io/\">Tether</a>, which provides much better auto-positioning capabilities and solves a number of outstanding bugs out-of-the-box.</li>\n<li>All Labs components (in <code>@blueprintjs/labs</code>) have been moved into separate packages so that you no longer have to deal with the <code>0.x</code> version range for many components that are used widely in production.</li>\n</ul>\n<p><a class=\"bp3-button bp3-intent-primary\" href=\"https://github.com/palantir/blueprint/wiki/What's-new-in-Blueprint-2.0\" target=\"_blank\" style=\"margin-top: 30px;\">\n    View the full changelog on the wiki\n</a></p>\n"
      ],
      "contentsRaw": "@# What's new in 2.0\n\nBlueprint 2.0 features JavaScript API refactors, smaller & more modular packages, and very few changes to the CSS API.\n\n### Highlights\n\n- The minimum version of React is now 16.2.\n- The minimum version of TypeScript for the declaration files is now 2.3.\n- `Portal` now uses React 16's built-in Portal functionality instead of `ReactDOM.unstable_renderSubtreeIntoContainer`.\n- `Icon` now renders SVG elements and is used in all Blueprint components.\n    - This also means that you can _provide your own SVG icons for all components_.\n    - Support for the icon font remains, but will be removed in the next major version.\n- Icon styles and fonts have moved to a new **@blueprintjs/icons** package\n    - Core depends on this package, so you will have to import its CSS alongside `blueprint.css`\n- `Popover2` is now the default `Popover`. It uses [Popper.js](https://popper.js.org/) instead of [Tether](http://tether.io/), which provides much better auto-positioning capabilities and solves a number of outstanding bugs out-of-the-box.\n- All Labs components (in `@blueprintjs/labs`) have been moved into separate packages so that you no longer have to deal with the `0.x` version range for many components that are used widely in production.\n\n<a class=\"bp3-button bp3-intent-primary\" href=\"https://github.com/palantir/blueprint/wiki/What's-new-in-Blueprint-2.0\" target=\"_blank\" style=\"margin-top: 30px;\">\n    View the full changelog on the wiki\n</a>",
      "metadata": {}
    },
    "whats-new-3.0": {
      "reference": "whats-new-3.0",
      "route": "blueprint/whats-new-3.0",
      "sourcePath": "packages/docs-app/src/whats-new-3.0.md",
      "title": "What's new in 3.0",
      "contents": [
        {
          "tag": "heading",
          "value": "What's new in 3.0",
          "level": 1,
          "route": "blueprint/whats-new-3.0"
        },
        "<p>Blueprint 3.0 supports multiple major versions of Blueprint on the same page through removing global styles and deconflicting selectors by changing the namespace. It also restores support for React 15 in most packages.</p>\n<h3 id=\"highlights\">Highlights</h3>\n<ul>\n<li>The minimum version of React is back to 15.3 or 16.<ul>\n<li><code>Portal</code> will use React 16&#39;s <code>React.createPortal</code> if available and fall back to <code>ReactDOM.unstable_renderSubtreeIntoContainer</code>.</li>\n</ul>\n</li>\n<li>Change CSS namespace to <code>bp3-</code> to avoid conflicts with previous major versions.</li>\n<li>Move styles attached to global selectors to their own CSS classes.<ul>\n<li>Affects <code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>, <code>&lt;blockquote&gt;</code>, <code>&lt;code&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;hr&gt;</code>, <code>&lt;table&gt;</code></li>\n<li>The above elements do not require classes when used inside a container element with <code>Classes.RUNNING_TEXT</code>.</li>\n</ul>\n</li>\n<li>Allow string literals for enums! <code>&lt;Button intent=&quot;success&quot; /&gt;</code></li>\n<li>Many new components! Look for the <span class=\"bp3-tag bp3-intent-success bp3-minimal\">new</span> tag in the sidebar.</li>\n<li>Complete refactor of documentation content to focus on React usage and de-emphasize CSS/HTML usage.</li>\n</ul>\n<p><a class=\"bp3-button bp3-intent-primary\" href=\"https://github.com/palantir/blueprint/wiki/3.0-Changelog\" target=\"_blank\" style=\"margin-top: 30px;\">\n    View the full changelog on the wiki\n</a></p>\n"
      ],
      "contentsRaw": "\n@# What's new in 3.0\n\nBlueprint 3.0 supports multiple major versions of Blueprint on the same page through removing global styles and deconflicting selectors by changing the namespace. It also restores support for React 15 in most packages.\n\n### Highlights\n\n- The minimum version of React is back to 15.3 or 16.\n    - `Portal` will use React 16's `React.createPortal` if available and fall back to `ReactDOM.unstable_renderSubtreeIntoContainer`.\n- Change CSS namespace to `bp3-` to avoid conflicts with previous major versions.\n- Move styles attached to global selectors to their own CSS classes.\n    - Affects `<h1>`-`<h6>`, `<blockquote>`, `<code>`, `<pre>`, `<ol>`, `<ul>`, `<hr>`, `<table>`\n    - The above elements do not require classes when used inside a container element with `Classes.RUNNING_TEXT`.\n- Allow string literals for enums! `<Button intent=\"success\" />`\n- Many new components! Look for the <span class=\"bp3-tag bp3-intent-success bp3-minimal\">new</span> tag in the sidebar.\n- Complete refactor of documentation content to focus on React usage and de-emphasize CSS/HTML usage.\n\n<a class=\"bp3-button bp3-intent-primary\" href=\"https://github.com/palantir/blueprint/wiki/3.0-Changelog\" target=\"_blank\" style=\"margin-top: 30px;\">\n    View the full changelog on the wiki\n</a>",
      "metadata": {
        "tag": "new"
      }
    },
    "icons": {
      "reference": "icons",
      "route": "icons",
      "sourcePath": "packages/icons/src/index.md",
      "title": "Icons",
      "contents": [
        {
          "tag": "heading",
          "value": "Icons",
          "level": 1,
          "route": "icons"
        },
        "<p>Blueprint provides over 300 vector UI icons in two sizes (16px and 20px) and two formats (SVG and fonts).\nIt&#39;s easy to change their color or apply effects like text shadows via standard SVG or CSS properties.</p>\n<p>Many Blueprint components support an <code>icon</code> prop which accepts an icon name (such as <code>&quot;history&quot;</code>) or a JSX element to use as the icon.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    See the <a href=\"#core/components/icon\"><strong><code>Icon</code> component documentation</strong></a> for full API details.\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "IconExample"
        },
        {
          "tag": "reactDocs",
          "value": "Icons"
        }
      ],
      "contentsRaw": "\n@# Icons\n\nBlueprint provides over 300 vector UI icons in two sizes (16px and 20px) and two formats (SVG and fonts).\nIt's easy to change their color or apply effects like text shadows via standard SVG or CSS properties.\n\nMany Blueprint components support an `icon` prop which accepts an icon name (such as `\"history\"`) or a JSX element to use as the icon.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    See the [**`Icon` component documentation**](#core/components/icon) for full API details.\n</div>\n\n@reactExample IconExample\n\n@reactDocs Icons",
      "metadata": {
        "reference": "icons"
      }
    },
    "labs": {
      "reference": "labs",
      "route": "labs",
      "sourcePath": "packages/labs/src/index.md",
      "title": "Labs",
      "contents": [
        {
          "tag": "heading",
          "value": "Labs",
          "level": 1,
          "route": "labs"
        },
        "<div class=\"bp3-callout bp3-intent-warning bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Under construction</h4>\n    The <strong><a href=\"https://www.npmjs.com/package/@blueprintjs/labs\">@blueprintjs/labs</a></strong> NPM package contains <strong>unstable React components under active development by team members</strong>. It is an incubator and staging area for components as we refine the API design; as such, this package will never reach 1.0.0, and every minor version should be considered breaking.\n</div>\n\n<p>There are currently no components in labs.</p>\n<p><code>@blueprintjs/labs@0.15.x</code> re-exports components from <code>@blueprintjs/core</code>, <code>@blueprintjs/select</code>, and <code>@blueprintjs/timezone</code> which were previously available in this package. <strong>These exports are provided as migration convenience only and will be removed in the next minor version</strong>.</p>\n"
      ],
      "contentsRaw": "\n@# Labs\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Under construction</h4>\n    The **[@blueprintjs/labs](https://www.npmjs.com/package/@blueprintjs/labs)** NPM package contains **unstable React components under active development by team members**. It is an incubator and staging area for components as we refine the API design; as such, this package will never reach 1.0.0, and every minor version should be considered breaking.\n</div>\n\nThere are currently no components in labs.\n\n`@blueprintjs/labs@0.15.x` re-exports components from `@blueprintjs/core`, `@blueprintjs/select`, and `@blueprintjs/timezone` which were previously available in this package. __These exports are provided as migration convenience only and will be removed in the next minor version__.",
      "metadata": {
        "reference": "labs"
      }
    },
    "omnibar": {
      "reference": "omnibar",
      "route": "select/omnibar",
      "sourcePath": "packages/select/src/components/omnibar/omnibar.md",
      "title": "Omnibar",
      "contents": [
        {
          "tag": "heading",
          "value": "Omnibar",
          "level": 1,
          "route": "select/omnibar"
        },
        "<p><code>Omnibar&lt;T&gt;</code> is a macOS Spotlight-style typeahead component composing <code>Overlay</code> and <code>QueryList&lt;T&gt;</code>. Usage is similar to <code>Select&lt;T&gt;</code>: provide your items and a predicate to customize the filtering algorithm. The component is fully controlled via the <code>isOpen</code> prop, which means you can decide exactly how to trigger the component. The following example responds to a button and a hotkey.</p>\n",
        {
          "tag": "reactExample",
          "value": "OmnibarExample"
        },
        {
          "tag": "interface",
          "value": "IOmnibarProps"
        }
      ],
      "contentsRaw": "@# Omnibar\n\n`Omnibar<T>` is a macOS Spotlight-style typeahead component composing `Overlay` and `QueryList<T>`. Usage is similar to `Select<T>`: provide your items and a predicate to customize the filtering algorithm. The component is fully controlled via the `isOpen` prop, which means you can decide exactly how to trigger the component. The following example responds to a button and a hotkey.\n\n@reactExample OmnibarExample\n\n@interface IOmnibarProps",
      "metadata": {}
    },
    "query-list": {
      "reference": "query-list",
      "route": "select/query-list",
      "sourcePath": "packages/select/src/components/query-list/query-list.md",
      "title": "QueryList",
      "contents": [
        {
          "tag": "heading",
          "value": "QueryList",
          "level": 1,
          "route": "select/query-list"
        },
        "<p><code>QueryList&lt;T&gt;</code> is a higher-order component that provides interactions between a query string and a list of items. Specifically, it implements the two predicate props describe above and provides keyboard selection. It does not render anything on its own, instead deferring to a <code>renderer</code> prop to perform the actual composition of components.</p>\n<p><code>QueryList&lt;T&gt;</code> is a generic component where <code>&lt;T&gt;</code> represents the type of one item in the array of <code>items</code>. The static method <code>QueryList.ofType&lt;T&gt;()</code> is available to simplify the TypeScript usage.</p>\n<p>If the <code>Select</code> interactions are not sufficient for your use case, you can use <code>QueryList</code> directly to render your own components while leveraging basic interactions for keyboard selection and filtering. The <code>Select</code> source code is a great place to start when implementing a custom <code>QueryList</code> <code>renderer</code>.</p>\n",
        {
          "tag": "interface",
          "value": "IQueryListProps"
        },
        {
          "tag": "heading",
          "value": "Renderer API",
          "level": 2,
          "route": "select/query-list.renderer-api"
        },
        "<p>An object with the following properties will be passed to an <code>QueryList</code> <code>renderer</code>. Required properties will always be defined;  optional ones will only be defined if they are passed as props to the <code>QueryList</code>.</p>\n<p>This interface is generic, accepting a type parameter <code>&lt;T&gt;</code> for an item in the list.</p>\n",
        {
          "tag": "interface",
          "value": "IQueryListRendererProps"
        }
      ],
      "contentsRaw": "@# QueryList\n\n`QueryList<T>` is a higher-order component that provides interactions between a query string and a list of items. Specifically, it implements the two predicate props describe above and provides keyboard selection. It does not render anything on its own, instead deferring to a `renderer` prop to perform the actual composition of components.\n\n`QueryList<T>` is a generic component where `<T>` represents the type of one item in the array of `items`. The static method `QueryList.ofType<T>()` is available to simplify the TypeScript usage.\n\nIf the `Select` interactions are not sufficient for your use case, you can use `QueryList` directly to render your own components while leveraging basic interactions for keyboard selection and filtering. The `Select` source code is a great place to start when implementing a custom `QueryList` `renderer`.\n\n@interface IQueryListProps\n\n@## Renderer API\n\nAn object with the following properties will be passed to an `QueryList` `renderer`. Required properties will always be defined;  optional ones will only be defined if they are passed as props to the `QueryList`.\n\nThis interface is generic, accepting a type parameter `<T>` for an item in the list.\n\n@interface IQueryListRendererProps",
      "metadata": {}
    },
    "multi-select": {
      "reference": "multi-select",
      "route": "select/multi-select",
      "sourcePath": "packages/select/src/components/select/multi-select.md",
      "title": "MultiSelect",
      "contents": [
        {
          "tag": "heading",
          "value": "MultiSelect",
          "level": 1,
          "route": "select/multi-select"
        },
        "<p>Use <code>MultiSelect&lt;T&gt;</code> for choosing multiple items in a list. The component renders a <a href=\"#core/components/tag-input\"><code>TagInput</code></a> wrapped in a <code>Popover</code>. Similarly to <a href=\"#select/select-component\"><code>Select</code></a>, you can pass in a predicate to customize the filtering algorithm. Selection of a <code>MultiSelect&lt;T&gt;</code> is controlled: listen to changes with <code>onItemSelect</code>.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Generic components and custom filtering</h4>\n    For more information on controlled usage, generic components and custom filtering, visit the documentation for <a href=\"#select/select-component\"><code>Select&lt;T&gt;</code></a>.\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "MultiSelectExample"
        },
        {
          "tag": "interface",
          "value": "IMultiSelectProps"
        },
        {
          "tag": "interface",
          "value": "ISelectItemRendererProps"
        }
      ],
      "contentsRaw": "@# MultiSelect\n\nUse `MultiSelect<T>` for choosing multiple items in a list. The component renders a [`TagInput`](#core/components/tag-input) wrapped in a `Popover`. Similarly to [`Select`](#select/select-component), you can pass in a predicate to customize the filtering algorithm. Selection of a `MultiSelect<T>` is controlled: listen to changes with `onItemSelect`.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Generic components and custom filtering</h4>\n    For more information on controlled usage, generic components and custom filtering, visit the documentation for [`Select<T>`](#select/select-component).\n</div>\n\n@reactExample MultiSelectExample\n\n@interface IMultiSelectProps\n\n@interface ISelectItemRendererProps",
      "metadata": {}
    },
    "select-component": {
      "reference": "select-component",
      "route": "select/select-component",
      "sourcePath": "packages/select/src/components/select/select-component.md",
      "title": "Select",
      "contents": [
        {
          "tag": "heading",
          "value": "Select",
          "level": 1,
          "route": "select/select-component"
        },
        "<p>Use <code>Select&lt;T&gt;</code> for choosing one item from a list. The component&#39;s children will be wrapped in a <a href=\"#labs/popover\"><code>Popover</code></a> that contains the list and an optional <code>InputGroup</code> to filter it. Provide a predicate to customize the filtering algorithm. The value of a <code>Select&lt;T&gt;</code> (the currently chosen item) is uncontrolled: listen to changes with <code>onItemSelect</code>.</p>\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Disabling a Select</h4>\n    <p>Disabling the component requires setting the <code>disabled</code> prop to <code>true</code>\n    and separately disabling the component&#39;s children as appropriate (because <code>Select</code> accepts arbitrary children).</p>\n    <p>For example, <code>&lt;Select ... disabled={true}&gt;&lt;Button ... disabled={true} /&gt;&lt;/Select&gt;</code></p>\n</div>\n\n",
        {
          "tag": "reactExample",
          "value": "SelectExample"
        },
        "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Button</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>MenuItem</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Select</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/select</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"constant language import-export-all tsx\"><span>*</span></span><span>&nbsp;</span><span class=\"keyword control as tsx\"><span>as</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Films</span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>./films</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;Select&lt;T&gt;&nbsp;is&nbsp;a&nbsp;generic&nbsp;component&nbsp;to&nbsp;work&nbsp;with&nbsp;your&nbsp;data&nbsp;types.</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;In&nbsp;TypeScript,&nbsp;you&nbsp;must&nbsp;first&nbsp;obtain&nbsp;a&nbsp;non-generic&nbsp;reference:</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>FilmSelect</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Select</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>ofType</span></span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type module tsx\"><span>Films</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name type tsx\"><span>Film</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>ReactDOM</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>render</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FilmSelect</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>items</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Films</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>items</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemPredicate</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Films</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>itemPredicate</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemRenderer</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Films</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>itemRenderer</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>noResults</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>disabled</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>No&nbsp;results.</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onItemSelect</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"comment block tsx\"><span class=\"punctuation definition comment tsx\"><span>/*</span></span><span>&nbsp;children&nbsp;become&nbsp;the&nbsp;popover&nbsp;target;&nbsp;render&nbsp;value&nbsp;here&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Button</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>Films</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>items</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>title</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>rightIcon</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>double-caret-vertical</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FilmSelect</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"support variable dom tsx\"><span>document</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function dom tsx\"><span>querySelector</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>#root</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre><p>In TypeScript, <code>Select&lt;T&gt;</code> is a <em>generic component</em> so you must define a local type that specifies <code>&lt;T&gt;</code>, the type of one item in <code>items</code>. The props on this local type will now operate on your data type (speak your language) so you can easily define handlers without transformation steps, but most props are required as a result. The static <code>Select.ofType&lt;T&gt;()</code> method is available to streamline this process. (Note that this has no effect on JavaScript usage: the <code>Select</code> export is a perfectly valid React component class.)</p>\n",
        {
          "tag": "heading",
          "value": "Querying",
          "level": 2,
          "route": "select/select-component.querying"
        },
        "<p>Supply a predicate to automatically query items based on the <code>InputGroup</code> value. Use <code>itemPredicate</code> to filter each item individually; this is great for lightweight searches. Use <code>itemListPredicate</code> to query the entire array in one go, and even reorder it, such as with <a href=\"https://github.com/jeancroy/fuzz-aldrin-plus\">fuzz-aldrin-plus</a>. The array of filtered items is cached internally by <code>QueryList</code> state and only recomputed when <code>query</code> or <code>items</code>-related props change.</p>\n<p>Omitting both <code>itemPredicate</code> and <code>itemListPredicate</code> props will cause the component to always render all <code>items</code>. It will not hide the <code>InputGroup</code>; use the <code>filterable</code> prop for that. In this case, you can implement your own filtering and simply change the <code>items</code> prop.</p>\n<p>The <strong>@blueprintjs/select</strong> package exports <code>ItemPredicate&lt;T&gt;</code> and <code>ItemListPredicate&lt;T&gt;</code> type aliases to simplify the process of implementing these functions.\nSee the code sample in <a href=\"#select/select-component.item-renderer\">Item Renderer API</a> below for usage.</p>\n",
        {
          "tag": "heading",
          "value": "Non-ideal states",
          "level": 3,
          "route": "select/select-component.non-ideal-states"
        },
        "<p>If the query returns no results or <code>items</code> is empty, then <code>noResults</code> will be rendered in place of the usual list. You also have the option to provide <code>initialContent</code>, which will render in place of the item list if the query is empty.</p>\n",
        {
          "tag": "heading",
          "value": "Custom menu",
          "level": 2,
          "route": "select/select-component.custom-menu"
        },
        "<p>By default, <code>Select</code> renders the displayed items in a <a href=\"#core/components/menu\"><code>Menu</code></a>. This behavior can be overridden by providing the <code>itemListRenderer</code> prop, giving you full control over the layout of the items. For example, you can group items under a common heading, or render large data sets using <a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a>.</p>\n<p>Note that the non-ideal states of <code>noResults</code> and <code>initialContent</code> are specific to the default renderer. If you provide the <code>itemListRenderer</code> prop, these props will be ignored.</p>\n<p>See the code sample in <a href=\"#select/select-component.item-list-renderer\">Item List Renderer API</a> below for usage.</p>\n",
        {
          "tag": "heading",
          "value": "Controlled usage",
          "level": 2,
          "route": "select/select-component.controlled-usage"
        },
        "<p>The input value can be controlled with the <code>query</code> and <code>onQueryChange</code> props. <em>Do not use <code>inputProps</code> for this;</em> the component ignores <code>inputProps.value</code> and <code>inputProps.onChange</code> in favor of <code>query</code> and <code>onQueryChange</code> (as noted in the prop documentation).</p>\n<p>The focused item (for keyboard interactions) can be controlled with the <code>activeItem</code> and <code>onActiveItemChange</code> props.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FilmSelect</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>items</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta function-call tsx\"><span class=\"entity name function tsx\"><span>myFilter</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other constant tsx\"><span>ALL_ITEMS</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>myQuery</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemRenderer</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onItemSelect</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;controlled&nbsp;active&nbsp;item</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>activeItem</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>myActiveItem</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onActiveItemChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleActiveItemChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span class=\"punctuation whitespace comment leading tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;controlled&nbsp;query</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>query</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>myQuery</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onQueryChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleQueryChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>This controlled usage allows you to implement all sorts of advanced behavior on\ntop of the basic <code>Select</code> interactions, such as windowed filtering for large\ndata sets.</p>\n",
        {
          "tag": "heading",
          "value": "JavaScript API",
          "level": 2,
          "route": "select/select-component.javascript-api"
        },
        {
          "tag": "interface",
          "value": "ISelectProps"
        },
        {
          "tag": "heading",
          "value": "Item renderer",
          "level": 3,
          "route": "select/select-component.item-renderer"
        },
        "<p><code>Select</code>&#39;s <code>itemRenderer</code> will be called for each item and receives the item and a props object containing data specific\nto rendering this item in this frame. The renderer is called for all items, so don&#39;t forget to respect\n<code>modifiers.filtered</code> to hide items that don&#39;t match the predicate. Also, don&#39;t forget to define a <code>key</code> for each item,\nor face React&#39;s console wrath!</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Classes</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>MenuItem</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>ItemRenderer</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>ItemPredicate</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Select</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/select</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>FilmSelect</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Select</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>ofType</span></span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>Film</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>filterFilm</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ItemPredicate</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>IFilm</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span></span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>query</span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>film</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>film</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>title</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>toLowerCase</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>indexOf</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>query</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support function tsx\"><span>toLowerCase</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span><span>)</span></span><span>&nbsp;</span><span class=\"keyword operator relational tsx\"><span>&gt;=</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>renderFilm</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ItemRenderer</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>Film</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span></span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>film</span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span class=\"meta parameter object-binding-pattern tsx\"><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>handleClick</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>modifiers</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control conditional tsx\"><span>if</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"keyword operator logical tsx\"><span>!</span></span><span class=\"variable other object tsx\"><span>modifiers</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>filtered</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"constant language null tsx\"><span>null</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>active</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>modifiers</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>active</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>key</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>film</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>title</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>label</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>film</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>year</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onClick</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>handleClick</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>film</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property dom tsx\"><span>title</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FilmSelect</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemPredicate</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>filterFilm</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemRenderer</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>renderFilm</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>items</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onItemSelect</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IItemRendererProps"
        },
        {
          "tag": "heading",
          "value": "Item list renderer",
          "level": 3,
          "route": "select/select-component.item-list-renderer"
        },
        "<p>If provided, the <code>itemListRenderer</code> prop will be called to render the contents of the dropdown menu. It has access to the items, the current query, and a <code>renderItem</code> callback for rendering a single item. A ref handler (<code>itemsParentRef</code>) is given as well; it should be attached to the parent element of the rendered menu items so that the currently selected item can be scrolled into view automatically.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>ItemListRenderer</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/select</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>renderMenu</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ItemListRenderer</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>Film</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span></span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"meta parameter object-binding-pattern tsx\"><span class=\"punctuation definition binding-pattern object tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>items</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>itemsParentRef</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>query</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>renderItem</span></span><span>&nbsp;</span><span class=\"punctuation definition binding-pattern object tsx\"><span>}</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>renderedItems</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>items</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>map</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>renderItem</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>filter</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta arrow tsx\"><span class=\"variable parameter tsx\"><span>item</span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"variable other readwrite tsx\"><span>item</span></span><span>&nbsp;</span><span class=\"keyword operator comparison tsx\"><span>!=</span></span><span>&nbsp;</span><span class=\"constant language null tsx\"><span>null</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta brace round tsx\"><span>(</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>ulRef</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>itemsParentRef</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>MenuItem</span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>disabled</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant language boolean true tsx\"><span>true</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>text</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"string template tsx\"><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span>Found&nbsp;</span><span class=\"meta template expression tsx\"><span class=\"punctuation definition template-expression begin tsx\"><span>${</span></span><span class=\"meta embedded line tsx\"><span class=\"variable other object tsx\"><span>renderedItems</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"support variable property tsx\"><span>length</span></span></span><span class=\"punctuation definition template-expression end tsx\"><span>}</span></span></span><span>&nbsp;items&nbsp;matching&nbsp;&quot;</span><span class=\"meta template expression tsx\"><span class=\"punctuation definition template-expression begin tsx\"><span>${</span></span><span class=\"meta embedded line tsx\"><span class=\"variable other readwrite tsx\"><span>query</span></span></span><span class=\"punctuation definition template-expression end tsx\"><span>}</span></span></span><span>&quot;</span><span class=\"punctuation definition string template end tsx\"><span>`</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>renderedItems</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Menu</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>FilmSelect</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemListRenderer</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>renderMenu</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemPredicate</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>filterFilm</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>itemRenderer</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>renderFilm</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>items</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onItemSelect</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IItemListRendererProps"
        }
      ],
      "contentsRaw": "@# Select\n\nUse `Select<T>` for choosing one item from a list. The component's children will be wrapped in a [`Popover`](#labs/popover) that contains the list and an optional `InputGroup` to filter it. Provide a predicate to customize the filtering algorithm. The value of a `Select<T>` (the currently chosen item) is uncontrolled: listen to changes with `onItemSelect`.\n\n<div class=\"bp3-callout bp3-intent-primary bp3-icon-info-sign\">\n    <h4 class=\"bp3-heading\">Disabling a Select</h4>\n    <p>Disabling the component requires setting the `disabled` prop to `true`\n    and separately disabling the component's children as appropriate (because `Select` accepts arbitrary children).</p>\n    <p>For example, `<Select ... disabled={true}><Button ... disabled={true} /></Select>`</p>\n</div>\n\n@reactExample SelectExample\n\n```tsx\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport * as Films from \"./films\";\n\n// Select<T> is a generic component to work with your data types.\n// In TypeScript, you must first obtain a non-generic reference:\nconst FilmSelect = Select.ofType<Films.Film>();\n\nReactDOM.render(\n    <FilmSelect\n        items={Films.items}\n        itemPredicate={Films.itemPredicate}\n        itemRenderer={Films.itemRenderer}\n        noResults={<MenuItem disabled={true} text=\"No results.\" />}\n        onItemSelect={...}\n    >\n        {/* children become the popover target; render value here */}\n        <Button text={Films.items[0].title} rightIcon=\"double-caret-vertical\" />\n    </FilmSelect>,\n    document.querySelector(\"#root\")\n);\n```\n\nIn TypeScript, `Select<T>` is a _generic component_ so you must define a local type that specifies `<T>`, the type of one item in `items`. The props on this local type will now operate on your data type (speak your language) so you can easily define handlers without transformation steps, but most props are required as a result. The static `Select.ofType<T>()` method is available to streamline this process. (Note that this has no effect on JavaScript usage: the `Select` export is a perfectly valid React component class.)\n\n@## Querying\n\nSupply a predicate to automatically query items based on the `InputGroup` value. Use `itemPredicate` to filter each item individually; this is great for lightweight searches. Use `itemListPredicate` to query the entire array in one go, and even reorder it, such as with [fuzz-aldrin-plus](https://github.com/jeancroy/fuzz-aldrin-plus). The array of filtered items is cached internally by `QueryList` state and only recomputed when `query` or `items`-related props change.\n\nOmitting both `itemPredicate` and `itemListPredicate` props will cause the component to always render all `items`. It will not hide the `InputGroup`; use the `filterable` prop for that. In this case, you can implement your own filtering and simply change the `items` prop.\n\nThe **@blueprintjs/select** package exports `ItemPredicate<T>` and `ItemListPredicate<T>` type aliases to simplify the process of implementing these functions.\nSee the code sample in [Item Renderer API](#select/select-component.item-renderer) below for usage.\n\n@### Non-ideal states\n\nIf the query returns no results or `items` is empty, then `noResults` will be rendered in place of the usual list. You also have the option to provide `initialContent`, which will render in place of the item list if the query is empty.\n\n@## Custom menu\n\nBy default, `Select` renders the displayed items in a [`Menu`](#core/components/menu). This behavior can be overridden by providing the `itemListRenderer` prop, giving you full control over the layout of the items. For example, you can group items under a common heading, or render large data sets using [react-virtualized](https://github.com/bvaughn/react-virtualized).\n\nNote that the non-ideal states of `noResults` and `initialContent` are specific to the default renderer. If you provide the `itemListRenderer` prop, these props will be ignored.\n\nSee the code sample in [Item List Renderer API](#select/select-component.item-list-renderer) below for usage.\n\n@## Controlled usage\n\nThe input value can be controlled with the `query` and `onQueryChange` props. _Do not use `inputProps` for this;_ the component ignores `inputProps.value` and `inputProps.onChange` in favor of `query` and `onQueryChange` (as noted in the prop documentation).\n\nThe focused item (for keyboard interactions) can be controlled with the `activeItem` and `onActiveItemChange` props.\n\n```tsx\n<FilmSelect\n    items={myFilter(ALL_ITEMS, this.state.myQuery)}\n    itemRenderer={...}\n    onItemSelect={...}\n    // controlled active item\n    activeItem={this.state.myActiveItem}\n    onActiveItemChange={this.handleActiveItemChange}\n    // controlled query\n    query={this.state.myQuery}\n    onQueryChange={this.handleQueryChange}\n/>\n```\n\nThis controlled usage allows you to implement all sorts of advanced behavior on\ntop of the basic `Select` interactions, such as windowed filtering for large\ndata sets.\n\n@## JavaScript API\n\n@interface ISelectProps\n\n@### Item renderer\n\n`Select`'s `itemRenderer` will be called for each item and receives the item and a props object containing data specific\nto rendering this item in this frame. The renderer is called for all items, so don't forget to respect\n`modifiers.filtered` to hide items that don't match the predicate. Also, don't forget to define a `key` for each item,\nor face React's console wrath!\n\n```tsx\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\nimport { ItemRenderer, ItemPredicate, Select } from \"@blueprintjs/select\";\n\nconst FilmSelect = Select.ofType<Film>();\n\nconst filterFilm: ItemPredicate<IFilm> = (query, film) => {\n    return film.title.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n};\n\nconst renderFilm: ItemRenderer<Film> = (film, { handleClick, modifiers }) => {\n    if (!modifiers.filtered) {\n        return null;\n    }\n    return (\n        <MenuItem\n            active={modifiers.active}\n            key={film.title}\n            label={film.year}\n            onClick={handleClick}\n            text={film.title}\n        />\n    );\n};\n\n<FilmSelect itemPredicate={filterFilm} itemRenderer={renderFilm} items={...} onItemSelect={...} />\n```\n\n@interface IItemRendererProps\n\n@### Item list renderer\n\nIf provided, the `itemListRenderer` prop will be called to render the contents of the dropdown menu. It has access to the items, the current query, and a `renderItem` callback for rendering a single item. A ref handler (`itemsParentRef`) is given as well; it should be attached to the parent element of the rendered menu items so that the currently selected item can be scrolled into view automatically.\n\n```tsx\nimport { ItemListRenderer } from \"@blueprintjs/select\";\n\nconst renderMenu: ItemListRenderer<Film> = ({ items, itemsParentRef, query, renderItem }) => {\n    const renderedItems = items.map(renderItem).filter(item => item != null);\n    return (\n        <Menu ulRef={itemsParentRef}>\n            <MenuItem\n                disabled={true}\n                text={`Found ${renderedItems.length} items matching \"${query}\"`}\n            />\n            {renderedItems}\n        </Menu>\n    );\n};\n\n<FilmSelect\n    itemListRenderer={renderMenu}\n    itemPredicate={filterFilm}\n    itemRenderer={renderFilm}\n    items={...}\n    onItemSelect={...}\n/>\n```\n\n@interface IItemListRendererProps",
      "metadata": {}
    },
    "suggest": {
      "reference": "suggest",
      "route": "select/suggest",
      "sourcePath": "packages/select/src/components/select/suggest.md",
      "title": "Suggest",
      "contents": [
        {
          "tag": "heading",
          "value": "Suggest",
          "level": 1,
          "route": "select/suggest"
        },
        "<p><code>Suggest</code> behaves similarly to <a href=\"#select/select-component\"><code>Select</code></a>, except it renders a text input as the <code>Popover</code> target instead of arbitrary children.</p>\n",
        {
          "tag": "reactExample",
          "value": "SuggestExample"
        },
        {
          "tag": "interface",
          "value": "ISuggestProps"
        },
        {
          "tag": "interface",
          "value": "ISelectItemRendererProps"
        }
      ],
      "contentsRaw": "@# Suggest\n\n`Suggest` behaves similarly to [`Select`](#select/select-component), except it renders a text input as the `Popover` target instead of arbitrary children.\n\n@reactExample SuggestExample\n\n@interface ISuggestProps\n\n@interface ISelectItemRendererProps",
      "metadata": {}
    },
    "select": {
      "reference": "select",
      "route": "select",
      "sourcePath": "packages/select/src/index.md",
      "title": "Select",
      "contents": [
        {
          "tag": "heading",
          "value": "Select",
          "level": 1,
          "route": "select"
        },
        "<p>The <strong>@blueprintjs/select</strong> NPM package provides React components related to selecting items from a list:</p>\n<ul>\n<li><p><a href=\"#select/select-component\"><code>Select</code></a> for selecting items in a list.</p>\n</li>\n<li><p><a href=\"#select/suggest\"><code>Suggest</code></a> for selecting items in a list, from a text input.</p>\n</li>\n<li><p><a href=\"#select/multi-select\"><code>MultiSelect</code></a> for selecting multiple items in a list.</p>\n</li>\n<li><p><a href=\"#select/omnibar\"><code>Omnibar</code></a>, a macOS spotlight-style typeahead component.</p>\n</li>\n<li><p><a href=\"#select/query-list\"><code>QueryList</code></a>, a higher-order component that provides interactions between a query string and a list of items.</p>\n</li>\n</ul>\n<p>Make sure to review the <a href=\"#blueprint/getting-started\">getting started docs for installation info</a>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@blueprintjs/select</span></span></div></pre>",
        {
          "tag": "page",
          "value": "select-component"
        },
        {
          "tag": "page",
          "value": "suggest"
        },
        {
          "tag": "page",
          "value": "multi-select"
        },
        {
          "tag": "page",
          "value": "omnibar"
        },
        {
          "tag": "page",
          "value": "query-list"
        }
      ],
      "contentsRaw": "\n@# Select\n\nThe **@blueprintjs/select** NPM package provides React components related to selecting items from a list:\n\n- [`Select`](#select/select-component) for selecting items in a list.\n\n- [`Suggest`](#select/suggest) for selecting items in a list, from a text input.\n\n- [`MultiSelect`](#select/multi-select) for selecting multiple items in a list.\n\n- [`Omnibar`](#select/omnibar), a macOS spotlight-style typeahead component.\n\n- [`QueryList`](#select/query-list), a higher-order component that provides interactions between a query string and a list of items.\n\nMake sure to review the [getting started docs for installation info](#blueprint/getting-started).\n\n```sh\nnpm install --save @blueprintjs/select\n```\n\n@page select-component\n@page suggest\n@page multi-select\n@page omnibar\n@page query-list",
      "metadata": {
        "reference": "select"
      }
    },
    "api": {
      "reference": "api",
      "route": "table/api",
      "sourcePath": "packages/table/src/docs/table-api.md",
      "title": "JavaScript API",
      "contents": [
        {
          "tag": "heading",
          "value": "JavaScript API",
          "level": 1,
          "route": "table/api"
        },
        "<p>The <code>Table</code>, <code>Column</code>, <code>Cell</code>, <code>ColumnHeaderCell</code>, <code>EditableName</code>, and <code>EditableCell</code>\ncomponents are available in the <strong>@blueprintjs/table</strong> package.</p>\n",
        {
          "tag": "heading",
          "value": "Table",
          "level": 2,
          "route": "table/api.table"
        },
        "<p>The top-level component of the table is <code>Table</code>. You must at least define the\nnumber of rows (<code>numRows</code> prop) as well as a set of <code>Column</code> children.</p>\n",
        {
          "tag": "interface",
          "value": "ITableProps"
        },
        {
          "tag": "heading",
          "value": "Instance methods",
          "level": 3,
          "route": "table/api.instance-methods"
        },
        "<ul>\n<li><code>resizeRowsByTallestCell(columnIndices?: number | number[]): void</code> &ndash; Resizes all rows in the\n  table to the height of the tallest visible cell in the specified columns. If no indices are\n  provided, defaults to using the tallest visible cell from all columns in view.</li>\n<li><p><code>resizeRowsByApproximateHeight(getCellText?: ICellMapper&lt;string&gt;, options?: IResizeRowsByApproximateHeightOptions)</code>\n  &ndash; <strong>Experimental!</strong> Resizes every row in the table to fit its\n  maximum-height cell content. Since rows in view are the only ones present in\n  the DOM, this method merely <em>approximates</em> the height of cell content based\n  on average letter width and line height.</p>\n<p>  This has two implications: (1) results are best when each cell contains plain\n  text with an internally consistent style, and (2) results may not be perfect.</p>\n<p>  Approximation parameters can be configured for the entire table or on a\n  per-cell basis. Default values are fine-tuned to work well with default\n  <code>Table</code> font styles. Here are the available options:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"storage type interface tsx\"><span>interface</span></span><span>&nbsp;</span><span class=\"entity name type interface tsx\"><span>IResizeRowsByApproximateHeightOptions</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"comment block documentation tsx\"><span class=\"punctuation definition comment tsx\"><span>/**</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;*&nbsp;Approximate&nbsp;width&nbsp;(in&nbsp;pixels)&nbsp;of&nbsp;an&nbsp;average&nbsp;character&nbsp;of&nbsp;text.</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>getApproximateCharWidth</span></span><span class=\"keyword operator optional tsx\"><span>?</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span><span>&nbsp;</span><span class=\"keyword operator type tsx\"><span>|</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ICellMapper</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"support type primitive tsx\"><span>number</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"comment block documentation tsx\"><span class=\"punctuation definition comment tsx\"><span>/**</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;*&nbsp;Approximate&nbsp;height&nbsp;(in&nbsp;pixels)&nbsp;of&nbsp;an&nbsp;average&nbsp;line&nbsp;of&nbsp;text.</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>getApproximateLineHeight</span></span><span class=\"keyword operator optional tsx\"><span>?</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span><span>&nbsp;</span><span class=\"keyword operator type tsx\"><span>|</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ICellMapper</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"support type primitive tsx\"><span>number</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"comment block documentation tsx\"><span class=\"punctuation definition comment tsx\"><span>/**</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;*&nbsp;Sum&nbsp;of&nbsp;horizontal&nbsp;paddings&nbsp;(in&nbsp;pixels)&nbsp;from&nbsp;the&nbsp;left&nbsp;__and__&nbsp;right&nbsp;sides</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;*&nbsp;of&nbsp;the&nbsp;cell.</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>getCellHorizontalPadding</span></span><span class=\"keyword operator optional tsx\"><span>?</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span><span>&nbsp;</span><span class=\"keyword operator type tsx\"><span>|</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ICellMapper</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"support type primitive tsx\"><span>number</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"comment block documentation tsx\"><span class=\"punctuation definition comment tsx\"><span>/**</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;*&nbsp;Number&nbsp;of&nbsp;extra&nbsp;lines&nbsp;to&nbsp;add&nbsp;in&nbsp;case&nbsp;the&nbsp;calculation&nbsp;is&nbsp;imperfect.</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"comment block documentation tsx\"><span>&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition comment tsx\"><span>*/</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>getNumBufferLines</span></span><span class=\"keyword operator optional tsx\"><span>?</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span><span>&nbsp;</span><span class=\"keyword operator type tsx\"><span>|</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ICellMapper</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"support type primitive tsx\"><span>number</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta interface tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre><p>  <code>ICellMapper</code> is just a function that takes a cell-coordinate and returns a generic type:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;&nbsp;</span><span class=\"meta type declaration tsx\"><span class=\"storage type type tsx\"><span>type</span></span><span>&nbsp;</span><span class=\"entity name type alias tsx\"><span>ICellMapper</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>T</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta type function tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>rowIndex</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span></span><span class=\"punctuation separator parameter tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable parameter tsx\"><span>columnIndex</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span></span><span>&nbsp;</span><span class=\"meta type function return tsx\"><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>T</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre></li>\n<li><p><code>scrollToRegion(region: IRegion): void</code> &ndash; Scrolls the table to the target <a href=\"#table/api.region\">region</a> in a\n fashion appropriate to the target region&#39;s cardinality:</p>\n<ul>\n<li><code>CELLS</code>: Scroll the top-left cell in the target region to the top-left corner of the viewport.</li>\n<li><code>FULL_ROWS</code>: Scroll the top-most row in the target region to the top of the viewport.</li>\n<li><code>FULL_COLUMNS</code>: Scroll the left-most column in the target region to the left side of the viewport.</li>\n<li><code>FULL_TABLE</code>: Scroll the top-left cell in the table to the top-left corner of the viewport.</li>\n</ul>\n<p>If there are active frozen rows and/or columns, the target region will be positioned in the top-left\ncorner of the non-frozen area (unless the target region itself is in the frozen area).</p>\n<p>If the target region is close to the bottom-right corner of the table, this function will simply\nscroll the target region as close to the top-left as possible until the bottom-right corner is\nreached.</p>\n</li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Column",
          "level": 2,
          "route": "table/api.column"
        },
        "<p><code>Column</code> contains props for defining how the header and cells of that column\nare rendered.</p>\n<p>The table is designed to best support columnar data, meaning data where each column\nhas only one type of value (for example, strings, dates, currency amounts).\nBecause of this, the table&#39;s children are a list of <code>Column</code> components.</p>\n<p>Use the <code>rowHeaderCellRenderer</code> prop of <code>Table</code> to define row headers.</p>\n",
        {
          "tag": "interface",
          "value": "IColumnProps"
        },
        {
          "tag": "heading",
          "value": "Cell",
          "level": 2,
          "route": "table/api.cell"
        },
        "<p>The <code>Cell</code> component renders content in the table body. <code>Cell</code>s should be\nreturned from the <code>cellRenderer</code> method of each <code>Column</code>.</p>\n",
        {
          "tag": "interface",
          "value": "ICellProps"
        },
        {
          "tag": "heading",
          "value": "ColumnHeaderCell",
          "level": 2,
          "route": "table/api.columnheadercell"
        },
        "<p>Customize how each column header is displayed.</p>\n<p>The <code>columnHeaderCellRenderer</code> method on each <code>Column</code> should return a\n<code>ColumnHeaderCell</code>. Children of a <code>ColumnHeaderCell</code> are rendered below\nthe name of the column. If you want to override the render behavior of the\nname, you can supply a <code>nameRenderer</code> prop to the <code>ColumnHeaderCell</code>.</p>\n",
        {
          "tag": "interface",
          "value": "IColumnHeaderCellProps"
        },
        {
          "tag": "heading",
          "value": "EditableName",
          "level": 2,
          "route": "table/api.editablename"
        },
        "<p>Return a <code>EditableName</code> component from the <code>nameRenderer</code> prop on a\n<code>ColumnHeaderCell</code> to enable click-to-edit functionality in the column\nheader.</p>\n",
        {
          "tag": "interface",
          "value": "IEditableNameProps"
        },
        {
          "tag": "heading",
          "value": "EditableCell",
          "level": 2,
          "route": "table/api.editablecell"
        },
        "<p>Return a <code>EditableCell</code> component from the <code>cellRenderer</code> prop on a\n<code>Column</code> to enable double-click-to-edit functionality in the table body.</p>\n",
        {
          "tag": "interface",
          "value": "IEditableCellProps"
        },
        {
          "tag": "heading",
          "value": "Region",
          "level": 2,
          "route": "table/api.region"
        },
        "<p>A region is a rectangular group of cells in the table.</p>\n<p>Regions are typically used to describe boundaries for selections (via the\n<code>selectedRegions</code> prop) and custom overlays (via the <code>styledRegionGroups</code> prop).\nYou may also wish to scroll directly to a region in the table via the\n<a href=\"#table/api.instance-methods\"><code>Table.scrollToRegion</code></a> instance method.</p>\n<p>There are four different types of regions:</p>\n<ul>\n<li><strong>Cell region:</strong> contains a finite, rectangular group of table cells</li>\n<li><strong>Row region:</strong> represents all cells within one or more consecutive rows</li>\n<li><strong>Column region:</strong> represents all cells within one or more consecutive columns</li>\n<li><strong>Table region:</strong> represents all cells in the table</li>\n</ul>\n<p>Regions are defined in code according to the <code>IRegion</code> interface:</p>\n",
        {
          "tag": "interface",
          "value": "IRegion"
        },
        "<p>You can construct region objects manually according to this interface, but we\nrecommend using our exported <strong>factory methods</strong> to help you construct the\nappropriate schema for your desired region type:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Regions</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/table</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>singleCellRegion</span></span><span>&nbsp;&nbsp;&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>cell</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;{&nbsp;rows:&nbsp;[0,&nbsp;0],&nbsp;cols:&nbsp;[0,&nbsp;0]&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>singleColumnRegion</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>column</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;{&nbsp;rows:&nbsp;null,&nbsp;cols:&nbsp;[0,&nbsp;0]&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>singleRowRegion</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>row</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;{&nbsp;rows:&nbsp;[0,&nbsp;0],&nbsp;cols:&nbsp;null&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>multiCellRegion</span></span><span>&nbsp;&nbsp;&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>cell</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>2</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>2</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;{&nbsp;rows:&nbsp;[0,&nbsp;2],&nbsp;cols:&nbsp;[0,&nbsp;2]&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>multiColumnRegion</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>column</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>2</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;{&nbsp;rows:&nbsp;null,&nbsp;cols:&nbsp;[0,&nbsp;2]&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>multiRowRegion</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>row</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>2</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;{&nbsp;rows:&nbsp;[0,&nbsp;2],&nbsp;cols:&nbsp;null&nbsp;}</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>tableRegion</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>table</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;{&nbsp;rows:&nbsp;null,&nbsp;cols:&nbsp;null&nbsp;}</span></span></span></div></pre><p>The <strong>@blueprintjs/table</strong> package also exports a <code>RegionCardinality</code>\nenumeration to describe the various region types in code:</p>\n<ul>\n<li><code>RegionCardinality.CELLS</code>: describes a cell region</li>\n<li><code>RegionCardinality.FULL_ROWS</code>: describes a row region</li>\n<li><code>RegionCardinality.FULL_COLUMNS</code>: describes a column region</li>\n<li><code>RegionCardinality.FULL_TABLE</code>: describes a table region</li>\n</ul>\n<p>This enumeration is primarily used with the <code>selectionModes</code> prop to inform the\n<code>Table</code> which kinds of regions are selectable:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>RegionCardinality</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/table</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;disables&nbsp;selection&nbsp;of&nbsp;all&nbsp;region&nbsp;types</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span><span>]</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;enables&nbsp;selection&nbsp;of&nbsp;cell&nbsp;regions&nbsp;only</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other object tsx\"><span>RegionCardinality</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>CELLS</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;enables&nbsp;selection&nbsp;of&nbsp;cell&nbsp;and&nbsp;row&nbsp;regions&nbsp;only</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other object tsx\"><span>RegionCardinality</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>CELLS</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other object tsx\"><span>RegionCardinality</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>FULL_ROWS</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;enables&nbsp;selection&nbsp;of&nbsp;the&nbsp;full&nbsp;table&nbsp;only</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"variable other object tsx\"><span>RegionCardinality</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>FULL_TABLE</span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>You may also use the exported <code>SelectionModes</code> enumeration to express common\nselection-mode combinations more concisely:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>SelectionModes</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/table</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>SelectionModes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>ALL</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>SelectionModes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>COLUMNS_AND_CELLS</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>SelectionModes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>COLUMNS_ONLY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>SelectionModes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>NONE</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>SelectionModes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>ROWS_AND_CELLS</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>selectionModes</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other object tsx\"><span>SelectionModes</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other constant property tsx\"><span>ROWS_ONLY</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre><p>Every region object has a well-defined cardinality. If necessary, you can\ndetermine the cardinality of any region using the exported\n<code>Regions.getRegionCardinality</code> function:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Regions</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/table</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>cardinalities</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getRegionCardinality</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>cell</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"meta brace round tsx\"><span>)</span><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RegionCardinality.CELLS</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getRegionCardinality</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>row</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"meta brace round tsx\"><span>)</span><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RegionCardinality.FULL_ROWS</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getRegionCardinality</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>column</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>0</span></span><span class=\"meta brace round tsx\"><span>)</span><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RegionCardinality.FULL_COLUMNS</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>getRegionCardinality</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta function-call tsx\"><span class=\"variable other object tsx\"><span>Regions</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>table</span></span></span><span class=\"meta brace round tsx\"><span>(</span><span>)</span><span>)</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"comment line double-slash tsx\"><span class=\"punctuation definition comment tsx\"><span>//</span></span><span>&nbsp;RegionCardinality.FULL_TABLE</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>]</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div></pre>",
        {
          "tag": "heading",
          "value": "TruncatedFormat",
          "level": 2,
          "route": "table/api.truncatedformat"
        },
        "<p>Wrap your cell contents with a <code>TruncatedFormat</code> component like so:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>content</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>A&nbsp;very&nbsp;long&nbsp;string...</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Cell</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>TruncatedFormat</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>content</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>TruncatedFormat</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Cell</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "ITruncatedFormatProps"
        },
        {
          "tag": "heading",
          "value": "JSONFormat",
          "level": 2,
          "route": "table/api.jsonformat"
        },
        "<p>Wrap your JavaScript object cell contents with a <code>JSONFormat</code> component like so:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx variable other readwrite tsx\"><span>content</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>any</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>javascript&nbsp;variable</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>even</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"constant language null tsx\"><span>null</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>is</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>okay</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>too</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Cell</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>JSONFormat</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>content</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>JSONFormat</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Cell</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "IJSONFormatProps"
        }
      ],
      "contentsRaw": "\n@# JavaScript API\n\nThe `Table`, `Column`, `Cell`, `ColumnHeaderCell`, `EditableName`, and `EditableCell`\ncomponents are available in the __@blueprintjs/table__ package.\n\n@## Table\n\nThe top-level component of the table is `Table`. You must at least define the\nnumber of rows (`numRows` prop) as well as a set of `Column` children.\n\n@interface ITableProps\n\n@### Instance methods\n\n- `resizeRowsByTallestCell(columnIndices?: number | number[]): void` &ndash; Resizes all rows in the\n    table to the height of the tallest visible cell in the specified columns. If no indices are\n    provided, defaults to using the tallest visible cell from all columns in view.\n- `resizeRowsByApproximateHeight(getCellText?: ICellMapper<string>, options?: IResizeRowsByApproximateHeightOptions)`\n    &ndash; __Experimental!__ Resizes every row in the table to fit its\n    maximum-height cell content. Since rows in view are the only ones present in\n    the DOM, this method merely _approximates_ the height of cell content based\n    on average letter width and line height.\n\n    This has two implications: (1) results are best when each cell contains plain\n    text with an internally consistent style, and (2) results may not be perfect.\n\n    Approximation parameters can be configured for the entire table or on a\n    per-cell basis. Default values are fine-tuned to work well with default\n    `Table` font styles. Here are the available options:\n\n    ```tsx\ninterface IResizeRowsByApproximateHeightOptions {\n    /**\n     * Approximate width (in pixels) of an average character of text.\n     */\n    getApproximateCharWidth?: number | ICellMapper<number>;\n\n    /**\n     * Approximate height (in pixels) of an average line of text.\n     */\n    getApproximateLineHeight?: number | ICellMapper<number>;\n\n    /**\n     * Sum of horizontal paddings (in pixels) from the left __and__ right sides\n     * of the cell.\n     */\n    getCellHorizontalPadding?: number | ICellMapper<number>;\n\n    /**\n     * Number of extra lines to add in case the calculation is imperfect.\n     */\n    getNumBufferLines?: number | ICellMapper<number>;\n}\n    ```\n\n    `ICellMapper` is just a function that takes a cell-coordinate and returns a generic type:\n\n    ```tsx\n    type ICellMapper<T> = (rowIndex: number, columnIndex: number) => T;\n    ```\n\n- `scrollToRegion(region: IRegion): void` &ndash; Scrolls the table to the target [region](#table/api.region) in a\n   fashion appropriate to the target region's cardinality:\n    - `CELLS`: Scroll the top-left cell in the target region to the top-left corner of the viewport.\n    - `FULL_ROWS`: Scroll the top-most row in the target region to the top of the viewport.\n    - `FULL_COLUMNS`: Scroll the left-most column in the target region to the left side of the viewport.\n    - `FULL_TABLE`: Scroll the top-left cell in the table to the top-left corner of the viewport.\n\n  If there are active frozen rows and/or columns, the target region will be positioned in the top-left\n  corner of the non-frozen area (unless the target region itself is in the frozen area).\n\n  If the target region is close to the bottom-right corner of the table, this function will simply\n  scroll the target region as close to the top-left as possible until the bottom-right corner is\n  reached.\n\n@## Column\n\n`Column` contains props for defining how the header and cells of that column\nare rendered.\n\nThe table is designed to best support columnar data, meaning data where each column\nhas only one type of value (for example, strings, dates, currency amounts).\nBecause of this, the table's children are a list of `Column` components.\n\nUse the `rowHeaderCellRenderer` prop of `Table` to define row headers.\n\n@interface IColumnProps\n\n@## Cell\n\nThe `Cell` component renders content in the table body. `Cell`s should be\nreturned from the `cellRenderer` method of each `Column`.\n\n@interface ICellProps\n\n@## ColumnHeaderCell\n\nCustomize how each column header is displayed.\n\nThe `columnHeaderCellRenderer` method on each `Column` should return a\n`ColumnHeaderCell`. Children of a `ColumnHeaderCell` are rendered below\nthe name of the column. If you want to override the render behavior of the\nname, you can supply a `nameRenderer` prop to the `ColumnHeaderCell`.\n\n@interface IColumnHeaderCellProps\n\n@## EditableName\n\nReturn a `EditableName` component from the `nameRenderer` prop on a\n`ColumnHeaderCell` to enable click-to-edit functionality in the column\nheader.\n\n@interface IEditableNameProps\n\n@## EditableCell\n\nReturn a `EditableCell` component from the `cellRenderer` prop on a\n`Column` to enable double-click-to-edit functionality in the table body.\n\n@interface IEditableCellProps\n\n@## Region\n\nA region is a rectangular group of cells in the table.\n\nRegions are typically used to describe boundaries for selections (via the\n`selectedRegions` prop) and custom overlays (via the `styledRegionGroups` prop).\nYou may also wish to scroll directly to a region in the table via the\n[`Table.scrollToRegion`](#table/api.instance-methods) instance method.\n\nThere are four different types of regions:\n- __Cell region:__ contains a finite, rectangular group of table cells\n- __Row region:__ represents all cells within one or more consecutive rows\n- __Column region:__ represents all cells within one or more consecutive columns\n- __Table region:__ represents all cells in the table\n\nRegions are defined in code according to the `IRegion` interface:\n\n@interface IRegion\n\nYou can construct region objects manually according to this interface, but we\nrecommend using our exported __factory methods__ to help you construct the\nappropriate schema for your desired region type:\n\n```tsx\nimport { Regions } from \"@blueprintjs/table\";\n\nconst singleCellRegion   = Regions.cell(0, 0); // { rows: [0, 0], cols: [0, 0] }\nconst singleColumnRegion = Regions.column(0);  // { rows: null, cols: [0, 0] }\nconst singleRowRegion    = Regions.row(0);     // { rows: [0, 0], cols: null }\n\nconst multiCellRegion   = Regions.cell(0, 0, 2, 2); // { rows: [0, 2], cols: [0, 2] }\nconst multiColumnRegion = Regions.column(0, 2);     // { rows: null, cols: [0, 2] }\nconst multiRowRegion    = Regions.row(0, 2);        // { rows: [0, 2], cols: null }\n\nconst tableRegion = Regions.table(); // { rows: null, cols: null }\n```\n\nThe __@blueprintjs/table__ package also exports a `RegionCardinality`\nenumeration to describe the various region types in code:\n- `RegionCardinality.CELLS`: describes a cell region\n- `RegionCardinality.FULL_ROWS`: describes a row region\n- `RegionCardinality.FULL_COLUMNS`: describes a column region\n- `RegionCardinality.FULL_TABLE`: describes a table region\n\nThis enumeration is primarily used with the `selectionModes` prop to inform the\n`Table` which kinds of regions are selectable:\n\n```tsx\nimport { RegionCardinality } from \"@blueprintjs/table\";\n\n// disables selection of all region types\n<Table selectionModes={[]} />\n\n// enables selection of cell regions only\n<Table selectionModes={[RegionCardinality.CELLS]} />\n\n// enables selection of cell and row regions only\n<Table selectionModes={[RegionCardinality.CELLS, RegionCardinality.FULL_ROWS]} />\n\n// enables selection of the full table only\n<Table selectionModes={[RegionCardinality.FULL_TABLE]} />\n```\n\nYou may also use the exported `SelectionModes` enumeration to express common\nselection-mode combinations more concisely:\n\n```tsx\nimport { SelectionModes } from \"@blueprintjs/table\";\n\n<Table selectionModes={SelectionModes.ALL} />\n<Table selectionModes={SelectionModes.COLUMNS_AND_CELLS} />\n<Table selectionModes={SelectionModes.COLUMNS_ONLY} />\n<Table selectionModes={SelectionModes.NONE} />\n<Table selectionModes={SelectionModes.ROWS_AND_CELLS} />\n<Table selectionModes={SelectionModes.ROWS_ONLY} />\n```\n\nEvery region object has a well-defined cardinality. If necessary, you can\ndetermine the cardinality of any region using the exported\n`Regions.getRegionCardinality` function:\n\n```tsx\nimport { Regions } from \"@blueprintjs/table\";\n\nconst cardinalities = [\n    Regions.getRegionCardinality(Regions.cell(0, 0)), // RegionCardinality.CELLS\n    Regions.getRegionCardinality(Regions.row(0)),     // RegionCardinality.FULL_ROWS\n    Regions.getRegionCardinality(Regions.column(0)),  // RegionCardinality.FULL_COLUMNS\n    Regions.getRegionCardinality(Regions.table()),    // RegionCardinality.FULL_TABLE\n];\n```\n\n\n@## TruncatedFormat\n\nWrap your cell contents with a `TruncatedFormat` component like so:\n\n```tsx\nconst content = \"A very long string...\";\nreturn <Cell><TruncatedFormat>{content}</TruncatedFormat></Cell>\n```\n\n@interface ITruncatedFormatProps\n\n@## JSONFormat\n\nWrap your JavaScript object cell contents with a `JSONFormat` component like so:\n\n```tsx\nconst content = { any: \"javascript variable\", even: [null, \"is\", \"okay\", \"too\"] };\nreturn <Cell><JSONFormat>{content}</JSONFormat></Cell>\n```\n\n@interface IJSONFormatProps",
      "metadata": {
        "reference": "api"
      }
    },
    "features": {
      "reference": "features",
      "route": "table/features",
      "sourcePath": "packages/table/src/docs/table-features.md",
      "title": "Table features",
      "contents": [
        {
          "tag": "heading",
          "value": "Table features",
          "level": 1,
          "route": "table/features"
        },
        {
          "tag": "heading",
          "value": "Sorting",
          "level": 2,
          "route": "table/features.sorting"
        },
        "<p>Because the table is <strong>data-agnostic</strong>, you can display complex data in the\ntable and perform arbitrary operations on it.</p>\n<p>For example, this data set of Sumo tournaments in 2015 contains rankings and\nwin-tie-loss results for each competing rikishi (wrestler). For each column\ntype, we define a different set of sort operations.</p>\n<p>In the table below, try:</p>\n<ul>\n<li>Sorting with the menu in each column header</li>\n<li>Selecting cells and copying with the right-click context menu</li>\n</ul>\n",
        {
          "tag": "reactExample",
          "value": "TableSortableExample"
        },
        {
          "tag": "heading",
          "value": "Editing",
          "level": 2,
          "route": "table/features.editing"
        },
        "<p>To make your table editable, use the <code>EditableCell</code> and\n<code>EditableName</code> components to create editable table cells and column names.</p>\n<p>To further extend the interactivity of the column headers, you can\nadd children components to each <code>ColumnHeaderCell</code> defined in the\n<code>columnHeaderCellRenderer</code> prop of <code>Column</code>.</p>\n<p>The following example renders a table with editable column names (single\nclick), editable table cells (double click), and selectable column types. In\nthis example, the editable values are validated against an alpha character-only\nregular expression (<code>[a-zA-Z]</code>). If the content is invalid, a\n<code>Intent.DANGER</code> style is applied to the cell.</p>\n",
        {
          "tag": "reactExample",
          "value": "TableEditableExample"
        },
        {
          "tag": "heading",
          "value": "Reordering",
          "level": 2,
          "route": "table/features.reordering"
        },
        "<p>The table supports drag-reordering of columns and rows via the <code>enableColumnReordering</code> and <code>enableRowReordering</code>\nprops, respectively.</p>\n<h3 id=\"reordering-columns\">Reordering columns</h3>\n<p>When <code>enableColumnReordering={true}</code>, a drag handle will appear in the column header (or in the\ninteraction bar, if <code>enableColumnInteractionBar={true}</code>).</p>\n<h4 id=\"single-column\">Single column</h4>\n<p>To reorder a single column, click and drag the desired column&#39;s drag handle to the left or right,\nthen release. This will work whether or not column selection is enabled.</p>\n<h4 id=\"multiple-columns\">Multiple columns</h4>\n<p>To allow reordering of multiple contiguous columns at once, first set the following additional\nprops:</p>\n<ul>\n<li><code>enableMultipleSelection={true}</code></li>\n<li><code>selectionModes={[RegionCardinality.FULL_COLUMNS, ...]}</code></li>\n</ul>\n<p>Then drag-select the desired columns into a single selection, and grab any selected column&#39;s drag\nhandle to reorder the entire selected block.</p>\n<h4 id=\"edge-cases\">Edge cases</h4>\n<p>With disjoint column selections (specified via <kbd>Cmd</kbd> or <kbd>Ctrl</kbd> + click),\nonly the selection containing the target drag handle will be reordered. All other\nselections will be cleared afterward.</p>\n<p>Reordering a column contained in two overlapping selections will currently result in undefined\nbehavior.</p>\n<h3 id=\"reordering-rows\">Reordering rows</h3>\n<p>Rows do not have a drag handle, so they must be selected before reordering. To reorder a selection\nof one or more rows, simply click and drag anywhere in a selected row header, then release. Note\nthat the following props must be set for row reordering to work:</p>\n<ul>\n<li><code>enableRowHeader={true}</code></li>\n<li><code>enableRowReordering={true}</code></li>\n<li><code>selectionModes={[RegionCardinality.FULL_ROWS, ...]}</code></li>\n<li><code>enableMultipleSelection={true}</code> (to optionally enable multi-row reordering)</li>\n</ul>\n<h3 id=\"example\">Example</h3>\n",
        {
          "tag": "reactExample",
          "value": "TableReorderableExample"
        },
        {
          "tag": "heading",
          "value": "Loading states",
          "level": 2,
          "route": "table/features.loading-states"
        },
        "<p>When fetching or updating data, it may be desirable to show a loading state. The table components\nprovide fine-grain loading control of loading row headers, column headers, or individual cells.\nSeveral table components expose a <code>loading</code> or <code>loadingOptions</code> prop, but loading-related rendering\nis computed with components lower in the hierarchy taking priority. For example, a cell with\n<code>loading</code> set to <code>false</code> will never render its loading state even if the <code>Column</code> component to which\nit belongs has a <code>loadingOptions</code> value of <code>[ ColumnLoadingOption.CELLS ]</code>. The following examples\ndisplay a table of the largest potentially hazardous asteroid (based on absolute magnitude)\ndiscovered in a given year.</p>\n",
        {
          "tag": "heading",
          "value": "Table loading states",
          "level": 3,
          "route": "table/features.table-loading-states"
        },
        "<p><code>Table</code> exposes a <code>loadingOptions</code> prop that allows you to control the loading state behavior of all\ncolumn header, row header, and body cells. Try toggling the different options.</p>\n",
        {
          "tag": "reactExample",
          "value": "TableLoadingExample"
        },
        {
          "tag": "heading",
          "value": "Column loading states",
          "level": 3,
          "route": "table/features.column-loading-states"
        },
        "<p><code>Column</code> exposes a <code>loadingOptions</code> prop that allows you to control the loading state behavior of an\nindividual column&#39;s header and body cells. Try selecting a different column in the dropdown below.</p>\n",
        {
          "tag": "reactExample",
          "value": "ColumnLoadingExample"
        },
        {
          "tag": "heading",
          "value": "Cells",
          "level": 3,
          "route": "table/features.cells"
        },
        "<p><code>Cell</code>, <code>EditableCell</code>, <code>ColumnHeaderCell</code>, and <code>RowHeaderCell</code> expose a <code>loading</code> prop for granular\ncontrol of which cells should show a loading state. Try selecting a different preset loading\nconfiguration.</p>\n",
        {
          "tag": "reactExample",
          "value": "CellLoadingExample"
        },
        {
          "tag": "heading",
          "value": "Formatting",
          "level": 2,
          "route": "table/features.formatting"
        },
        "<p>To display long strings or native JavaScript objects, we provide\n<code>&lt;TruncatedFormat&gt;</code> and <code>&lt;JSONFormat&gt;</code> components, which are designed to be used\nwithin a <code>&lt;Cell&gt;</code>.</p>\n<p>Below is a table of timezones including the local time when this page was\nrendered. It uses a <code>&lt;TruncatedFormat&gt;</code> component to show the long date string\nand a <code>&lt;JSONFormat&gt;</code> component to show the timezone info object.</p>\n",
        {
          "tag": "reactExample",
          "value": "TableFormatsExample"
        },
        {
          "tag": "heading",
          "value": "Freezing",
          "level": 2,
          "route": "table/features.freezing"
        },
        "<p>The table supports column and row freezing via the <code>numFrozenColumns</code> and <code>numFrozenRows</code> props,\nrespectively. Passing <code>numFrozenColumns={n}</code> will freeze the <code>n</code> leftmost columns in place, while\nall other columns remain scrollable. Likewise, passing <code>numFrozenRows={m}</code> will freeze the <code>m</code>\ntopmost rows in place, while all other rows remain scrollable.</p>\n<p>Here&#39;s an example of a table with 1 frozen columns and 2 frozen rows:</p>\n",
        {
          "tag": "reactExample",
          "value": "TableFreezingExample"
        }
      ],
      "contentsRaw": "\n@# Table features\n\n@## Sorting\n\nBecause the table is **data-agnostic**, you can display complex data in the\ntable and perform arbitrary operations on it.\n\nFor example, this data set of Sumo tournaments in 2015 contains rankings and\nwin-tie-loss results for each competing rikishi (wrestler). For each column\ntype, we define a different set of sort operations.\n\nIn the table below, try:\n* Sorting with the menu in each column header\n* Selecting cells and copying with the right-click context menu\n\n@reactExample TableSortableExample\n\n@## Editing\n\nTo make your table editable, use the `EditableCell` and\n`EditableName` components to create editable table cells and column names.\n\nTo further extend the interactivity of the column headers, you can\nadd children components to each `ColumnHeaderCell` defined in the\n`columnHeaderCellRenderer` prop of `Column`.\n\nThe following example renders a table with editable column names (single\nclick), editable table cells (double click), and selectable column types. In\nthis example, the editable values are validated against an alpha character-only\nregular expression (`[a-zA-Z]`). If the content is invalid, a\n`Intent.DANGER` style is applied to the cell.\n\n@reactExample TableEditableExample\n\n@## Reordering\n\nThe table supports drag-reordering of columns and rows via the `enableColumnReordering` and `enableRowReordering`\nprops, respectively.\n\n### Reordering columns\n\nWhen `enableColumnReordering={true}`, a drag handle will appear in the column header (or in the\ninteraction bar, if `enableColumnInteractionBar={true}`).\n\n#### Single column\n\nTo reorder a single column, click and drag the desired column's drag handle to the left or right,\nthen release. This will work whether or not column selection is enabled.\n\n#### Multiple columns\n\nTo allow reordering of multiple contiguous columns at once, first set the following additional\nprops:\n\n- `enableMultipleSelection={true}`\n- `selectionModes={[RegionCardinality.FULL_COLUMNS, ...]}`\n\nThen drag-select the desired columns into a single selection, and grab any selected column's drag\nhandle to reorder the entire selected block.\n\n#### Edge cases\n\nWith disjoint column selections (specified via <kbd>Cmd</kbd> or <kbd>Ctrl</kbd> + click),\nonly the selection containing the target drag handle will be reordered. All other\nselections will be cleared afterward.\n\nReordering a column contained in two overlapping selections will currently result in undefined\nbehavior.\n\n### Reordering rows\n\nRows do not have a drag handle, so they must be selected before reordering. To reorder a selection\nof one or more rows, simply click and drag anywhere in a selected row header, then release. Note\nthat the following props must be set for row reordering to work:\n\n- `enableRowHeader={true}`\n- `enableRowReordering={true}`\n- `selectionModes={[RegionCardinality.FULL_ROWS, ...]}`\n- `enableMultipleSelection={true}` (to optionally enable multi-row reordering)\n\n### Example\n\n@reactExample TableReorderableExample\n\n@## Loading states\n\nWhen fetching or updating data, it may be desirable to show a loading state. The table components\nprovide fine-grain loading control of loading row headers, column headers, or individual cells.\nSeveral table components expose a `loading` or `loadingOptions` prop, but loading-related rendering\nis computed with components lower in the hierarchy taking priority. For example, a cell with\n`loading` set to `false` will never render its loading state even if the `Column` component to which\nit belongs has a `loadingOptions` value of `[ ColumnLoadingOption.CELLS ]`. The following examples\ndisplay a table of the largest potentially hazardous asteroid (based on absolute magnitude)\ndiscovered in a given year.\n\n@### Table loading states\n\n`Table` exposes a `loadingOptions` prop that allows you to control the loading state behavior of all\ncolumn header, row header, and body cells. Try toggling the different options.\n\n@reactExample TableLoadingExample\n\n@### Column loading states\n\n`Column` exposes a `loadingOptions` prop that allows you to control the loading state behavior of an\nindividual column's header and body cells. Try selecting a different column in the dropdown below.\n\n@reactExample ColumnLoadingExample\n\n@### Cells\n\n`Cell`, `EditableCell`, `ColumnHeaderCell`, and `RowHeaderCell` expose a `loading` prop for granular\ncontrol of which cells should show a loading state. Try selecting a different preset loading\nconfiguration.\n\n@reactExample CellLoadingExample\n\n@## Formatting\n\nTo display long strings or native JavaScript objects, we provide\n`<TruncatedFormat>` and `<JSONFormat>` components, which are designed to be used\nwithin a `<Cell>`.\n\nBelow is a table of timezones including the local time when this page was\nrendered. It uses a `<TruncatedFormat>` component to show the long date string\nand a `<JSONFormat>` component to show the timezone info object.\n\n@reactExample TableFormatsExample\n\n@## Freezing\n\nThe table supports column and row freezing via the `numFrozenColumns` and `numFrozenRows` props,\nrespectively. Passing `numFrozenColumns={n}` will freeze the `n` leftmost columns in place, while\nall other columns remain scrollable. Likewise, passing `numFrozenRows={m}` will freeze the `m`\ntopmost rows in place, while all other rows remain scrollable.\n\nHere's an example of a table with 1 frozen columns and 2 frozen rows:\n\n@reactExample TableFreezingExample",
      "metadata": {
        "reference": "features"
      }
    },
    "table": {
      "reference": "table",
      "route": "table",
      "sourcePath": "packages/table/src/docs/table.md",
      "title": "Table",
      "contents": [
        {
          "tag": "heading",
          "value": "Table",
          "level": 1,
          "route": "table"
        },
        "<p>A highly interactive React <code>Table</code> component.</p>\n<div class=\"bp3-callout bp3-large bp3-intent-primary bp3-icon-info-sign\">\n  If you are looking instead for the Blueprint-styled HTML <code>&lt;table&gt;</code>, see\n  <a href=\"#core/components/html-table\"><code>HTMLTable</code> in <strong>@blueprintjs/core</strong></a>.\n</div>\n\n<p>Make sure to review the <a href=\"#blueprint/getting-started\">getting started docs for installation info</a>.\nDo not forget to include <code>blueprint-table.css</code> on your page.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@blueprintjs/table</span></span></div></pre><h3 id=\"features\">Features</h3>\n<ul>\n<li>High-scale, data-agnostic</li>\n<li>Customizable cell and header rendering</li>\n<li>Virtualized viewport rendering</li>\n<li>Selectable rows, columns and cells</li>\n<li>Resizable rows and columns</li>\n<li>Editable headers and cells</li>\n<li>Integrated header and context menus</li>\n</ul>\n",
        {
          "tag": "heading",
          "value": "Basic usage",
          "level": 2,
          "route": "table.basic-usage"
        },
        "<p>To create a table, you must define the rows and columns. Add children to the <code>Table</code> to create columns,\nand change the <code>numRows</code> prop on the <code>Table</code> to set the number of rows.</p>\n<p>For example, this code creates an empty table with three columns and five rows:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Column</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Table</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/table</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>numRows</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>5</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Column</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Column</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Column</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre><p>The table is <strong>data-agnostic</strong>. It doesn&#39;t store any data internally, so it is up to you to bind the table to your data.</p>\n<p>You can specify how the data is displayed by defining the <code>cellRenderer</code> prop on each <code>Column</code> component.\nThis is useful when working with typed columnar data, like database results.</p>\n<p>For example, this creates a table that renders dollar values:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Cell</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Column</span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>Table</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/table</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"storage type tsx\"><span>const</span></span><span>&nbsp;</span><span class=\"meta var-single-variable expr tsx\"><span class=\"meta definition variable tsx entity name function tsx\"><span>cellRenderer</span></span><span>&nbsp;</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>rowIndex</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>number</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag without-attributes tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Cell</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span><span class=\"meta jsx children tsx\"><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"string template tsx\"><span class=\"punctuation definition string template begin tsx\"><span>`</span></span><span>$</span><span class=\"meta template expression tsx\"><span class=\"punctuation definition template-expression begin tsx\"><span>${</span></span><span class=\"meta embedded line tsx\"><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"variable other readwrite tsx\"><span>rowIndex</span></span><span>&nbsp;</span><span class=\"keyword operator arithmetic tsx\"><span>*</span></span><span>&nbsp;</span><span class=\"constant numeric decimal tsx\"><span>10</span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"meta function-call tsx\"><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>toFixed</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"constant numeric decimal tsx\"><span>2</span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation definition template-expression end tsx\"><span>}</span></span></span><span class=\"punctuation definition string template end tsx\"><span>`</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Cell</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta var expr tsx\"><span class=\"meta arrow tsx\"><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>numRows</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"constant numeric decimal tsx\"><span>10</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta jsx children tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Column</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>name</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>Dollars</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>cellRenderer</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable other readwrite tsx\"><span>cellRenderer</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;/</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>Table</span></span></span><span class=\"punctuation definition tag end tsx\"><span>&gt;</span></span></span></span></div></pre>",
        {
          "tag": "reactExample",
          "value": "TableDollarExample"
        },
        {
          "tag": "page",
          "value": "features"
        },
        {
          "tag": "page",
          "value": "api"
        }
      ],
      "contentsRaw": "@# Table\n\nA highly interactive React `Table` component.\n\n<div class=\"bp3-callout bp3-large bp3-intent-primary bp3-icon-info-sign\">\n  If you are looking instead for the Blueprint-styled HTML `<table>`, see\n  [`HTMLTable` in **@blueprintjs/core**](#core/components/html-table).\n</div>\n\nMake sure to review the [getting started docs for installation info](#blueprint/getting-started).\nDo not forget to include `blueprint-table.css` on your page.\n\n```sh\nnpm install --save @blueprintjs/table\n```\n\n### Features\n\n* High-scale, data-agnostic\n* Customizable cell and header rendering\n* Virtualized viewport rendering\n* Selectable rows, columns and cells\n* Resizable rows and columns\n* Editable headers and cells\n* Integrated header and context menus\n\n@## Basic usage\n\nTo create a table, you must define the rows and columns. Add children to the `Table` to create columns,\nand change the `numRows` prop on the `Table` to set the number of rows.\n\nFor example, this code creates an empty table with three columns and five rows:\n\n```tsx\nimport { Column, Table } from \"@blueprintjs/table\";\n\n<Table numRows={5}>\n    <Column />\n    <Column />\n    <Column />\n</Table>\n```\n\nThe table is **data-agnostic**. It doesn't store any data internally, so it is up to you to bind the table to your data.\n\nYou can specify how the data is displayed by defining the `cellRenderer` prop on each `Column` component.\nThis is useful when working with typed columnar data, like database results.\n\nFor example, this creates a table that renders dollar values:\n\n```tsx\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\n\nconst cellRenderer = (rowIndex: number) => {\n    return <Cell>{`$${(rowIndex * 10).toFixed(2)}`}</Cell>\n};\n<Table numRows={10}>\n    <Column name=\"Dollars\" cellRenderer={cellRenderer}/>\n</Table>\n```\n\n@reactExample TableDollarExample\n\n@page features\n@page api",
      "metadata": {}
    },
    "timezone-picker": {
      "reference": "timezone-picker",
      "route": "timezone/timezone-picker",
      "sourcePath": "packages/timezone/src/components/timezone-picker/timezone-picker.md",
      "title": "TimezonePicker",
      "contents": [
        {
          "tag": "heading",
          "value": "TimezonePicker",
          "level": 1,
          "route": "timezone/timezone-picker"
        },
        "<p><code>TimezonePicker</code> allows the user to select from a list of timezones.</p>\n<p><a href=\"http://momentjs.com/timezone/\">Moment Timezone</a> is used internally for the list of available timezones and\ntimezone metadata.</p>\n",
        {
          "tag": "reactExample",
          "value": "TimezonePickerExample"
        },
        {
          "tag": "heading",
          "value": "Props",
          "level": 2,
          "route": "timezone/timezone-picker.props"
        },
        "<p>This component only supports controlled usage.\nControl the selected timezone with the <code>value</code> prop.\nUse the <code>onChange</code> prop to listen for changes to the selected timezone.</p>\n<p>The <code>date</code> prop is used to determine the timezone offsets.\nThis is because a timezone usually has more than one offset from UTC due to daylight saving time.\nSee <a href=\"https://momentjs.com/guides/#/lib-concepts/timezone-offset/\">here</a>\nand <a href=\"http://momentjs.com/timezone/docs/#/using-timezones/parsing-ambiguous-inputs/\">here</a>\nfor more information.</p>\n<p>The initial list (shown before filtering) shows one timezone per timezone offset,\nusing the most populous location for each offset.\nMoment Timezone uses a similar <a href=\"http://momentjs.com/timezone/docs/#/using-timezones/guessing-user-timezone/\">heuristic for guessing</a>\nthe user&#39;s timezone.</p>\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Local timezone detection</h4>\n    We detect the local timezone when the <code>showLocalTimezone</code> prop is enabled and cannot guarantee correctness in all browsers.\n    In supported browsers, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\">i18n API</a> is used.\n    In other browsers, <code>Date</code> methods and a population heuristic are used.\n    See <a href=\"https://momentjs.com/timezone/docs/#/using-timezones/guessing-user-timezone/\">Moment Timezone&#39;s documentation</a>\n    for more information and browser compatibility.\n</div>\n\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>TimezonePicker</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/timezone</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>TimezoneExample</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>PureComponent</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span><span>}</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"meta object type tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>timezone</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>string</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx variable object property tsx\"><span>state</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span>&nbsp;</span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"meta object-literal key tsx\"><span>timezone</span></span><span class=\"meta object-literal key tsx punctuation separator key-value tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta method declaration tsx\"><span class=\"storage modifier tsx\"><span>public</span></span><span>&nbsp;</span><span class=\"meta definition method tsx entity name function tsx\"><span>render</span></span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"keyword control flow tsx\"><span>return</span></span><span>&nbsp;</span><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>TimezonePicker</span></span></span><span class=\"meta tag attributes tsx\"><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>value</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other object property tsx\"><span>state</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>timezone</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"variable other property tsx\"><span>handleTimezoneChange</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span><span>&nbsp;</span></span><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"meta method declaration tsx\"><span class=\"meta block tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"storage modifier tsx\"><span>private</span></span><span>&nbsp;</span><span class=\"meta field declaration tsx\"><span class=\"meta definition property tsx entity name function tsx\"><span>handleTimezoneChange</span></span><span>&nbsp;</span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta arrow tsx\"><span>&nbsp;</span><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>timezone</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>string</span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>setState</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"variable other readwrite tsx\"><span>timezone</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>",
        {
          "tag": "interface",
          "value": "ITimezonePickerProps"
        }
      ],
      "contentsRaw": "@# TimezonePicker\n\n`TimezonePicker` allows the user to select from a list of timezones.\n\n[Moment Timezone](http://momentjs.com/timezone/) is used internally for the list of available timezones and\ntimezone metadata.\n\n@reactExample TimezonePickerExample\n\n@## Props\n\nThis component only supports controlled usage.\nControl the selected timezone with the `value` prop.\nUse the `onChange` prop to listen for changes to the selected timezone.\n\nThe `date` prop is used to determine the timezone offsets.\nThis is because a timezone usually has more than one offset from UTC due to daylight saving time.\nSee [here](https://momentjs.com/guides/#/lib-concepts/timezone-offset/)\nand [here](http://momentjs.com/timezone/docs/#/using-timezones/parsing-ambiguous-inputs/)\nfor more information.\n\nThe initial list (shown before filtering) shows one timezone per timezone offset,\nusing the most populous location for each offset.\nMoment Timezone uses a similar [heuristic for guessing](http://momentjs.com/timezone/docs/#/using-timezones/guessing-user-timezone/)\nthe user's timezone.\n\n<div class=\"bp3-callout bp3-intent-warning bp3-icon-warning-sign\">\n    <h4 class=\"bp3-heading\">Local timezone detection</h4>\n    We detect the local timezone when the `showLocalTimezone` prop is enabled and cannot guarantee correctness in all browsers.\n    In supported browsers, the [i18n API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions) is used.\n    In other browsers, `Date` methods and a population heuristic are used.\n    See [Moment Timezone's documentation](https://momentjs.com/timezone/docs/#/using-timezones/guessing-user-timezone/)\n    for more information and browser compatibility.\n</div>\n\n```tsx\nimport { TimezonePicker } from \"@blueprintjs/timezone\";\n\nexport class TimezoneExample extends React.PureComponent<{}, { timezone: string; }> {\n    public state = { timezone: \"\" };\n\n    public render() {\n        return <TimezonePicker value={this.state.timezone} onChange={this.handleTimezoneChange} />;\n    }\n\n    private handleTimezoneChange = (timezone: string) => this.setState({ timezone });\n}\n```\n\n@interface ITimezonePickerProps",
      "metadata": {}
    },
    "timezone": {
      "reference": "timezone",
      "route": "timezone",
      "sourcePath": "packages/timezone/src/index.md",
      "title": "Timezone",
      "contents": [
        {
          "tag": "heading",
          "value": "Timezone",
          "level": 1,
          "route": "timezone"
        },
        "<p>The <strong>@blueprintjs/timezone</strong> NPM package provides React components related to handling and selecting Timezones.</p>\n<ul>\n<li><a href=\"#timezone/timezone-picker\"><code>TimezonePicker</code></a>, which allows the user to select from a list of timezones.</li>\n</ul>\n<p>Be aware that this package depends on <a href=\"https://momentjs.com/\">moment</a> and <a href=\"https://momentjs.com/timezone/\">moment-timezone</a> which may\nbe a significant factor in a consumer&#39;s bundle size.</p>\n<p>Make sure to review the <a href=\"#blueprint/getting-started\">getting started docs for installation info</a>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>npm&nbsp;install&nbsp;--save&nbsp;@blueprintjs/timezone</span></span></div></pre>",
        {
          "tag": "page",
          "value": "timezone-picker"
        }
      ],
      "contentsRaw": "\n@# Timezone\n\nThe **@blueprintjs/timezone** NPM package provides React components related to handling and selecting Timezones.\n\n- [`TimezonePicker`](#timezone/timezone-picker), which allows the user to select from a list of timezones.\n\nBe aware that this package depends on [moment](https://momentjs.com/) and [moment-timezone](https://momentjs.com/timezone/) which may\nbe a significant factor in a consumer's bundle size.\n\nMake sure to review the [getting started docs for installation info](#blueprint/getting-started).\n\n```sh\nnpm install --save @blueprintjs/timezone\n```\n\n@page timezone-picker",
      "metadata": {
        "reference": "timezone"
      }
    }
  },
  "typescript": {
    "RowLoadingOption": {
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "RowLoadingOption",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L61",
      "members": [
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CELLS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L62",
          "defaultValue": "\"cells\""
        },
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "HEADER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L63",
          "defaultValue": "\"row-header\""
        }
      ]
    },
    "OverflowDirection": {
      "documentation": {
        "contents": [
          {
            "tag": "internal",
            "value": "- do not expose this type"
          }
        ],
        "contentsRaw": "@internal - do not expose this type",
        "metadata": {}
      },
      "fileName": "../core/src/components/overflow-list/overflowList.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "OverflowDirection",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L18",
      "members": [
        {
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "GROW",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L20"
        },
        {
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NONE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L19"
        },
        {
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "SHRINK",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L21"
        }
      ]
    },
    "HotkeyScope": {
      "fileName": "../core/src/components/hotkeys/hotkeysEvents.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "HotkeyScope",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysEvents.ts#L17",
      "members": [
        {
          "fileName": "../core/src/components/hotkeys/hotkeysEvents.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "GLOBAL",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysEvents.ts#L19",
          "defaultValue": "\"global\""
        },
        {
          "fileName": "../core/src/components/hotkeys/hotkeysEvents.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LOCAL",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysEvents.ts#L18",
          "defaultValue": "\"local\""
        }
      ]
    },
    "Months": {
      "documentation": {
        "contents": [
          "<p>Enumeration of calendar months.</p>\n<p>Note that the enum values are numbers (with January as <code>0</code>) so they can be\neasily compared to <code>date.getMonth()</code>.</p>\n"
        ],
        "contentsRaw": "Enumeration of calendar months.\n\nNote that the enum values are numbers (with January as `0`) so they can be\neasily compared to `date.getMonth()`.",
        "metadata": {}
      },
      "fileName": "../datetime/src/common/months.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Months",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L13",
      "members": [
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "JUNE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L19",
          "defaultValue": "5"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "APRIL",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L17",
          "defaultValue": "3"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "DECEMBER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L25",
          "defaultValue": "11"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "FEBRUARY",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L15",
          "defaultValue": "1"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "JANUARY",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L14",
          "defaultValue": "0"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "JULY",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L20",
          "defaultValue": "6"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "AUGUST",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L21",
          "defaultValue": "7"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "MARCH",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L16",
          "defaultValue": "2"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "MAY",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L18",
          "defaultValue": "4"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NOVEMBER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L24",
          "defaultValue": "10"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "OCTOBER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L23",
          "defaultValue": "9"
        },
        {
          "fileName": "../datetime/src/common/months.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "SEPTEMBER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/months.ts#L22",
          "defaultValue": "8"
        }
      ]
    },
    "TimeUnit": {
      "documentation": {
        "contents": [
          "<p>describes a component of time. <code>H:MM:SS.MS</code></p>\n"
        ],
        "contentsRaw": "describes a component of time. `H:MM:SS.MS`",
        "metadata": {}
      },
      "fileName": "../datetime/src/common/timeUnit.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "TimeUnit",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/timeUnit.ts#L11",
      "members": [
        {
          "fileName": "../datetime/src/common/timeUnit.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "HOUR_12",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/timeUnit.ts#L14",
          "defaultValue": "\"hour12\""
        },
        {
          "fileName": "../datetime/src/common/timeUnit.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "HOUR_24",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/timeUnit.ts#L13",
          "defaultValue": "\"hour24\""
        },
        {
          "fileName": "../datetime/src/common/timeUnit.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "MINUTE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/timeUnit.ts#L15",
          "defaultValue": "\"minute\""
        },
        {
          "fileName": "../datetime/src/common/timeUnit.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "MS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/timeUnit.ts#L17",
          "defaultValue": "\"ms\""
        },
        {
          "fileName": "../datetime/src/common/timeUnit.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "SECOND",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/timeUnit.ts#L16",
          "defaultValue": "\"second\""
        }
      ]
    },
    "RegionCardinality": {
      "documentation": {
        "contents": [
          "<p><code>Region</code>s contain sets of cells. Additionally, a distinction is drawn, for\nexample, between all cells within a column and the whole column itself.\nThe <code>RegionCardinality</code> enum represents these distinct types of <code>Region</code>s.</p>\n"
        ],
        "contentsRaw": "`Region`s contain sets of cells. Additionally, a distinction is drawn, for\nexample, between all cells within a column and the whole column itself.\nThe `RegionCardinality` enum represents these distinct types of `Region`s.",
        "metadata": {}
      },
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "RegionCardinality",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L16",
      "members": [
        {
          "documentation": {
            "contents": [
              "<p>A region that contains a finite rectangular group of table cells</p>\n"
            ],
            "contentsRaw": "A region that contains a finite rectangular group of table cells",
            "metadata": {}
          },
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CELLS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L20",
          "defaultValue": "\"cells\""
        },
        {
          "documentation": {
            "contents": [
              "<p>A region that represents all cells within 1 or more columns.</p>\n"
            ],
            "contentsRaw": "A region that represents all cells within 1 or more columns.",
            "metadata": {}
          },
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "FULL_COLUMNS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L30",
          "defaultValue": "\"full-columns\""
        },
        {
          "documentation": {
            "contents": [
              "<p>A region that represents all cells within 1 or more rows.</p>\n"
            ],
            "contentsRaw": "A region that represents all cells within 1 or more rows.",
            "metadata": {}
          },
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "FULL_ROWS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L25",
          "defaultValue": "\"full-rows\""
        },
        {
          "documentation": {
            "contents": [
              "<p>A region that represents all cells in the table.</p>\n"
            ],
            "contentsRaw": "A region that represents all cells in the table.",
            "metadata": {}
          },
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "FULL_TABLE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L35",
          "defaultValue": "\"full-table\""
        }
      ]
    },
    "ColumnLoadingOption": {
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "ColumnLoadingOption",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L56",
      "members": [
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CELLS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L57",
          "defaultValue": "\"cells\""
        },
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "HEADER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L58",
          "defaultValue": "\"column-header\""
        }
      ]
    },
    "AnimationStates": {
      "documentation": {
        "contents": [
          "<p><code>Collapse</code> can be in one of six states, enumerated here.\nWhen changing the <code>isOpen</code> prop, the following happens to the states:\nisOpen={true}  : CLOSED -&gt; OPEN_START -&gt; OPENING -&gt; OPEN\nisOpen={false} : OPEN -&gt; CLOSING_START -&gt; CLOSING -&gt; CLOSED</p>\n"
        ],
        "contentsRaw": "`Collapse` can be in one of six states, enumerated here.\nWhen changing the `isOpen` prop, the following happens to the states:\nisOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\nisOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED",
        "metadata": {}
      },
      "fileName": "../core/src/components/collapse/collapse.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "AnimationStates",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L59",
      "members": [
        {
          "documentation": {
            "contents": [
              "<p>The contents of the collapse is not rendered, the collapse height is 0,\nand the body Y is at -height (so that the bottom of the body is at Y=0).</p>\n"
            ],
            "contentsRaw": "The contents of the collapse is not rendered, the collapse height is 0,\nand the body Y is at -height (so that the bottom of the body is at Y=0).",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CLOSED",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L95"
        },
        {
          "documentation": {
            "contents": [
              "<p>Height is set to 0 and the body Y is at -height. Both of these properties\nare transformed, and then after the animation is complete, the state\nchanges to CLOSED.</p>\n"
            ],
            "contentsRaw": "Height is set to 0 and the body Y is at -height. Both of these properties\nare transformed, and then after the animation is complete, the state\nchanges to CLOSED.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CLOSING",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L89"
        },
        {
          "documentation": {
            "contents": [
              "<p>Height has been changed from auto to the measured height of the body to\nprepare for the closing animation in CLOSING.</p>\n"
            ],
            "contentsRaw": "Height has been changed from auto to the measured height of the body to\nprepare for the closing animation in CLOSING.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CLOSING_START",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L82"
        },
        {
          "documentation": {
            "contents": [
              "<p>The collapse height is set to auto, and the body Y is set to 0 (so the\nelement can be seen as normal).</p>\n"
            ],
            "contentsRaw": "The collapse height is set to auto, and the body Y is set to 0 (so the\nelement can be seen as normal).",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "OPEN",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L76"
        },
        {
          "documentation": {
            "contents": [
              "<p>Animation begins, height is set to auto. This is all animated, and on\ncomplete, the state changes to OPEN.</p>\n"
            ],
            "contentsRaw": "Animation begins, height is set to auto. This is all animated, and on\ncomplete, the state changes to OPEN.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "OPENING",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L70"
        },
        {
          "documentation": {
            "contents": [
              "<p>The body is re-rendered, height is set to the measured body height and\nthe body Y is set to 0.</p>\n"
            ],
            "contentsRaw": "The body is re-rendered, height is set to the measured body height and\nthe body Y is set to 0.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "OPEN_START",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L64"
        }
      ]
    },
    "TableLoadingOption": {
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "TableLoadingOption",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L66",
      "members": [
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CELLS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L67",
          "defaultValue": "\"cells\""
        },
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "COLUMN_HEADERS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L68",
          "defaultValue": "\"column-header\""
        },
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "ROW_HEADERS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L69",
          "defaultValue": "\"row-header\""
        }
      ]
    },
    "TruncatedPopoverMode": {
      "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "TruncatedPopoverMode",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L22",
      "members": [
        {
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "ALWAYS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L23",
          "defaultValue": "\"always\""
        },
        {
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NEVER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L24",
          "defaultValue": "\"never\""
        },
        {
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "WHEN_TRUNCATED",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L25",
          "defaultValue": "\"when-truncated\""
        },
        {
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "WHEN_TRUNCATED_APPROX",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L26",
          "defaultValue": "\"when-truncated-approx\""
        }
      ]
    },
    "RenderMode": {
      "fileName": "../table/src/common/renderMode.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "RenderMode",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/renderMode.ts#L7",
      "members": [
        {
          "documentation": {
            "contents": [
              "<p>Renders cells in batches across multiple animation frames. This improves\nperformance by spreading out work to keep a high FPS and avoid blocking\nthe UI, but it also introduces a noticeable scan-line rendering artifact\nas successive batches of cells finish rendering.</p>\n"
            ],
            "contentsRaw": "Renders cells in batches across multiple animation frames. This improves\nperformance by spreading out work to keep a high FPS and avoid blocking\nthe UI, but it also introduces a noticeable scan-line rendering artifact\nas successive batches of cells finish rendering.",
            "metadata": {}
          },
          "fileName": "../table/src/common/renderMode.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "BATCH",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/renderMode.ts#L14",
          "defaultValue": "\"batch\""
        },
        {
          "documentation": {
            "contents": [
              "<p>Renders all cells synchronously on initial mount, then renders cells in\nbatches on successive updates (e.g. during scrolling). This helps to\nremove visual rendering artifacts when the table is first rendered,\nwihout slowing scrolling performance to a crawl.</p>\n"
            ],
            "contentsRaw": "Renders all cells synchronously on initial mount, then renders cells in\nbatches on successive updates (e.g. during scrolling). This helps to\nremove visual rendering artifacts when the table is first rendered,\nwihout slowing scrolling performance to a crawl.",
            "metadata": {}
          },
          "fileName": "../table/src/common/renderMode.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "BATCH_ON_UPDATE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/renderMode.ts#L22",
          "defaultValue": "\"batch-on-update\""
        },
        {
          "documentation": {
            "contents": [
              "<p>Disables the batch-rendering behavior, rendering all cells synchronously\nat once. This may result in degraded performance on large tables and/or\non tables with complex cells.</p>\n"
            ],
            "contentsRaw": "Disables the batch-rendering behavior, rendering all cells synchronously\nat once. This may result in degraded performance on large tables and/or\non tables with complex cells.",
            "metadata": {}
          },
          "fileName": "../table/src/common/renderMode.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NONE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/renderMode.ts#L29",
          "defaultValue": "\"none\""
        }
      ]
    },
    "Orientation": {
      "fileName": "../table/src/interactions/resizeHandle.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Orientation",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L14",
      "members": [
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "HORIZONTAL",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L15",
          "defaultValue": "1"
        },
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "VERTICAL",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L16",
          "defaultValue": "0"
        }
      ]
    },
    "Direction": {
      "fileName": "../table/src/common/direction.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Direction",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/direction.ts#L7",
      "members": [
        {
          "fileName": "../table/src/common/direction.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "DOWN",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/direction.ts#L9",
          "defaultValue": "\"down\""
        },
        {
          "fileName": "../table/src/common/direction.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LEFT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/direction.ts#L10",
          "defaultValue": "\"left\""
        },
        {
          "fileName": "../table/src/common/direction.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "RIGHT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/direction.ts#L11",
          "defaultValue": "\"right\""
        },
        {
          "fileName": "../table/src/common/direction.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "UP",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/direction.ts#L8",
          "defaultValue": "\"up\""
        }
      ]
    },
    "QuadrantType": {
      "fileName": "../table/src/quadrants/tableQuadrant.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "QuadrantType",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L15",
      "members": [
        {
          "documentation": {
            "contents": [
              "<p>The left quadrant, containing row headers and frozen columns.</p>\n"
            ],
            "contentsRaw": "The left quadrant, containing row headers and frozen columns.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LEFT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L29",
          "defaultValue": "\"left\""
        },
        {
          "documentation": {
            "contents": [
              "<p>The main quadrant beneath any frozen rows or columns.</p>\n"
            ],
            "contentsRaw": "The main quadrant beneath any frozen rows or columns.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "MAIN",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L19",
          "defaultValue": "\"main\""
        },
        {
          "documentation": {
            "contents": [
              "<p>The top quadrant, containing column headers and frozen rows.</p>\n"
            ],
            "contentsRaw": "The top quadrant, containing column headers and frozen rows.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "TOP",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L24",
          "defaultValue": "\"top\""
        },
        {
          "documentation": {
            "contents": [
              "<p>The top-left quadrant, containing the headers and cells common to both\nthe frozen columns and frozen rows.</p>\n"
            ],
            "contentsRaw": "The top-left quadrant, containing the headers and cells common to both\nthe frozen columns and frozen rows.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "TOP_LEFT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L35",
          "defaultValue": "\"top-left\""
        }
      ]
    },
    "IDatePickerBaseProps": {
      "fileName": "../datetime/src/datePickerCore.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDatePickerBaseProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L21",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The initial month the calendar displays.</p>\n"
            ],
            "contentsRaw": "The initial month the calendar displays.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialMonth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L25",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The locale name, which is passed to the functions in <code>localeUtils</code>\n(and <code>formatDate</code> and <code>parseDate</code> if supported).</p>\n"
            ],
            "contentsRaw": "The locale name, which is passed to the functions in `localeUtils`\n(and `formatDate` and `parseDate` if supported).",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locale",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L31",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that provide internationalization support.</p>\n"
            ],
            "contentsRaw": "Collection of functions that provide internationalization support.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "localeUtils",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L36",
          "type": "LocaleUtils"
        },
        {
          "documentation": {
            "contents": [
              "<p>The latest date the user can select.</p>\n"
            ],
            "contentsRaw": "The latest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L42",
          "defaultValue": "Dec. 31st of this year.",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The earliest date the user can select.</p>\n"
            ],
            "contentsRaw": "The earliest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L48",
          "defaultValue": "Jan. 1st, 20 years in the past.",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a <code>Date</code> and return a boolean.\nSee the <a href=\"http://react-day-picker.js.org/Modifiers.html\"><strong>react-day-picker</strong> documentation</a> to learn more.</p>\n"
            ],
            "contentsRaw": "Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a `Date` and return a boolean.\nSee the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L55",
          "type": "IDatePickerModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.</p>\n"
            ],
            "contentsRaw": "If `true`, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reverseMonthAndYearMenus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L62",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Further configure the <code>TimePicker</code> that appears beneath the calendar.\n<code>onChange</code> and <code>value</code> are ignored in favor of the corresponding\ntop-level props on this component.</p>\n<p>Passing any defined value to this prop (even <code>{}</code>) will cause the\n<code>TimePicker</code> to appear.</p>\n"
            ],
            "contentsRaw": "Further configure the `TimePicker` that appears beneath the calendar.\n`onChange` and `value` are ignored in favor of the corresponding\ntop-level props on this component.\n\nPassing any defined value to this prop (even `{}`) will cause the\n`TimePicker` to appear.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L82",
          "type": "ITimePickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The precision of time selection that accompanies the calendar. Passing a\n<code>TimePrecision</code> value (or providing <code>timePickerProps</code>) shows a\n<code>TimePicker</code> below the calendar. Time is preserved across date changes.</p>\n<p>This is shorthand for <code>timePickerProps.precision</code> and is a quick way to\nenable time selection.</p>\n"
            ],
            "contentsRaw": "The precision of time selection that accompanies the calendar. Passing a\n`TimePrecision` value (or providing `timePickerProps`) shows a\n`TimePicker` below the calendar. Time is preserved across date changes.\n\nThis is shorthand for `timePickerProps.precision` and is a quick way to\nenable time selection.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L72",
          "type": "TimePrecision"
        }
      ]
    },
    "IKeyWhitelist": {
      "fileName": "../table/src/common/utils.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyWhitelist",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/utils.ts#L17",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/utils.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "include",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/utils.ts#L18",
          "type": "Array<keyof T>"
        }
      ]
    },
    "INamed": {
      "documentation": {
        "contents": [
          "<p>Represents anything that has a <code>name</code> property such as Functions.</p>\n"
        ],
        "contentsRaw": "Represents anything that has a `name` property such as Functions.",
        "metadata": {}
      },
      "fileName": "../core/src/common/utils.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INamed",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/utils.ts#L67",
      "methods": [],
      "properties": [
        {
          "fileName": "../core/src/common/utils.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/utils.ts#L68",
          "type": "string"
        }
      ]
    },
    "IThrottledReactEventOptions": {
      "fileName": "../core/src/common/utils.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IThrottledReactEventOptions",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/utils.ts#L208",
      "methods": [],
      "properties": [
        {
          "fileName": "../core/src/common/utils.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preventDefault",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/utils.ts#L209",
          "type": "boolean"
        }
      ]
    },
    "IConstructor": {
      "documentation": {
        "contents": [
          "<p>Generic interface defining constructor types, such as classes. This is used to type the class\nitself in meta-programming situations such as decorators.</p>\n"
        ],
        "contentsRaw": "Generic interface defining constructor types, such as classes. This is used to type the class\nitself in meta-programming situations such as decorators.",
        "metadata": {}
      },
      "fileName": "../core/src/common/constructor.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IConstructor",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/constructor.ts#L11",
      "methods": [],
      "properties": []
    },
    "IProps": {
      "documentation": {
        "contents": [
          "<p>A shared base interface for all Blueprint component props.</p>\n"
        ],
        "contentsRaw": "A shared base interface for all Blueprint component props.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L36",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "type": "string"
        }
      ]
    },
    "IIntentProps": {
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IIntentProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L41",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "type": "Intent"
        }
      ]
    },
    "IActionProps": {
      "documentation": {
        "contents": [
          "<p>Interface for a clickable action, such as a button or menu item.\nThese props can be spready directly to a <code>&lt;Button&gt;</code> or <code>&lt;MenuItem&gt;</code> element.</p>\n"
        ],
        "contentsRaw": "Interface for a clickable action, such as a button or menu item.\nThese props can be spready directly to a `<Button>` or `<MenuItem>` element.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IActionProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L50",
      "extends": [
        "IIntentProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this action is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether this action is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L52",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render before the text.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render before the text.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L55",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Click event handler.</p>\n"
            ],
            "contentsRaw": "Click event handler.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L58",
          "type": "(event: MouseEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Action text. Can be any single React renderable.</p>\n"
            ],
            "contentsRaw": "Action text. Can be any single React renderable.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "text",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L61",
          "type": "React.ReactNode"
        }
      ]
    },
    "ILinkProps": {
      "documentation": {
        "contents": [
          "<p>Interface for a link, with support for customizing target window.</p>\n"
        ],
        "contentsRaw": "Interface for a link, with support for customizing target window.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ILinkProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L65",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Link URL.</p>\n"
            ],
            "contentsRaw": "Link URL.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "href",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L67",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Link target attribute. Use <code>&quot;_blank&quot;</code> to open in a new window.</p>\n"
            ],
            "contentsRaw": "Link target attribute. Use `\"_blank\"` to open in a new window.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "target",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L70",
          "type": "string"
        }
      ]
    },
    "IControlledProps": {
      "documentation": {
        "contents": [
          "<p>Interface for a controlled input.</p>\n"
        ],
        "contentsRaw": "Interface for a controlled input.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IControlledProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L74",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Initial value of the input, for uncontrolled usage.</p>\n"
            ],
            "contentsRaw": "Initial value of the input, for uncontrolled usage.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L76",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Change event handler. Use <code>event.target.value</code> for new value.</p>\n"
            ],
            "contentsRaw": "Change event handler. Use `event.target.value` for new value.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L79",
          "type": "React.FormEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Form value of the input, for controlled usage.</p>\n"
            ],
            "contentsRaw": "Form value of the input, for controlled usage.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L82",
          "type": "string"
        }
      ]
    },
    "IOptionProps": {
      "documentation": {
        "contents": [
          "<p>An interface for an option in a list, such as in a <code>&lt;select&gt;</code> or <code>RadioGroup</code>.\nThese props can be spread directly to an <code>&lt;option&gt;</code> or <code>&lt;Radio&gt;</code> element.</p>\n"
        ],
        "contentsRaw": "An interface for an option in a list, such as in a `<select>` or `RadioGroup`.\nThese props can be spread directly to an `<option>` or `<Radio>` element.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IOptionProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L89",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this option is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether this option is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L91",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Label text for this option. If omitted, <code>value</code> is used as the label.</p>\n"
            ],
            "contentsRaw": "Label text for this option. If omitted, `value` is used as the label.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L94",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Value of this option.</p>\n"
            ],
            "contentsRaw": "Value of this option.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L97",
          "type": "string | number"
        }
      ]
    },
    "IPortalProps": {
      "fileName": "../core/src/components/portal/portal.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPortalProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/portal/portal.tsx#L19",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The HTML element that children will be mounted to.</p>\n"
            ],
            "contentsRaw": "The HTML element that children will be mounted to.",
            "metadata": {}
          },
          "fileName": "../core/src/components/portal/portal.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "container",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/portal/portal.tsx#L29",
          "defaultValue": "document.body",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the children of this <code>Portal</code> have been added to the DOM.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the children of this `Portal` have been added to the DOM.",
            "metadata": {}
          },
          "fileName": "../core/src/components/portal/portal.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChildrenMount",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/portal/portal.tsx#L23",
          "type": "() => void"
        }
      ]
    },
    "IPortalContext": {
      "fileName": "../core/src/components/portal/portal.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPortalContext",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/portal/portal.tsx#L36",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Additional CSS classes to add to all <code>Portal</code> elements in this React context.</p>\n"
            ],
            "contentsRaw": "Additional CSS classes to add to all `Portal` elements in this React context.",
            "metadata": {}
          },
          "fileName": "../core/src/components/portal/portal.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "blueprintPortalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/portal/portal.tsx#L38",
          "type": "string"
        }
      ]
    },
    "IOverlayableProps": {
      "fileName": "../core/src/components/overlay/overlay.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IOverlayableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L18",
      "extends": [
        "IOverlayLifecycleProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should acquire application focus when it first opens.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should acquire application focus when it first opens.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L23",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the &quot;outermost&quot; overlays or mark the nested ones <code>usePortal={false}</code>.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enforceFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L38",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and <code>usePortal={true}</code>, the <code>Portal</code> containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.</p>\n"
            ],
            "contentsRaw": "If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "lazy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L47",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the <code>esc</code> key (if enabled).</p>\n<p>Receives the event from the user&#39;s interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the <code>isOpen</code> prop, it\nwill not actually close itself until that prop becomes <code>false</code>.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the `esc` key (if enabled).\n\nReceives the event from the user's interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\nwill not actually close itself until that prop becomes `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L93",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L29",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the <code>Portal</code> element if\n<code>usePortal={true}</code>.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the `Portal` element if\n`usePortal={true}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L76",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L83",
          "defaultValue": "document.body",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the overlay&#39;s enter/leave transition takes.\nThis is used by React <code>CSSTransition</code> to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint&#39;s default\ntransitions with new transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\nThis is used by React `CSSTransition` to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint's default\ntransitions with new transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L56",
          "defaultValue": "100",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should be wrapped in a <code>Portal</code>, which renders its contents in a new\nelement attached to <code>portalContainer</code> prop.</p>\n<p>This prop essentially determines which element is covered by the backdrop: if <code>false</code>,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the <code>Portal</code> is the <code>&lt;body&gt;</code> itself).</p>\n<p>Set this prop to <code>false</code> on nested overlays (such as <code>Dialog</code> or <code>Popover</code>) to ensure that they\nare rendered above their parents.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should be wrapped in a `Portal`, which renders its contents in a new\nelement attached to `portalContainer` prop.\n\nThis prop essentially determines which element is covered by the backdrop: if `false`,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the `Portal` is the `<body>` itself).\n\nSet this prop to `false` on nested overlays (such as `Dialog` or `Popover`) to ensure that they\nare rendered above their parents.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L70",
          "defaultValue": "true",
          "type": "boolean"
        }
      ]
    },
    "IOverlayLifecycleProps": {
      "fileName": "../core/src/components/overlay/overlay.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IOverlayLifecycleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L96",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "type": "(node: HTMLElement) => void"
        }
      ]
    },
    "IBackdropProps": {
      "fileName": "../core/src/components/overlay/overlay.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IBackdropProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L124",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>CSS class names to apply to backdrop element.</p>\n"
            ],
            "contentsRaw": "CSS class names to apply to backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L126",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props for the backdrop element.</p>\n"
            ],
            "contentsRaw": "HTML props for the backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L129",
          "type": "HTMLProps<HTMLDivElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canOutsideClickClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L136",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a container-spanning backdrop element should be rendered behind the contents.</p>\n"
            ],
            "contentsRaw": "Whether a container-spanning backdrop element should be rendered behind the contents.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hasBackdrop",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L142",
          "defaultValue": "true",
          "type": "boolean"
        }
      ]
    },
    "IOverlayProps": {
      "fileName": "../core/src/components/overlay/overlay.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IOverlayProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L145",
      "extends": [
        "IOverlayableProps",
        "IBackdropProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the <code>esc</code> key (if enabled).</p>\n<p>Receives the event from the user&#39;s interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the <code>isOpen</code> prop, it\nwill not actually close itself until that prop becomes <code>false</code>.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the `esc` key (if enabled).\n\nReceives the event from the user's interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\nwill not actually close itself until that prop becomes `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L93",
          "inheritedFrom": "IOverlayableProps.onClose",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should acquire application focus when it first opens.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should acquire application focus when it first opens.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L23",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.autoFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props for the backdrop element.</p>\n"
            ],
            "contentsRaw": "HTML props for the backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L129",
          "inheritedFrom": "IBackdropProps.backdropProps",
          "type": "HTMLProps<HTMLDivElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L29",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.canEscapeKeyClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canOutsideClickClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L136",
          "defaultValue": "true",
          "inheritedFrom": "IBackdropProps.canOutsideClickClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the &quot;outermost&quot; overlays or mark the nested ones <code>usePortal={false}</code>.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enforceFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L38",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.enforceFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a container-spanning backdrop element should be rendered behind the contents.</p>\n"
            ],
            "contentsRaw": "Whether a container-spanning backdrop element should be rendered behind the contents.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hasBackdrop",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L142",
          "defaultValue": "true",
          "inheritedFrom": "IBackdropProps.hasBackdrop",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Toggles the visibility of the overlay and its children.\nThis prop is required because the component is controlled.</p>\n"
            ],
            "contentsRaw": "Toggles the visibility of the overlay and its children.\nThis prop is required because the component is controlled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L150",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and <code>usePortal={true}</code>, the <code>Portal</code> containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.</p>\n"
            ],
            "contentsRaw": "If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "lazy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L47",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.lazy",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS class names to apply to backdrop element.</p>\n"
            ],
            "contentsRaw": "CSS class names to apply to backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L126",
          "inheritedFrom": "IBackdropProps.backdropClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the <code>Portal</code> element if\n<code>usePortal={true}</code>.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the `Portal` element if\n`usePortal={true}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L76",
          "inheritedFrom": "IOverlayableProps.portalClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L83",
          "defaultValue": "document.body",
          "inheritedFrom": "IOverlayableProps.portalContainer",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the overlay&#39;s enter/leave transition takes.\nThis is used by React <code>CSSTransition</code> to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint&#39;s default\ntransitions with new transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\nThis is used by React `CSSTransition` to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint's default\ntransitions with new transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L56",
          "defaultValue": "100",
          "inheritedFrom": "IOverlayableProps.transitionDuration",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the transition for internal <code>CSSTransition</code>.\nProviding your own name here will require defining new CSS transition properties.</p>\n"
            ],
            "contentsRaw": "Name of the transition for internal `CSSTransition`.\nProviding your own name here will require defining new CSS transition properties.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L157",
          "defaultValue": "Classes.OVERLAY",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should be wrapped in a <code>Portal</code>, which renders its contents in a new\nelement attached to <code>portalContainer</code> prop.</p>\n<p>This prop essentially determines which element is covered by the backdrop: if <code>false</code>,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the <code>Portal</code> is the <code>&lt;body&gt;</code> itself).</p>\n<p>Set this prop to <code>false</code> on nested overlays (such as <code>Dialog</code> or <code>Popover</code>) to ensure that they\nare rendered above their parents.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should be wrapped in a `Portal`, which renders its contents in a new\nelement attached to `portalContainer` prop.\n\nThis prop essentially determines which element is covered by the backdrop: if `false`,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the `Portal` is the `<body>` itself).\n\nSet this prop to `false` on nested overlays (such as `Dialog` or `Popover`) to ensure that they\nare rendered above their parents.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L70",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.usePortal",
          "type": "boolean"
        }
      ]
    },
    "IResizeEntry": {
      "documentation": {
        "contents": [
          "<p>A parallel type to <code>ResizeObserverEntry</code> (from resize-observer-polyfill).</p>\n"
        ],
        "contentsRaw": "A parallel type to `ResizeObserverEntry` (from resize-observer-polyfill).",
        "metadata": {}
      },
      "fileName": "../core/src/components/resize-sensor/resizeSensor.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IResizeEntry",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/resize-sensor/resizeSensor.tsx#L15",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Measured dimensions of the target.</p>\n"
            ],
            "contentsRaw": "Measured dimensions of the target.",
            "metadata": {}
          },
          "fileName": "../core/src/components/resize-sensor/resizeSensor.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "contentRect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/resize-sensor/resizeSensor.tsx#L17",
          "type": "DOMRectReadOnly"
        },
        {
          "documentation": {
            "contents": [
              "<p>The resized element.</p>\n"
            ],
            "contentsRaw": "The resized element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/resize-sensor/resizeSensor.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "target",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/resize-sensor/resizeSensor.tsx#L20",
          "type": "Element"
        }
      ]
    },
    "IResizeSensorProps": {
      "documentation": {
        "contents": [
          "<p><code>ResizeSensor</code> requires a single DOM element child and will error otherwise.</p>\n"
        ],
        "contentsRaw": "`ResizeSensor` requires a single DOM element child and will error otherwise.",
        "metadata": {}
      },
      "fileName": "../core/src/components/resize-sensor/resizeSensor.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IResizeSensorProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/resize-sensor/resizeSensor.tsx#L24",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, all parent DOM elements of the container will also be\nobserved for size changes. The array of entries passed to <code>onResize</code>\nwill now contain an entry for each parent element up to the root of the\ndocument.</p>\n<p>Only enable this prop if a parent element resizes in a way that does\nnot also cause the child element to resize.</p>\n"
            ],
            "contentsRaw": "If `true`, all parent DOM elements of the container will also be\nobserved for size changes. The array of entries passed to `onResize`\nwill now contain an entry for each parent element up to the root of the\ndocument.\n\nOnly enable this prop if a parent element resizes in a way that does\nnot also cause the child element to resize.",
            "metadata": {}
          },
          "fileName": "../core/src/components/resize-sensor/resizeSensor.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "observeParents",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/resize-sensor/resizeSensor.tsx#L47",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the wrapped element resizes.</p>\n<p>The <code>entries</code> array contains an entry for each observed element. In the\ndefault case (no <code>observeParents</code>), the array will contain only one\nelement: the single child of the <code>ResizeSensor</code>.</p>\n<p>Note that this method is called <em>asynchronously</em> after a resize is\ndetected and typically it will be called no more than once per frame.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the wrapped element resizes.\n\nThe `entries` array contains an entry for each observed element. In the\ndefault case (no `observeParents`), the array will contain only one\nelement: the single child of the `ResizeSensor`.\n\nNote that this method is called _asynchronously_ after a resize is\ndetected and typically it will be called no more than once per frame.",
            "metadata": {}
          },
          "fileName": "../core/src/components/resize-sensor/resizeSensor.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/resize-sensor/resizeSensor.tsx#L35",
          "type": "(entries: IResizeEntry[]) => void"
        }
      ]
    },
    "IPopoverSharedProps": {
      "documentation": {
        "contents": [
          "<p>Props shared between <code>Popover</code> and <code>Tooltip</code>.</p>\n"
        ],
        "contentsRaw": "Props shared between `Popover` and `Tooltip`.",
        "metadata": {}
      },
      "fileName": "../core/src/components/popover/popoverSharedProps.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPopoverSharedProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L25",
      "extends": [
        "IOverlayableProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should acquire application focus when it first opens.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should acquire application focus when it first opens.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L23",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.autoFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L29",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.canEscapeKeyClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When enabled, <code>preventDefault()</code> is invoked on <code>click</code> events that close\nthis popover, which will prevent those clicks from closing outer\npopovers. When disabled, clicking inside a <code>Classes.POPOVER_DISMISS</code>\nelement will close the parent popover.</p>\n<p>See <a href=\"http://blueprintjs.com/docs/#core/components/popover.closing-on-click\">http://blueprintjs.com/docs/#core/components/popover.closing-on-click</a></p>\n"
            ],
            "contentsRaw": "When enabled, `preventDefault()` is invoked on `click` events that close\nthis popover, which will prevent those clicks from closing outer\npopovers. When disabled, clicking inside a `Classes.POPOVER_DISMISS`\nelement will close the parent popover.\n\nSee http://blueprintjs.com/docs/#core/components/popover.closing-on-click",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "captureDismiss",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L43",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial opened state when uncontrolled.</p>\n"
            ],
            "contentsRaw": "Initial opened state when uncontrolled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultIsOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L49",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Prevents the popover from appearing when <code>true</code>.</p>\n"
            ],
            "contentsRaw": "Prevents the popover from appearing when `true`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L55",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the &quot;outermost&quot; overlays or mark the nested ones <code>usePortal={false}</code>.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enforceFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L38",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.enforceFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The amount of time in milliseconds the popover should remain open after\nthe user hovers off the trigger. The timer is canceled if the user mouses\nover the target before it expires.</p>\n"
            ],
            "contentsRaw": "The amount of time in milliseconds the popover should remain open after\nthe user hovers off the trigger. The timer is canceled if the user mouses\nover the target before it expires.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hoverCloseDelay",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L63",
          "defaultValue": "300",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The amount of time in milliseconds the popover should wait before opening\nafter the user hovers over the trigger. The timer is canceled if the user\nmouses away from the target before it expires.</p>\n"
            ],
            "contentsRaw": "The amount of time in milliseconds the popover should wait before opening\nafter the user hovers over the trigger. The timer is canceled if the user\nmouses away from the target before it expires.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hoverOpenDelay",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L71",
          "defaultValue": "150",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a popover that uses a <code>Portal</code> should automatically inherit the\ndark theme from its parent.</p>\n"
            ],
            "contentsRaw": "Whether a popover that uses a `Portal` should automatically inherit the\ndark theme from its parent.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inheritDarkTheme",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L78",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover is visible. Passing this prop puts the popover in\ncontrolled mode, where the only way to change visibility is by updating\nthis property. If <code>disabled={true}</code>, this prop will be ignored, and the\npopover will remain closed.</p>\n"
            ],
            "contentsRaw": "Whether the popover is visible. Passing this prop puts the popover in\ncontrolled mode, where the only way to change visibility is by updating\nthis property. If `disabled={true}`, this prop will be ignored, and the\npopover will remain closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L87",
          "defaultValue": "undefined",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and <code>usePortal={true}</code>, the <code>Portal</code> containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.</p>\n"
            ],
            "contentsRaw": "If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "lazy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L47",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.lazy",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Popper modifier options, passed directly to internal Popper instance. See\n<a href=\"https://popper.js.org/popper-documentation.html#modifiers\">https://popper.js.org/popper-documentation.html#modifiers</a> for complete\ndetails.</p>\n"
            ],
            "contentsRaw": "Popper modifier options, passed directly to internal Popper instance. See\nhttps://popper.js.org/popper-documentation.html#modifiers for complete\ndetails.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L94",
          "type": "PopperModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the <code>esc</code> key (if enabled).</p>\n<p>Receives the event from the user&#39;s interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the <code>isOpen</code> prop, it\nwill not actually close itself until that prop becomes <code>false</code>.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the `esc` key (if enabled).\n\nReceives the event from the user's interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\nwill not actually close itself until that prop becomes `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L93",
          "inheritedFrom": "IOverlayableProps.onClose",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determines the boundary element used by Popper for its <code>flip</code> and\n<code>preventOverflow</code> modifiers. Three shorthand keywords are supported;\nPopper will find the correct DOM element itself.</p>\n"
            ],
            "contentsRaw": "Determines the boundary element used by Popper for its `flip` and\n`preventOverflow` modifiers. Three shorthand keywords are supported;\nPopper will find the correct DOM element itself.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "boundary",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L32",
          "defaultValue": "\"scrollParent\"",
          "type": "PopperBoundary"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked in controlled mode when the popover open state <em>would</em>\nchange due to user interaction.</p>\n"
            ],
            "contentsRaw": "Callback invoked in controlled mode when the popover open state *would*\nchange due to user interaction.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onInteraction",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L100",
          "type": "(nextOpenState: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover should open when its target is focused. If <code>true</code>,\ntarget will render with <code>tabindex=&quot;0&quot;</code> to make it focusable via keyboard\nnavigation.</p>\n"
            ],
            "contentsRaw": "Whether the popover should open when its target is focused. If `true`,\ntarget will render with `tabindex=\"0\"` to make it focusable via keyboard\nnavigation.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "openOnTargetFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L108",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited string of class names applied to the popover element.</p>\n"
            ],
            "contentsRaw": "A space-delimited string of class names applied to the popover element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L113",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the <code>Portal</code> element if\n<code>usePortal={true}</code>.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the `Portal` element if\n`usePortal={true}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L76",
          "inheritedFrom": "IOverlayableProps.portalClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L83",
          "defaultValue": "document.body",
          "inheritedFrom": "IOverlayableProps.portalContainer",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>The position (relative to the target) at which the popover should appear.</p>\n<p>The default value of <code>&quot;auto&quot;</code> will choose the best position when opened\nand will allow the popover to reposition itself to remain onscreen as the\nuser scrolls around.</p>\n"
            ],
            "contentsRaw": "The position (relative to the target) at which the popover should appear.\n\nThe default value of `\"auto\"` will choose the best position when opened\nand will allow the popover to reposition itself to remain onscreen as the\nuser scrolls around.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "position",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L123",
          "defaultValue": "\"auto\"",
          "type": "PopoverPosition"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the target element.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the target element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L128",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props to spread to target element. Use <code>targetTagName</code> to change\nthe type of element rendered. Note that <code>ref</code> is not supported.</p>\n"
            ],
            "contentsRaw": "HTML props to spread to target element. Use `targetTagName` to change\nthe type of element rendered. Note that `ref` is not supported.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L134",
          "type": "HTMLAttributes<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name for the target element. This must be an HTML element to\nensure that it supports the necessary DOM event handlers.</p>\n<p>By default, a <code>&lt;span&gt;</code> tag is used so popovers appear as inline-block\nelements and can be nested in text. Use <code>&lt;div&gt;</code> tag for a block element.</p>\n"
            ],
            "contentsRaw": "HTML tag name for the target element. This must be an HTML element to\nensure that it supports the necessary DOM event handlers.\n\nBy default, a `<span>` tag is used so popovers appear as inline-block\nelements and can be nested in text. Use `<div>` tag for a block element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetTagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L144",
          "defaultValue": "\"span\"",
          "type": "keyof IntrinsicElements"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the overlay&#39;s enter/leave transition takes.\nThis is used by React <code>CSSTransition</code> to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint&#39;s default\ntransitions with new transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\nThis is used by React `CSSTransition` to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint's default\ntransitions with new transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L56",
          "defaultValue": "100",
          "inheritedFrom": "IOverlayableProps.transitionDuration",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover should be rendered inside a <code>Portal</code> attached to\n<code>portalContainer</code> prop.</p>\n<p>Rendering content inside a <code>Portal</code> allows the popover content to escape\nthe physical bounds of its parent while still being positioned correctly\nrelative to its target. Using a <code>Portal</code> is necessary if any ancestor of\nthe target hides overflow or uses very complex positioning.</p>\n<p>Not using a <code>Portal</code> can result in smoother performance when scrolling\nand allows the popover content to inherit CSS styles from surrounding\nelements, but it remains subject to the overflow bounds of its ancestors.</p>\n"
            ],
            "contentsRaw": "Whether the popover should be rendered inside a `Portal` attached to\n`portalContainer` prop.\n\nRendering content inside a `Portal` allows the popover content to escape\nthe physical bounds of its parent while still being positioned correctly\nrelative to its target. Using a `Portal` is necessary if any ancestor of\nthe target hides overflow or uses very complex positioning.\n\nNot using a `Portal` can result in smoother performance when scrolling\nand allows the popover content to inherit CSS styles from surrounding\nelements, but it remains subject to the overflow bounds of its ancestors.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L160",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name for the wrapper element, which also receives the\n<code>className</code> prop.</p>\n"
            ],
            "contentsRaw": "HTML tag name for the wrapper element, which also receives the\n`className` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "wrapperTagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L167",
          "defaultValue": "\"span\"",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "ITooltipProps": {
      "fileName": "../core/src/components/tooltip/tooltip.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITooltipProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tooltip/tooltip.tsx#L15",
      "extends": [
        "IPopoverSharedProps",
        "IIntentProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the <code>esc</code> key (if enabled).</p>\n<p>Receives the event from the user&#39;s interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the <code>isOpen</code> prop, it\nwill not actually close itself until that prop becomes <code>false</code>.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the `esc` key (if enabled).\n\nReceives the event from the user's interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\nwill not actually close itself until that prop becomes `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L93",
          "inheritedFrom": "IOverlayableProps.onClose",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should acquire application focus when it first opens.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should acquire application focus when it first opens.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L23",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.autoFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L29",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.canEscapeKeyClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When enabled, <code>preventDefault()</code> is invoked on <code>click</code> events that close\nthis popover, which will prevent those clicks from closing outer\npopovers. When disabled, clicking inside a <code>Classes.POPOVER_DISMISS</code>\nelement will close the parent popover.</p>\n<p>See <a href=\"http://blueprintjs.com/docs/#core/components/popover.closing-on-click\">http://blueprintjs.com/docs/#core/components/popover.closing-on-click</a></p>\n"
            ],
            "contentsRaw": "When enabled, `preventDefault()` is invoked on `click` events that close\nthis popover, which will prevent those clicks from closing outer\npopovers. When disabled, clicking inside a `Classes.POPOVER_DISMISS`\nelement will close the parent popover.\n\nSee http://blueprintjs.com/docs/#core/components/popover.closing-on-click",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "captureDismiss",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L43",
          "defaultValue": "false",
          "inheritedFrom": "IPopoverSharedProps.captureDismiss",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The content that will be displayed inside of the tooltip.</p>\n"
            ],
            "contentsRaw": "The content that will be displayed inside of the tooltip.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tooltip/tooltip.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "content",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tooltip/tooltip.tsx#L19",
          "type": "Element | string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial opened state when uncontrolled.</p>\n"
            ],
            "contentsRaw": "Initial opened state when uncontrolled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultIsOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L49",
          "defaultValue": "false",
          "inheritedFrom": "IPopoverSharedProps.defaultIsOpen",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Prevents the popover from appearing when <code>true</code>.</p>\n"
            ],
            "contentsRaw": "Prevents the popover from appearing when `true`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L55",
          "defaultValue": "false",
          "inheritedFrom": "IPopoverSharedProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the &quot;outermost&quot; overlays or mark the nested ones <code>usePortal={false}</code>.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enforceFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L38",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.enforceFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The amount of time in milliseconds the tooltip should remain open after\nthe user hovers off the trigger. The timer is canceled if the user mouses\nover the target before it expires.</p>\n"
            ],
            "contentsRaw": "The amount of time in milliseconds the tooltip should remain open after\nthe user hovers off the trigger. The timer is canceled if the user mouses\nover the target before it expires.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tooltip/tooltip.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hoverCloseDelay",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tooltip/tooltip.tsx#L27",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The amount of time in milliseconds the tooltip should wait before opening\nafter the user hovers over the trigger. The timer is canceled if the user\nmouses away from the target before it expires.</p>\n"
            ],
            "contentsRaw": "The amount of time in milliseconds the tooltip should wait before opening\nafter the user hovers over the trigger. The timer is canceled if the user\nmouses away from the target before it expires.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tooltip/tooltip.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hoverOpenDelay",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tooltip/tooltip.tsx#L35",
          "defaultValue": "100",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a popover that uses a <code>Portal</code> should automatically inherit the\ndark theme from its parent.</p>\n"
            ],
            "contentsRaw": "Whether a popover that uses a `Portal` should automatically inherit the\ndark theme from its parent.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inheritDarkTheme",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L78",
          "defaultValue": "true",
          "inheritedFrom": "IPopoverSharedProps.inheritDarkTheme",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover is visible. Passing this prop puts the popover in\ncontrolled mode, where the only way to change visibility is by updating\nthis property. If <code>disabled={true}</code>, this prop will be ignored, and the\npopover will remain closed.</p>\n"
            ],
            "contentsRaw": "Whether the popover is visible. Passing this prop puts the popover in\ncontrolled mode, where the only way to change visibility is by updating\nthis property. If `disabled={true}`, this prop will be ignored, and the\npopover will remain closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L87",
          "defaultValue": "undefined",
          "inheritedFrom": "IPopoverSharedProps.isOpen",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and <code>usePortal={true}</code>, the <code>Portal</code> containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.</p>\n"
            ],
            "contentsRaw": "If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "lazy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L47",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.lazy",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Popper modifier options, passed directly to internal Popper instance. See\n<a href=\"https://popper.js.org/popper-documentation.html#modifiers\">https://popper.js.org/popper-documentation.html#modifiers</a> for complete\ndetails.</p>\n"
            ],
            "contentsRaw": "Popper modifier options, passed directly to internal Popper instance. See\nhttps://popper.js.org/popper-documentation.html#modifiers for complete\ndetails.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L94",
          "inheritedFrom": "IPopoverSharedProps.modifiers",
          "type": "PopperModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determines the boundary element used by Popper for its <code>flip</code> and\n<code>preventOverflow</code> modifiers. Three shorthand keywords are supported;\nPopper will find the correct DOM element itself.</p>\n"
            ],
            "contentsRaw": "Determines the boundary element used by Popper for its `flip` and\n`preventOverflow` modifiers. Three shorthand keywords are supported;\nPopper will find the correct DOM element itself.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "boundary",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L32",
          "defaultValue": "\"scrollParent\"",
          "inheritedFrom": "IPopoverSharedProps.boundary",
          "type": "PopperBoundary"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked in controlled mode when the popover open state <em>would</em>\nchange due to user interaction.</p>\n"
            ],
            "contentsRaw": "Callback invoked in controlled mode when the popover open state *would*\nchange due to user interaction.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onInteraction",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L100",
          "inheritedFrom": "IPopoverSharedProps.onInteraction",
          "type": "(nextOpenState: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover should open when its target is focused. If <code>true</code>,\ntarget will render with <code>tabindex=&quot;0&quot;</code> to make it focusable via keyboard\nnavigation.</p>\n"
            ],
            "contentsRaw": "Whether the popover should open when its target is focused. If `true`,\ntarget will render with `tabindex=\"0\"` to make it focusable via keyboard\nnavigation.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "openOnTargetFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L108",
          "defaultValue": "true",
          "inheritedFrom": "IPopoverSharedProps.openOnTargetFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited string of class names applied to the popover element.</p>\n"
            ],
            "contentsRaw": "A space-delimited string of class names applied to the popover element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L113",
          "inheritedFrom": "IPopoverSharedProps.popoverClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the <code>Portal</code> element if\n<code>usePortal={true}</code>.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the `Portal` element if\n`usePortal={true}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L76",
          "inheritedFrom": "IOverlayableProps.portalClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L83",
          "defaultValue": "document.body",
          "inheritedFrom": "IOverlayableProps.portalContainer",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>The position (relative to the target) at which the popover should appear.</p>\n<p>The default value of <code>&quot;auto&quot;</code> will choose the best position when opened\nand will allow the popover to reposition itself to remain onscreen as the\nuser scrolls around.</p>\n"
            ],
            "contentsRaw": "The position (relative to the target) at which the popover should appear.\n\nThe default value of `\"auto\"` will choose the best position when opened\nand will allow the popover to reposition itself to remain onscreen as the\nuser scrolls around.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "position",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L123",
          "defaultValue": "\"auto\"",
          "inheritedFrom": "IPopoverSharedProps.position",
          "type": "PopoverPosition"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the target element.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the target element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L128",
          "inheritedFrom": "IPopoverSharedProps.targetClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props to spread to target element. Use <code>targetTagName</code> to change\nthe type of element rendered. Note that <code>ref</code> is not supported.</p>\n"
            ],
            "contentsRaw": "HTML props to spread to target element. Use `targetTagName` to change\nthe type of element rendered. Note that `ref` is not supported.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L134",
          "inheritedFrom": "IPopoverSharedProps.targetProps",
          "type": "HTMLAttributes<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name for the target element. This must be an HTML element to\nensure that it supports the necessary DOM event handlers.</p>\n<p>By default, a <code>&lt;span&gt;</code> tag is used so popovers appear as inline-block\nelements and can be nested in text. Use <code>&lt;div&gt;</code> tag for a block element.</p>\n"
            ],
            "contentsRaw": "HTML tag name for the target element. This must be an HTML element to\nensure that it supports the necessary DOM event handlers.\n\nBy default, a `<span>` tag is used so popovers appear as inline-block\nelements and can be nested in text. Use `<div>` tag for a block element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetTagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L144",
          "defaultValue": "\"span\"",
          "inheritedFrom": "IPopoverSharedProps.targetTagName",
          "type": "keyof IntrinsicElements"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the tooltip&#39;s appear/disappear\ntransition takes. This is used by React <code>CSSTransition</code> to know when a\ntransition completes and must match the duration of the animation in CSS.\nOnly set this prop if you override Blueprint&#39;s default transitions with\nnew transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the tooltip's appear/disappear\ntransition takes. This is used by React `CSSTransition` to know when a\ntransition completes and must match the duration of the animation in CSS.\nOnly set this prop if you override Blueprint's default transitions with\nnew transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tooltip/tooltip.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tooltip/tooltip.tsx#L45",
          "defaultValue": "100",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover should be rendered inside a <code>Portal</code> attached to\n<code>portalContainer</code> prop.</p>\n<p>Rendering content inside a <code>Portal</code> allows the popover content to escape\nthe physical bounds of its parent while still being positioned correctly\nrelative to its target. Using a <code>Portal</code> is necessary if any ancestor of\nthe target hides overflow or uses very complex positioning.</p>\n<p>Not using a <code>Portal</code> can result in smoother performance when scrolling\nand allows the popover content to inherit CSS styles from surrounding\nelements, but it remains subject to the overflow bounds of its ancestors.</p>\n"
            ],
            "contentsRaw": "Whether the popover should be rendered inside a `Portal` attached to\n`portalContainer` prop.\n\nRendering content inside a `Portal` allows the popover content to escape\nthe physical bounds of its parent while still being positioned correctly\nrelative to its target. Using a `Portal` is necessary if any ancestor of\nthe target hides overflow or uses very complex positioning.\n\nNot using a `Portal` can result in smoother performance when scrolling\nand allows the popover content to inherit CSS styles from surrounding\nelements, but it remains subject to the overflow bounds of its ancestors.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L160",
          "defaultValue": "true",
          "inheritedFrom": "IPopoverSharedProps.usePortal",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name for the wrapper element, which also receives the\n<code>className</code> prop.</p>\n"
            ],
            "contentsRaw": "HTML tag name for the wrapper element, which also receives the\n`className` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "wrapperTagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L167",
          "defaultValue": "\"span\"",
          "inheritedFrom": "IPopoverSharedProps.wrapperTagName",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "IPopoverArrowProps": {
      "fileName": "../core/src/components/popover/popoverArrow.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPopoverArrowProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverArrow.tsx#L42",
      "methods": [],
      "properties": [
        {
          "fileName": "../core/src/components/popover/popoverArrow.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "arrowProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverArrow.tsx#L43",
          "type": "PopperArrowProps"
        },
        {
          "fileName": "../core/src/components/popover/popoverArrow.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverArrow.tsx#L44",
          "type": "Placement"
        }
      ]
    },
    "IPopoverProps": {
      "fileName": "../core/src/components/popover/popover.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPopoverProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L33",
      "extends": [
        "IPopoverSharedProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the <code>esc</code> key (if enabled).</p>\n<p>Receives the event from the user&#39;s interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the <code>isOpen</code> prop, it\nwill not actually close itself until that prop becomes <code>false</code>.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the `esc` key (if enabled).\n\nReceives the event from the user's interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\nwill not actually close itself until that prop becomes `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L93",
          "inheritedFrom": "IOverlayableProps.onClose",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should acquire application focus when it first opens.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should acquire application focus when it first opens.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L23",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.autoFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determines the boundary element used by Popper for its <code>flip</code> and\n<code>preventOverflow</code> modifiers. Three shorthand keywords are supported;\nPopper will find the correct DOM element itself.</p>\n"
            ],
            "contentsRaw": "Determines the boundary element used by Popper for its `flip` and\n`preventOverflow` modifiers. Three shorthand keywords are supported;\nPopper will find the correct DOM element itself.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "boundary",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L32",
          "defaultValue": "\"scrollParent\"",
          "inheritedFrom": "IPopoverSharedProps.boundary",
          "type": "PopperBoundary"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L29",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.canEscapeKeyClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When enabled, <code>preventDefault()</code> is invoked on <code>click</code> events that close\nthis popover, which will prevent those clicks from closing outer\npopovers. When disabled, clicking inside a <code>Classes.POPOVER_DISMISS</code>\nelement will close the parent popover.</p>\n<p>See <a href=\"http://blueprintjs.com/docs/#core/components/popover.closing-on-click\">http://blueprintjs.com/docs/#core/components/popover.closing-on-click</a></p>\n"
            ],
            "contentsRaw": "When enabled, `preventDefault()` is invoked on `click` events that close\nthis popover, which will prevent those clicks from closing outer\npopovers. When disabled, clicking inside a `Classes.POPOVER_DISMISS`\nelement will close the parent popover.\n\nSee http://blueprintjs.com/docs/#core/components/popover.closing-on-click",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "captureDismiss",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L43",
          "defaultValue": "false",
          "inheritedFrom": "IPopoverSharedProps.captureDismiss",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The content displayed inside the popover. This can instead be provided as\nthe <em>second</em> element in <code>children</code> (first is <code>target</code>).</p>\n"
            ],
            "contentsRaw": "The content displayed inside the popover. This can instead be provided as\nthe _second_ element in `children` (first is `target`).",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "content",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L41",
          "type": "string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial opened state when uncontrolled.</p>\n"
            ],
            "contentsRaw": "Initial opened state when uncontrolled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultIsOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L49",
          "defaultValue": "false",
          "inheritedFrom": "IPopoverSharedProps.defaultIsOpen",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Prevents the popover from appearing when <code>true</code>.</p>\n"
            ],
            "contentsRaw": "Prevents the popover from appearing when `true`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L55",
          "defaultValue": "false",
          "inheritedFrom": "IPopoverSharedProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the &quot;outermost&quot; overlays or mark the nested ones <code>usePortal={false}</code>.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enforceFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L38",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.enforceFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables an invisible overlay beneath the popover that captures clicks and\nprevents interaction with the rest of the document until the popover is\nclosed. This prop is only available when <code>interactionKind</code> is\n<code>PopoverInteractionKind.CLICK</code>. When popovers with backdrop are opened,\nthey become focused.</p>\n"
            ],
            "contentsRaw": "Enables an invisible overlay beneath the popover that captures clicks and\nprevents interaction with the rest of the document until the popover is\nclosed. This prop is only available when `interactionKind` is\n`PopoverInteractionKind.CLICK`. When popovers with backdrop are opened,\nthey become focused.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hasBackdrop",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L57",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The amount of time in milliseconds the popover should remain open after\nthe user hovers off the trigger. The timer is canceled if the user mouses\nover the target before it expires.</p>\n"
            ],
            "contentsRaw": "The amount of time in milliseconds the popover should remain open after\nthe user hovers off the trigger. The timer is canceled if the user mouses\nover the target before it expires.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hoverCloseDelay",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L63",
          "defaultValue": "300",
          "inheritedFrom": "IPopoverSharedProps.hoverCloseDelay",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The amount of time in milliseconds the popover should wait before opening\nafter the user hovers over the trigger. The timer is canceled if the user\nmouses away from the target before it expires.</p>\n"
            ],
            "contentsRaw": "The amount of time in milliseconds the popover should wait before opening\nafter the user hovers over the trigger. The timer is canceled if the user\nmouses away from the target before it expires.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hoverOpenDelay",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L71",
          "defaultValue": "150",
          "inheritedFrom": "IPopoverSharedProps.hoverOpenDelay",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a popover that uses a <code>Portal</code> should automatically inherit the\ndark theme from its parent.</p>\n"
            ],
            "contentsRaw": "Whether a popover that uses a `Portal` should automatically inherit the\ndark theme from its parent.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inheritDarkTheme",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L78",
          "defaultValue": "true",
          "inheritedFrom": "IPopoverSharedProps.inheritDarkTheme",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The kind of interaction that triggers the display of the popover.</p>\n"
            ],
            "contentsRaw": "The kind of interaction that triggers the display of the popover.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactionKind",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L47",
          "defaultValue": "PopoverInteractionKind.CLICK",
          "type": "PopoverInteractionKind"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover is visible. Passing this prop puts the popover in\ncontrolled mode, where the only way to change visibility is by updating\nthis property. If <code>disabled={true}</code>, this prop will be ignored, and the\npopover will remain closed.</p>\n"
            ],
            "contentsRaw": "Whether the popover is visible. Passing this prop puts the popover in\ncontrolled mode, where the only way to change visibility is by updating\nthis property. If `disabled={true}`, this prop will be ignored, and the\npopover will remain closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L87",
          "defaultValue": "undefined",
          "inheritedFrom": "IPopoverSharedProps.isOpen",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and <code>usePortal={true}</code>, the <code>Portal</code> containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.</p>\n"
            ],
            "contentsRaw": "If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "lazy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L47",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.lazy",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to apply minimal styles to this popover, which includes removing\nthe arrow and adding <code>Classes.MINIMAL</code> to minimize and accelerate the\ntransitions.</p>\n"
            ],
            "contentsRaw": "Whether to apply minimal styles to this popover, which includes removing\nthe arrow and adding `Classes.MINIMAL` to minimize and accelerate the\ntransitions.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minimal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L65",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Popper modifier options, passed directly to internal Popper instance. See\n<a href=\"https://popper.js.org/popper-documentation.html#modifiers\">https://popper.js.org/popper-documentation.html#modifiers</a> for complete\ndetails.</p>\n"
            ],
            "contentsRaw": "Popper modifier options, passed directly to internal Popper instance. See\nhttps://popper.js.org/popper-documentation.html#modifiers for complete\ndetails.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L94",
          "inheritedFrom": "IPopoverSharedProps.modifiers",
          "type": "PopperModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props for the backdrop element. Can be combined with <code>backdropClassName</code>.</p>\n"
            ],
            "contentsRaw": "HTML props for the backdrop element. Can be combined with `backdropClassName`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L35",
          "type": "HTMLProps<HTMLDivElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked in controlled mode when the popover open state <em>would</em>\nchange due to user interaction.</p>\n"
            ],
            "contentsRaw": "Callback invoked in controlled mode when the popover open state *would*\nchange due to user interaction.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onInteraction",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L100",
          "inheritedFrom": "IPopoverSharedProps.onInteraction",
          "type": "(nextOpenState: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover should open when its target is focused. If <code>true</code>,\ntarget will render with <code>tabindex=&quot;0&quot;</code> to make it focusable via keyboard\nnavigation.</p>\n"
            ],
            "contentsRaw": "Whether the popover should open when its target is focused. If `true`,\ntarget will render with `tabindex=\"0\"` to make it focusable via keyboard\nnavigation.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "openOnTargetFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L108",
          "defaultValue": "true",
          "inheritedFrom": "IPopoverSharedProps.openOnTargetFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited string of class names applied to the popover element.</p>\n"
            ],
            "contentsRaw": "A space-delimited string of class names applied to the popover element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L113",
          "inheritedFrom": "IPopoverSharedProps.popoverClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref supplied to the <code>Classes.POPOVER</code> element.</p>\n"
            ],
            "contentsRaw": "Ref supplied to the `Classes.POPOVER` element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L70",
          "type": "(ref: HTMLDivElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the <code>Portal</code> element if\n<code>usePortal={true}</code>.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the `Portal` element if\n`usePortal={true}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L76",
          "inheritedFrom": "IOverlayableProps.portalClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L83",
          "defaultValue": "document.body",
          "inheritedFrom": "IOverlayableProps.portalContainer",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>The position (relative to the target) at which the popover should appear.</p>\n<p>The default value of <code>&quot;auto&quot;</code> will choose the best position when opened\nand will allow the popover to reposition itself to remain onscreen as the\nuser scrolls around.</p>\n"
            ],
            "contentsRaw": "The position (relative to the target) at which the popover should appear.\n\nThe default value of `\"auto\"` will choose the best position when opened\nand will allow the popover to reposition itself to remain onscreen as the\nuser scrolls around.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "position",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L123",
          "defaultValue": "\"auto\"",
          "inheritedFrom": "IPopoverSharedProps.position",
          "type": "PopoverPosition"
        },
        {
          "documentation": {
            "contents": [
              "<p>The target to which the popover content is attached. This can instead be\nprovided as the <em>first</em> element in <code>children</code>.</p>\n"
            ],
            "contentsRaw": "The target to which the popover content is attached. This can instead be\nprovided as the _first_ element in `children`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "target",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L76",
          "type": "string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the target element.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the target element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L128",
          "inheritedFrom": "IPopoverSharedProps.targetClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props to spread to target element. Use <code>targetTagName</code> to change\nthe type of element rendered. Note that <code>ref</code> is not supported.</p>\n"
            ],
            "contentsRaw": "HTML props to spread to target element. Use `targetTagName` to change\nthe type of element rendered. Note that `ref` is not supported.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L134",
          "inheritedFrom": "IPopoverSharedProps.targetProps",
          "type": "HTMLAttributes<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name for the target element. This must be an HTML element to\nensure that it supports the necessary DOM event handlers.</p>\n<p>By default, a <code>&lt;span&gt;</code> tag is used so popovers appear as inline-block\nelements and can be nested in text. Use <code>&lt;div&gt;</code> tag for a block element.</p>\n"
            ],
            "contentsRaw": "HTML tag name for the target element. This must be an HTML element to\nensure that it supports the necessary DOM event handlers.\n\nBy default, a `<span>` tag is used so popovers appear as inline-block\nelements and can be nested in text. Use `<div>` tag for a block element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "targetTagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L144",
          "defaultValue": "\"span\"",
          "inheritedFrom": "IPopoverSharedProps.targetTagName",
          "type": "keyof IntrinsicElements"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the overlay&#39;s enter/leave transition takes.\nThis is used by React <code>CSSTransition</code> to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint&#39;s default\ntransitions with new transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\nThis is used by React `CSSTransition` to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint's default\ntransitions with new transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L56",
          "defaultValue": "100",
          "inheritedFrom": "IOverlayableProps.transitionDuration",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover should be rendered inside a <code>Portal</code> attached to\n<code>portalContainer</code> prop.</p>\n<p>Rendering content inside a <code>Portal</code> allows the popover content to escape\nthe physical bounds of its parent while still being positioned correctly\nrelative to its target. Using a <code>Portal</code> is necessary if any ancestor of\nthe target hides overflow or uses very complex positioning.</p>\n<p>Not using a <code>Portal</code> can result in smoother performance when scrolling\nand allows the popover content to inherit CSS styles from surrounding\nelements, but it remains subject to the overflow bounds of its ancestors.</p>\n"
            ],
            "contentsRaw": "Whether the popover should be rendered inside a `Portal` attached to\n`portalContainer` prop.\n\nRendering content inside a `Portal` allows the popover content to escape\nthe physical bounds of its parent while still being positioned correctly\nrelative to its target. Using a `Portal` is necessary if any ancestor of\nthe target hides overflow or uses very complex positioning.\n\nNot using a `Portal` can result in smoother performance when scrolling\nand allows the popover content to inherit CSS styles from surrounding\nelements, but it remains subject to the overflow bounds of its ancestors.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L160",
          "defaultValue": "true",
          "inheritedFrom": "IPopoverSharedProps.usePortal",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name for the wrapper element, which also receives the\n<code>className</code> prop.</p>\n"
            ],
            "contentsRaw": "HTML tag name for the wrapper element, which also receives the\n`className` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "wrapperTagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L167",
          "defaultValue": "\"span\"",
          "inheritedFrom": "IPopoverSharedProps.wrapperTagName",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "IOffset": {
      "fileName": "../core/src/components/context-menu/contextMenu.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IOffset",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenu.tsx#L19",
      "methods": [],
      "properties": [
        {
          "fileName": "../core/src/components/context-menu/contextMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "left",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenu.tsx#L20",
          "type": "number"
        },
        {
          "fileName": "../core/src/components/context-menu/contextMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "top",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenu.tsx#L21",
          "type": "number"
        }
      ]
    },
    "IIconProps": {
      "fileName": "../core/src/components/icon/icon.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IIconProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L15",
      "extends": [
        "IIntentProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>This component does not support custom children. Use the <code>icon</code> prop.</p>\n"
            ],
            "contentsRaw": "This component does not support custom children. Use the `icon` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L17",
          "type": "never"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Color of icon. This is used as the <code>fill</code> attribute on the <code>&lt;svg&gt;</code> image\nso it will override any CSS <code>color</code> property, including that set by\n<code>intent</code>. If this prop is omitted, icon color is inherited from\nsurrounding text.</p>\n"
            ],
            "contentsRaw": "Color of icon. This is used as the `fill` attribute on the `<svg>` image\nso it will override any CSS `color` property, including that set by\n`intent`. If this prop is omitted, icon color is inherited from\nsurrounding text.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "color",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L25",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>String for the <code>title</code> attribute on the rendered element, which will appear\non hover as a native browser tooltip.</p>\n"
            ],
            "contentsRaw": "String for the `title` attribute on the rendered element, which will appear\non hover as a native browser tooltip.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "htmlTitle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L31",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon, or an icon element, to render. This prop is\nrequired because it determines the content of the component, but it can\nbe explicitly set to falsy values to render nothing.</p>\n<ul>\n<li>If <code>null</code> or <code>undefined</code> or <code>false</code>, this component will render\nnothing.</li>\n<li>If given an <code>IconName</code> (a string literal union of all icon names), that\nicon will be rendered as an <code>&lt;svg&gt;</code> with <code>&lt;path&gt;</code> tags. Unknown strings\nwill render a blank icon to occupy space.</li>\n<li>If given a <code>JSX.Element</code>, that element will be rendered and <em>all other\nprops on this component are ignored.</em> This type is supported to\nsimplify icon support in other Blueprint components. As a consumer, you\nshould avoid using <code>&lt;Icon icon={&lt;Element /&gt;}</code> directly; simply render\n<code>&lt;Element /&gt;</code> instead.</li>\n</ul>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon, or an icon element, to render. This prop is\nrequired because it determines the content of the component, but it can\nbe explicitly set to falsy values to render nothing.\n\n- If `null` or `undefined` or `false`, this component will render\n  nothing.\n- If given an `IconName` (a string literal union of all icon names), that\n  icon will be rendered as an `<svg>` with `<path>` tags. Unknown strings\n  will render a blank icon to occupy space.\n- If given a `JSX.Element`, that element will be rendered and _all other\n  props on this component are ignored._ This type is supported to\n  simplify icon support in other Blueprint components. As a consumer, you\n  should avoid using `<Icon icon={<Element />}` directly; simply render\n  `<Element />` instead.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L49",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Size of the icon, in pixels. Blueprint contains 16px and 20px SVG icon\nimages, and chooses the appropriate resolution based on this prop.</p>\n"
            ],
            "contentsRaw": "Size of the icon, in pixels. Blueprint contains 16px and 20px SVG icon\nimages, and chooses the appropriate resolution based on this prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "iconSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L56",
          "defaultValue": "Icon.SIZE_STANDARD = 16",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS style properties.</p>\n"
            ],
            "contentsRaw": "CSS style properties.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L59",
          "type": "CSSProperties"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag to use for the rendered element.</p>\n"
            ],
            "contentsRaw": "HTML tag to use for the rendered element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L65",
          "defaultValue": "\"span\"",
          "type": "keyof IntrinsicElements"
        },
        {
          "documentation": {
            "contents": [
              "<p>Description string. This string does not appear in normal browsers, but\nit increases accessibility. For instance, screen readers will use it for\naural feedback. By default, this is set to the icon&#39;s name. Pass an\nexplicit falsy value to disable.</p>\n"
            ],
            "contentsRaw": "Description string. This string does not appear in normal browsers, but\nit increases accessibility. For instance, screen readers will use it for\naural feedback. By default, this is set to the icon's name. Pass an\nexplicit falsy value to disable.",
            "metadata": {}
          },
          "fileName": "../core/src/components/icon/icon.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/icon/icon.tsx#L73",
          "type": "string | false | null"
        }
      ]
    },
    "ISpinnerProps": {
      "fileName": "../core/src/components/spinner/spinner.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ISpinnerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/spinner/spinner.tsx#L29",
      "extends": [
        "IProps",
        "IIntentProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Width and height of the spinner in pixels. The size cannot be less than\n10px. Constants are available for common sizes: <code>Spinner.SIZE_SMALL</code>,\n<code>Spinner.SIZE_STANDARD</code>, <code>Spinner.SIZE_LARGE</code>.</p>\n"
            ],
            "contentsRaw": "Width and height of the spinner in pixels. The size cannot be less than\n10px. Constants are available for common sizes: `Spinner.SIZE_SMALL`,\n`Spinner.SIZE_STANDARD`, `Spinner.SIZE_LARGE`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/spinner/spinner.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "size",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/spinner/spinner.tsx#L36",
          "defaultValue": "Spinner.SIZE_STANDARD = 50",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag for the two wrapper elements. If rendering a <code>&lt;Spinner&gt;</code> inside\nan <code>&lt;svg&gt;</code>, change this to an SVG element like <code>&quot;g&quot;</code>.</p>\n"
            ],
            "contentsRaw": "HTML tag for the two wrapper elements. If rendering a `<Spinner>` inside\nan `<svg>`, change this to an SVG element like `\"g\"`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/spinner/spinner.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/spinner/spinner.tsx#L43",
          "defaultValue": "\"div\"",
          "type": "keyof IntrinsicElements"
        },
        {
          "documentation": {
            "contents": [
              "<p>A value between 0 and 1 (inclusive) representing how far along the operation is.\nValues below 0 or above 1 will be interpreted as 0 or 1 respectively.\nOmitting this prop will result in an &quot;indeterminate&quot; spinner where the head spins indefinitely.</p>\n"
            ],
            "contentsRaw": "A value between 0 and 1 (inclusive) representing how far along the operation is.\nValues below 0 or above 1 will be interpreted as 0 or 1 respectively.\nOmitting this prop will result in an \"indeterminate\" spinner where the head spins indefinitely.",
            "metadata": {}
          },
          "fileName": "../core/src/components/spinner/spinner.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/spinner/spinner.tsx#L50",
          "type": "number"
        }
      ]
    },
    "IButtonProps": {
      "fileName": "../core/src/components/button/abstractButton.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IButtonProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L18",
      "extends": [
        "IActionProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether this button should use large styles.</p>\n"
            ],
            "contentsRaw": "Whether this button should use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L42",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If set to <code>true</code>, the button will display in an active state.\nThis is equivalent to setting <code>className={Classes.ACTIVE}</code>.</p>\n"
            ],
            "contentsRaw": "If set to `true`, the button will display in an active state.\nThis is equivalent to setting `className={Classes.ACTIVE}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "active",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L24",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this action is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether this action is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L52",
          "inheritedFrom": "IActionProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A ref handler that receives the native HTML element backing this component.</p>\n"
            ],
            "contentsRaw": "A ref handler that receives the native HTML element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elementRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L36",
          "type": "(ref: HTMLElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this button should expand to fill its container.</p>\n"
            ],
            "contentsRaw": "Whether this button should expand to fill its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L39",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render before the text.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render before the text.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L55",
          "inheritedFrom": "IActionProps.icon",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing <code>&quot;left&quot;</code> or <code>&quot;right&quot;</code> will align the button\ntext to that side and push <code>icon</code> and <code>rightIcon</code> to either edge. Passing\n<code>&quot;center&quot;</code> will center the text and icons together.</p>\n"
            ],
            "contentsRaw": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L33",
          "defaultValue": "Alignment.CENTER",
          "type": "Alignment"
        },
        {
          "documentation": {
            "contents": [
              "<p>If set to <code>true</code>, the button will display a centered loading spinner instead of its contents.\nThe width of the button is not affected by the value of this prop.</p>\n"
            ],
            "contentsRaw": "If set to `true`, the button will display a centered loading spinner instead of its contents.\nThe width of the button is not affected by the value of this prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L49",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this button should use minimal styles.</p>\n"
            ],
            "contentsRaw": "Whether this button should use minimal styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minimal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L52",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Click event handler.</p>\n"
            ],
            "contentsRaw": "Click event handler.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L58",
          "inheritedFrom": "IActionProps.onClick",
          "type": "(event: MouseEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render after the text.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render after the text.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rightIcon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L55",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this button should use small styles.</p>\n"
            ],
            "contentsRaw": "Whether this button should use small styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "small",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L58",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Action text. Can be any single React renderable.</p>\n"
            ],
            "contentsRaw": "Action text. Can be any single React renderable.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "text",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L61",
          "inheritedFrom": "IActionProps.text",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML <code>type</code> attribute of button. Common values are <code>&quot;button&quot;</code> and <code>&quot;submit&quot;</code>.\nNote that this prop has no effect on <code>AnchorButton</code>; it only affects <code>Button</code>.</p>\n"
            ],
            "contentsRaw": "HTML `type` attribute of button. Common values are `\"button\"` and `\"submit\"`.\nNote that this prop has no effect on `AnchorButton`; it only affects `Button`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/abstractButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/abstractButton.tsx#L65",
          "defaultValue": "\"button\"",
          "type": "string"
        }
      ]
    },
    "IElementRefProps": {
      "fileName": "../core/src/components/html/html.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IElementRefProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html/html.tsx#L11",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Ref handler to access the instance of the internal HTML element.</p>\n"
            ],
            "contentsRaw": "Ref handler to access the instance of the internal HTML element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html/html.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elementRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html/html.tsx#L13",
          "type": "(ref: E | null) => void"
        }
      ]
    },
    "IDialogProps": {
      "fileName": "../core/src/components/dialog/dialog.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDialogProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L19",
      "extends": [
        "IOverlayableProps",
        "IBackdropProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the <code>esc</code> key (if enabled).</p>\n<p>Receives the event from the user&#39;s interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the <code>isOpen</code> prop, it\nwill not actually close itself until that prop becomes <code>false</code>.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the `esc` key (if enabled).\n\nReceives the event from the user's interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\nwill not actually close itself until that prop becomes `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L93",
          "inheritedFrom": "IOverlayableProps.onClose",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should acquire application focus when it first opens.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should acquire application focus when it first opens.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L23",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.autoFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props for the backdrop element.</p>\n"
            ],
            "contentsRaw": "HTML props for the backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L129",
          "inheritedFrom": "IBackdropProps.backdropProps",
          "type": "HTMLProps<HTMLDivElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L29",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.canEscapeKeyClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canOutsideClickClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L136",
          "defaultValue": "true",
          "inheritedFrom": "IBackdropProps.canOutsideClickClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the &quot;outermost&quot; overlays or mark the nested ones <code>usePortal={false}</code>.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enforceFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L38",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.enforceFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Dialog always has a backdrop so this prop is excluded from the public API.</p>\n",
              {
                "tag": "internal"
              }
            ],
            "contentsRaw": "Dialog always has a backdrop so this prop is excluded from the public API.\n\n@internal",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hasBackdrop",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L30",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render in the\ndialog&#39;s header. Note that the header will only be rendered if <code>title</code> is\nprovided.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render in the\ndialog's header. Note that the header will only be rendered if `title` is\nprovided.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L37",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show the close button in the dialog&#39;s header.\nNote that the header will only be rendered if <code>title</code> is provided.</p>\n"
            ],
            "contentsRaw": "Whether to show the close button in the dialog's header.\nNote that the header will only be rendered if `title` is provided.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isCloseButtonShown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L44",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Toggles the visibility of the overlay and its children.\nThis prop is required because the component is controlled.</p>\n"
            ],
            "contentsRaw": "Toggles the visibility of the overlay and its children.\nThis prop is required because the component is controlled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L24",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and <code>usePortal={true}</code>, the <code>Portal</code> containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.</p>\n"
            ],
            "contentsRaw": "If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "lazy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L47",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.lazy",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS class names to apply to backdrop element.</p>\n"
            ],
            "contentsRaw": "CSS class names to apply to backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L126",
          "inheritedFrom": "IBackdropProps.backdropClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the <code>Portal</code> element if\n<code>usePortal={true}</code>.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the `Portal` element if\n`usePortal={true}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L76",
          "inheritedFrom": "IOverlayableProps.portalClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L83",
          "defaultValue": "document.body",
          "inheritedFrom": "IOverlayableProps.portalContainer",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles to apply to the dialog.</p>\n"
            ],
            "contentsRaw": "CSS styles to apply to the dialog.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L50",
          "defaultValue": "{}",
          "type": "CSSProperties"
        },
        {
          "documentation": {
            "contents": [
              "<p>Title of the dialog. If provided, an element with <code>Classes.DIALOG_HEADER</code>\nwill be rendered inside the dialog before any children elements.</p>\n"
            ],
            "contentsRaw": "Title of the dialog. If provided, an element with `Classes.DIALOG_HEADER`\nwill be rendered inside the dialog before any children elements.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L56",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the overlay&#39;s enter/leave transition takes.\nThis is used by React <code>CSSTransition</code> to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint&#39;s default\ntransitions with new transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\nThis is used by React `CSSTransition` to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint's default\ntransitions with new transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L56",
          "defaultValue": "100",
          "inheritedFrom": "IOverlayableProps.transitionDuration",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the transition for internal <code>CSSTransition</code>. Providing your own\nname here will require defining new CSS transition properties.</p>\n"
            ],
            "contentsRaw": "Name of the transition for internal `CSSTransition`. Providing your own\nname here will require defining new CSS transition properties.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L62",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should be wrapped in a <code>Portal</code>, which renders its contents in a new\nelement attached to <code>portalContainer</code> prop.</p>\n<p>This prop essentially determines which element is covered by the backdrop: if <code>false</code>,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the <code>Portal</code> is the <code>&lt;body&gt;</code> itself).</p>\n<p>Set this prop to <code>false</code> on nested overlays (such as <code>Dialog</code> or <code>Popover</code>) to ensure that they\nare rendered above their parents.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should be wrapped in a `Portal`, which renders its contents in a new\nelement attached to `portalContainer` prop.\n\nThis prop essentially determines which element is covered by the backdrop: if `false`,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the `Portal` is the `<body>` itself).\n\nSet this prop to `false` on nested overlays (such as `Dialog` or `Popover`) to ensure that they\nare rendered above their parents.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L70",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.usePortal",
          "type": "boolean"
        }
      ]
    },
    "IAlertProps": {
      "fileName": "../core/src/components/alert/alert.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IAlertProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L22",
      "extends": [
        "IOverlayLifecycleProps",
        "IProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onCancel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L93",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Handler invoked when the alert is canceled. Alerts can be <strong>canceled</strong> in the following ways:</p>\n<ul>\n<li>clicking the cancel button (if <code>cancelButtonText</code> is defined)</li>\n<li>pressing the escape key (if <code>canEscapeKeyCancel</code> is enabled)</li>\n<li>clicking on the overlay backdrop (if <code>canOutsideClickCancel</code> is enabled)</li>\n</ul>\n<p>If any of the <code>cancel</code> props are defined, then either <code>onCancel</code> or <code>onClose</code> must be defined.</p>\n"
                ],
                "contentsRaw": "Handler invoked when the alert is canceled. Alerts can be **canceled** in the following ways:\n- clicking the cancel button (if `cancelButtonText` is defined)\n- pressing the escape key (if `canEscapeKeyCancel` is enabled)\n- clicking on the overlay backdrop (if `canOutsideClickCancel` is enabled)\n\nIf any of the `cancel` props are defined, then either `onCancel` or `onClose` must be defined.",
                "metadata": {}
              },
              "fileName": "../core/src/components/alert/alert.tsx",
              "kind": "signature",
              "name": "onCancel",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L93",
              "parameters": [
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "evt",
                  "type": "SyntheticEvent<HTMLElement>"
                }
              ],
              "returnType": "void",
              "type": "(evt?: SyntheticEvent<HTMLElement>) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L107",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Handler invoked when the Alert is confirmed or canceled; see <code>onConfirm</code> and <code>onCancel</code> for more details.\nFirst argument is <code>true</code> if confirmed, <code>false</code> otherwise.\nThis is an alternative to defining separate <code>onConfirm</code> and <code>onCancel</code> handlers.</p>\n"
                ],
                "contentsRaw": "Handler invoked when the Alert is confirmed or canceled; see `onConfirm` and `onCancel` for more details.\nFirst argument is `true` if confirmed, `false` otherwise.\nThis is an alternative to defining separate `onConfirm` and `onCancel` handlers.",
                "metadata": {}
              },
              "fileName": "../core/src/components/alert/alert.tsx",
              "kind": "signature",
              "name": "onClose",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L107",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "confirmed",
                  "type": "boolean"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "evt",
                  "type": "SyntheticEvent<HTMLElement>"
                }
              ],
              "returnType": "void",
              "type": "(confirmed: boolean, evt?: SyntheticEvent<HTMLElement>) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onConfirm",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L100",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Handler invoked when the confirm button is clicked. Alerts can be <strong>confirmed</strong> in the following ways:</p>\n<ul>\n<li>clicking the confirm button</li>\n<li>focusing on the confirm button and pressing <code>enter</code> or <code>space</code></li>\n</ul>\n"
                ],
                "contentsRaw": "Handler invoked when the confirm button is clicked. Alerts can be **confirmed** in the following ways:\n- clicking the confirm button\n- focusing on the confirm button and pressing `enter` or `space`",
                "metadata": {}
              },
              "fileName": "../core/src/components/alert/alert.tsx",
              "kind": "signature",
              "name": "onConfirm",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L100",
              "parameters": [
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "evt",
                  "type": "SyntheticEvent<HTMLElement>"
                }
              ],
              "returnType": "void",
              "type": "(evt?: SyntheticEvent<HTMLElement>) => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Toggles the visibility of the alert.\nThis prop is required because the component is controlled.</p>\n"
            ],
            "contentsRaw": "Toggles the visibility of the alert.\nThis prop is required because the component is controlled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L62",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing <kbd>escape</kbd> when focused on the Alert should cancel the alert.\nIf this prop is enabled, then either <code>onCancel</code> or <code>onClose</code> must also be defined.</p>\n"
            ],
            "contentsRaw": "Whether pressing <kbd>escape</kbd> when focused on the Alert should cancel the alert.\nIf this prop is enabled, then either `onCancel` or `onClose` must also be defined.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyCancel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L28",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The text for the cancel button.\nIf this prop is defined, then either <code>onCancel</code> or <code>onClose</code> must also be defined.</p>\n"
            ],
            "contentsRaw": "The text for the cancel button.\nIf this prop is defined, then either `onCancel` or `onClose` must also be defined.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cancelButtonText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L41",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The text for the confirm (right-most) button.\nThis button will always appear, and uses the value of the <code>intent</code> prop below.</p>\n"
            ],
            "contentsRaw": "The text for the confirm (right-most) button.\nThis button will always appear, and uses the value of the `intent` prop below.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "confirmButtonText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L48",
          "defaultValue": "\"OK\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to display on the left side.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to display on the left side.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L51",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>The intent to be applied to the confirm (right-most) button.</p>\n"
            ],
            "contentsRaw": "The intent to be applied to the confirm (right-most) button.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L56",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether clicking outside the Alert should cancel the alert.\nIf this prop is enabled, then either <code>onCancel</code> or <code>onClose</code> must also be defined.</p>\n"
            ],
            "contentsRaw": "Whether clicking outside the Alert should cancel the alert.\nIf this prop is enabled, then either `onCancel` or `onClose` must also be defined.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canOutsideClickCancel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L35",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L83",
          "defaultValue": "document.body",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles to apply to the alert.</p>\n"
            ],
            "contentsRaw": "CSS styles to apply to the alert.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L67",
          "type": "CSSProperties"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the overlay&#39;s enter/leave transition takes.\nThis is used by React <code>CSSTransition</code> to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint&#39;s default\ntransitions with new transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\nThis is used by React `CSSTransition` to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint's default\ntransitions with new transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/alert/alert.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/alert/alert.tsx#L76",
          "defaultValue": "300",
          "type": "number"
        }
      ]
    },
    "IBreadcrumbProps": {
      "fileName": "../core/src/components/breadcrumbs/breadcrumb.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IBreadcrumbProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumb.tsx#L13",
      "extends": [
        "IActionProps",
        "ILinkProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this breadcrumb is the current breadcrumb.</p>\n"
            ],
            "contentsRaw": "Whether this breadcrumb is the current breadcrumb.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumb.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "current",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumb.tsx#L15",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this action is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether this action is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L52",
          "inheritedFrom": "IActionProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Link URL.</p>\n"
            ],
            "contentsRaw": "Link URL.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "href",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L67",
          "inheritedFrom": "ILinkProps.href",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render before the text.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render before the text.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L55",
          "inheritedFrom": "IActionProps.icon",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Click event handler.</p>\n"
            ],
            "contentsRaw": "Click event handler.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L58",
          "inheritedFrom": "IActionProps.onClick",
          "type": "(event: MouseEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Link target attribute. Use <code>&quot;_blank&quot;</code> to open in a new window.</p>\n"
            ],
            "contentsRaw": "Link target attribute. Use `\"_blank\"` to open in a new window.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "target",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L70",
          "inheritedFrom": "ILinkProps.target",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Action text. Can be any single React renderable.</p>\n"
            ],
            "contentsRaw": "Action text. Can be any single React renderable.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "text",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L61",
          "inheritedFrom": "IActionProps.text",
          "type": "React.ReactNode"
        }
      ]
    },
    "IMenuDividerProps": {
      "fileName": "../core/src/components/menu/menuDivider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IMenuDividerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuDivider.tsx#L14",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>This component does not support children.</p>\n"
            ],
            "contentsRaw": "This component does not support children.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuDivider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuDivider.tsx#L16",
          "type": "never"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Optional header title.</p>\n"
            ],
            "contentsRaw": "Optional header title.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuDivider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuDivider.tsx#L19",
          "type": "React.ReactNode"
        }
      ]
    },
    "ITextProps": {
      "fileName": "../core/src/components/text/text.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITextProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/text/text.tsx#L13",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates that this component should be truncated with an ellipsis if it overflows its container.\nThe <code>title</code> attribute will also be added when content overflows to show the full text of the children on hover.</p>\n"
            ],
            "contentsRaw": "Indicates that this component should be truncated with an ellipsis if it overflows its container.\nThe `title` attribute will also be added when content overflows to show the full text of the children on hover.",
            "metadata": {}
          },
          "fileName": "../core/src/components/text/text.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ellipsize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/text/text.tsx#L19",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name to use for rendered element.</p>\n"
            ],
            "contentsRaw": "HTML tag name to use for rendered element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/text/text.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/text/text.tsx#L25",
          "defaultValue": "\"div\"",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "IMenuItemProps": {
      "fileName": "../core/src/components/menu/menuItem.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IMenuItemProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L19",
      "extends": [
        "IActionProps",
        "ILinkProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Right-aligned label content, useful for displaying hotkeys.</p>\n"
            ],
            "contentsRaw": "Right-aligned label content, useful for displaying hotkeys.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L52",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this menu item should appear with an active state.</p>\n"
            ],
            "contentsRaw": "Whether this menu item should appear with an active state.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "active",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L25",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this menu item is non-interactive. Enabling this prop will ignore <code>href</code>, <code>tabIndex</code>,\nand mouse event handlers (in particular click, down, enter, leave).</p>\n"
            ],
            "contentsRaw": "Whether this menu item is non-interactive. Enabling this prop will ignore `href`, `tabIndex`,\nand mouse event handlers (in particular click, down, enter, leave).",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L39",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Link URL.</p>\n"
            ],
            "contentsRaw": "Link URL.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "href",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L67",
          "inheritedFrom": "ILinkProps.href",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render before the text.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render before the text.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L55",
          "inheritedFrom": "IActionProps.icon",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Right-aligned label text content, useful for displaying hotkeys.</p>\n<p>This prop actually supports JSX elements, but TypeScript will throw an error because\n<code>HTMLAttributes</code> only allows strings. Use <code>labelElement</code> to supply a JSX element in TypeScript.</p>\n"
            ],
            "contentsRaw": "Right-aligned label text content, useful for displaying hotkeys.\n\nThis prop actually supports JSX elements, but TypeScript will throw an error because\n`HTMLAttributes` only allows strings. Use `labelElement` to supply a JSX element in TypeScript.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L47",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Children of this component will be rendered in a <strong>submenu</strong> that appears when hovering or\nclicking on this menu item.</p>\n<p>Use <code>text</code> prop for the content of the menu item itself.</p>\n"
            ],
            "contentsRaw": "Children of this component will be rendered in a __submenu__ that appears when hovering or\nclicking on this menu item.\n\nUse `text` prop for the content of the menu item itself.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L33",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the text should be allowed to wrap to multiple lines.\nIf <code>false</code>, text will be truncated with an ellipsis when it reaches <code>max-width</code>.</p>\n"
            ],
            "contentsRaw": "Whether the text should be allowed to wrap to multiple lines.\nIf `false`, text will be truncated with an ellipsis when it reaches `max-width`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "multiline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L59",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Click event handler.</p>\n"
            ],
            "contentsRaw": "Click event handler.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L58",
          "inheritedFrom": "IActionProps.onClick",
          "type": "(event: MouseEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>Popover</code>. Note that <code>content</code> and <code>minimal</code> cannot be\nchanged and <code>usePortal</code> defaults to <code>false</code> so all submenus will live in\nthe same container.</p>\n"
            ],
            "contentsRaw": "Props to spread to `Popover`. Note that `content` and `minimal` cannot be\nchanged and `usePortal` defaults to `false` so all submenus will live in\nthe same container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L66",
          "type": "Partial<IPopoverProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether an enabled item without a submenu should automatically close its parent popover when clicked.</p>\n"
            ],
            "contentsRaw": "Whether an enabled item without a submenu should automatically close its parent popover when clicked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "shouldDismissPopover",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L72",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the HTML tag that wraps the MenuItem.</p>\n"
            ],
            "contentsRaw": "Name of the HTML tag that wraps the MenuItem.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L78",
          "defaultValue": "\"a\"",
          "type": "keyof IntrinsicElements"
        },
        {
          "documentation": {
            "contents": [
              "<p>Link target attribute. Use <code>&quot;_blank&quot;</code> to open in a new window.</p>\n"
            ],
            "contentsRaw": "Link target attribute. Use `\"_blank\"` to open in a new window.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "target",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L70",
          "inheritedFrom": "ILinkProps.target",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Item text, required for usability.</p>\n"
            ],
            "contentsRaw": "Item text, required for usability.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "text",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menuItem.tsx#L22",
          "type": "React.ReactNode"
        }
      ]
    },
    "IMenuProps": {
      "fileName": "../core/src/components/menu/menu.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IMenuProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menu.tsx#L15",
      "extends": [
        "IProps",
        "HTMLAttributes<HTMLUListElement>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the menu items in this menu should use a large appearance.</p>\n"
            ],
            "contentsRaw": "Whether the menu items in this menu should use a large appearance.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menu.tsx#L17",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives the HTML <code>&lt;ul&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives the HTML `<ul>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/menu/menu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ulRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/menu/menu.tsx#L20",
          "type": "(ref: HTMLUListElement | null) => any"
        }
      ]
    },
    "IOverflowListProps": {
      "fileName": "../core/src/components/overflow-list/overflowList.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IOverflowListProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L24",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Which direction the items should collapse from: start or end of the\nchildren. This also determines whether <code>overflowRenderer</code> appears before\n(<code>START</code>) or after (<code>END</code>) the visible items.</p>\n"
            ],
            "contentsRaw": "Which direction the items should collapse from: start or end of the\nchildren. This also determines whether `overflowRenderer` appears before\n(`START`) or after (`END`) the visible items.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "collapseFrom",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L31",
          "defaultValue": "Boundary.START",
          "type": "Boundary"
        },
        {
          "documentation": {
            "contents": [
              "<p>All items to display in the list. Items that do not fit in the container\nwill be rendered in the overflow instead.</p>\n"
            ],
            "contentsRaw": "All items to display in the list. Items that do not fit in the container\nwill be rendered in the overflow instead.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L37",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The minimum number of visible items that should never collapse into the\noverflow menu, regardless of DOM dimensions.</p>\n"
            ],
            "contentsRaw": "The minimum number of visible items that should never collapse into the\noverflow menu, regardless of DOM dimensions.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minVisibleItems",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L44",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, all parent DOM elements of the container will also be\nobserved. If changes to a parent&#39;s size is detected, the overflow will be\nrecalculated.</p>\n<p>Only enable this prop if the overflow should be recalculated when a\nparent element resizes in a way that does not also cause the\n<code>OverflowList</code> to resize.</p>\n"
            ],
            "contentsRaw": "If `true`, all parent DOM elements of the container will also be\nobserved. If changes to a parent's size is detected, the overflow will be\nrecalculated.\n\nOnly enable this prop if the overflow should be recalculated when a\nparent element resizes in a way that does not also cause the\n`OverflowList` to resize.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "observeParents",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L56",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the overflowed items change. This is called once\nafter the DOM has settled, rather that on every intermediate change. It\nis not invoked if resizing produces an unchanged overflow state.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the overflowed items change. This is called once\nafter the DOM has settled, rather that on every intermediate change. It\nis not invoked if resizing produces an unchanged overflow state.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOverflow",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L63",
          "type": "(overflowItems: T[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render the overflowed items. Unlike\n<code>visibleItemRenderer</code>, this prop is invoked once with all items that do\nnot fit in the container.</p>\n<p>Typical use cases for this prop will put overflowed items in a dropdown\nmenu or display a &quot;+X items&quot; label.</p>\n"
            ],
            "contentsRaw": "Callback invoked to render the overflowed items. Unlike\n`visibleItemRenderer`, this prop is invoked once with all items that do\nnot fit in the container.\n\nTypical use cases for this prop will put overflowed items in a dropdown\nmenu or display a \"+X items\" label.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "overflowRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L73",
          "type": "(overflowItems: T[]) => React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS properties to apply to the root element.</p>\n"
            ],
            "contentsRaw": "CSS properties to apply to the root element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L76",
          "type": "CSSProperties"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag name for the container element.</p>\n"
            ],
            "contentsRaw": "HTML tag name for the container element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L82",
          "defaultValue": "\"div\"",
          "type": "keyof IntrinsicElements"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render each visible item.\nRemember to set a <code>key</code> on the rendered element!</p>\n"
            ],
            "contentsRaw": "Callback invoked to render each visible item.\nRemember to set a `key` on the rendered element!",
            "metadata": {}
          },
          "fileName": "../core/src/components/overflow-list/overflowList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "visibleItemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overflow-list/overflowList.tsx#L88",
          "type": "(item: T, index: number) => React.ReactChild"
        }
      ]
    },
    "IBreadcrumbsProps": {
      "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IBreadcrumbsProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L20",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render visible breadcrumbs. Best practice is to\nrender a <code>&lt;Breadcrumb&gt;</code> element. If <code>currentBreadcrumbRenderer</code> is also\nsupplied, that callback will be used for the current breadcrumb instead.</p>\n"
            ],
            "contentsRaw": "Callback invoked to render visible breadcrumbs. Best practice is to\nrender a `<Breadcrumb>` element. If `currentBreadcrumbRenderer` is also\nsupplied, that callback will be used for the current breadcrumb instead.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "breadcrumbRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L27",
          "defaultValue": "Breadcrumb",
          "type": "(props: IBreadcrumbProps) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Which direction the breadcrumbs should collapse from: start or end.</p>\n"
            ],
            "contentsRaw": "Which direction the breadcrumbs should collapse from: start or end.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "collapseFrom",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L33",
          "defaultValue": "Boundary.START",
          "type": "Boundary"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render the current breadcrumb, which is the last\nelement in the <code>items</code> array.</p>\n<p>If this prop is omitted, <code>breadcrumbRenderer</code> will be invoked for the\ncurrent breadcrumb instead.</p>\n"
            ],
            "contentsRaw": "Callback invoked to render the current breadcrumb, which is the last\nelement in the `items` array.\n\nIf this prop is omitted, `breadcrumbRenderer` will be invoked for the\ncurrent breadcrumb instead.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "currentBreadcrumbRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L42",
          "type": "(props: IBreadcrumbProps) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>All breadcrumbs to display. Breadcrumbs that do not fit in the container\nwill be rendered in an overflow menu instead.</p>\n"
            ],
            "contentsRaw": "All breadcrumbs to display. Breadcrumbs that do not fit in the container\nwill be rendered in an overflow menu instead.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L48",
          "type": "IBreadcrumbProps[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The minimum number of visible breadcrumbs that should never collapse into\nthe overflow menu, regardless of DOM dimensions.</p>\n"
            ],
            "contentsRaw": "The minimum number of visible breadcrumbs that should never collapse into\nthe overflow menu, regardless of DOM dimensions.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minVisibleItems",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L55",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>OverflowList</code>. Note that <code>items</code>,\n<code>overflowRenderer</code>, and <code>visibleItemRenderer</code> cannot be changed.</p>\n"
            ],
            "contentsRaw": "Props to spread to `OverflowList`. Note that `items`,\n`overflowRenderer`, and `visibleItemRenderer` cannot be changed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "overflowListProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L61",
          "type": "Partial<IOverflowListProps<IBreadcrumbProps>>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to the <code>Popover</code> showing the overflow menu.</p>\n"
            ],
            "contentsRaw": "Props to spread to the `Popover` showing the overflow menu.",
            "metadata": {}
          },
          "fileName": "../core/src/components/breadcrumbs/breadcrumbs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/breadcrumbs/breadcrumbs.tsx#L66",
          "type": "IPopoverProps"
        }
      ]
    },
    "IButtonGroupProps": {
      "fileName": "../core/src/components/button/buttonGroup.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IButtonGroupProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/buttonGroup.tsx#L13",
      "extends": [
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing <code>&quot;left&quot;</code> or <code>&quot;right&quot;</code> will align the button\ntext to that side and push <code>icon</code> and <code>rightIcon</code> to either edge. Passing\n<code>&quot;center&quot;</code> will center the text and icons together.</p>\n"
            ],
            "contentsRaw": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/buttonGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/buttonGroup.tsx#L20",
          "type": "Alignment"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the button group should take up the full width of its container.</p>\n"
            ],
            "contentsRaw": "Whether the button group should take up the full width of its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/buttonGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/buttonGroup.tsx#L26",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the child buttons should appear with large styling.</p>\n"
            ],
            "contentsRaw": "Whether the child buttons should appear with large styling.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/buttonGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/buttonGroup.tsx#L38",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the child buttons should appear with minimal styling.</p>\n"
            ],
            "contentsRaw": "Whether the child buttons should appear with minimal styling.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/buttonGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minimal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/buttonGroup.tsx#L32",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the button group should appear with vertical styling.</p>\n"
            ],
            "contentsRaw": "Whether the button group should appear with vertical styling.",
            "metadata": {}
          },
          "fileName": "../core/src/components/button/buttonGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/button/buttonGroup.tsx#L44",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "ICalloutProps": {
      "documentation": {
        "contents": [
          "<p>This component also supports the full range of HTML <code>&lt;div&gt;</code> props.</p>\n"
        ],
        "contentsRaw": "This component also supports the full range of HTML `<div>` props.",
        "metadata": {}
      },
      "fileName": "../core/src/components/callout/callout.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICalloutProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/callout/callout.tsx#L16",
      "extends": [
        "IIntentProps",
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render on the left side.</p>\n<p>If this prop is omitted or <code>undefined</code>, the <code>intent</code> prop will determine a default icon.\nIf this prop is explicitly <code>null</code>, no icon will be displayed (regardless of <code>intent</code>).</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render on the left side.\n\nIf this prop is omitted or `undefined`, the `intent` prop will determine a default icon.\nIf this prop is explicitly `null`, no icon will be displayed (regardless of `intent`).",
            "metadata": {}
          },
          "fileName": "../core/src/components/callout/callout.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/callout/callout.tsx#L23",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to background, title, and icon.</p>\n<p>Defining this prop also applies a default icon, if the <code>icon</code> prop is omitted.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to background, title, and icon.\n\nDefining this prop also applies a default icon, if the `icon` prop is omitted.",
            "metadata": {}
          },
          "fileName": "../core/src/components/callout/callout.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/callout/callout.tsx#L30",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>String content of optional title element.</p>\n<p>Due to a conflict with the HTML prop types, to provide JSX content simply\npass <code>&lt;H4&gt;JSX title content&lt;/H4&gt;</code> as first <code>children</code> element instead of\nusing this prop (note uppercase tag name to use the Blueprint Heading\ncomponent).</p>\n"
            ],
            "contentsRaw": "String content of optional title element.\n\nDue to a conflict with the HTML prop types, to provide JSX content simply\npass `<H4>JSX title content</H4>` as first `children` element instead of\nusing this prop (note uppercase tag name to use the Blueprint Heading\ncomponent).",
            "metadata": {}
          },
          "fileName": "../core/src/components/callout/callout.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/callout/callout.tsx#L40",
          "type": "string"
        }
      ]
    },
    "ICardProps": {
      "fileName": "../core/src/components/card/card.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICardProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/card/card.tsx#L13",
      "extends": [
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Controls the intensity of the drop shadow beneath the card: the higher\nthe elevation, the higher the drop shadow. At elevation <code>0</code>, no drop\nshadow is applied.</p>\n"
            ],
            "contentsRaw": "Controls the intensity of the drop shadow beneath the card: the higher\nthe elevation, the higher the drop shadow. At elevation `0`, no drop\nshadow is applied.",
            "metadata": {}
          },
          "fileName": "../core/src/components/card/card.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elevation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/card/card.tsx#L21",
          "defaultValue": "0",
          "type": "Elevation"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the card should respond to user interactions. If set to <code>true</code>,\nhovering over the card will increase the card&#39;s elevation\nand change the mouse cursor to a pointer.</p>\n<p>Recommended when <code>onClick</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Whether the card should respond to user interactions. If set to `true`,\nhovering over the card will increase the card's elevation\nand change the mouse cursor to a pointer.\n\nRecommended when `onClick` is also defined.",
            "metadata": {}
          },
          "fileName": "../core/src/components/card/card.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/card/card.tsx#L32",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the card is clicked.\nRecommended when <code>interactive</code> is <code>true</code>.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the card is clicked.\nRecommended when `interactive` is `true`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/card/card.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/card/card.tsx#L38",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        }
      ]
    },
    "ICollapseProps": {
      "fileName": "../core/src/components/collapse/collapse.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICollapseProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L14",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Component to render as the root element.\nUseful when rendering a <code>Collapse</code> inside a <code>&lt;table&gt;</code>, for instance.</p>\n"
            ],
            "contentsRaw": "Component to render as the root element.\nUseful when rendering a `Collapse` inside a `<table>`, for instance.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "component",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L20",
          "defaultValue": "\"div\"",
          "type": "React.ReactType"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the component is open or closed.</p>\n"
            ],
            "contentsRaw": "Whether the component is open or closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L26",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the child components will remain mounted when the <code>Collapse</code> is closed.\nSetting to true may improve performance by avoiding re-mounting children.</p>\n"
            ],
            "contentsRaw": "Whether the child components will remain mounted when the `Collapse` is closed.\nSetting to true may improve performance by avoiding re-mounting children.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "keepChildrenMounted",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L33",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The length of time the transition takes, in milliseconds. This must match\nthe duration of the animation in CSS. Only set this prop if you override\nBlueprint&#39;s default transitions with new transitions of a different\nlength.</p>\n"
            ],
            "contentsRaw": "The length of time the transition takes, in milliseconds. This must match\nthe duration of the animation in CSS. Only set this prop if you override\nBlueprint's default transitions with new transitions of a different\nlength.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapse/collapse.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapse/collapse.tsx#L42",
          "defaultValue": "200",
          "type": "number"
        }
      ]
    },
    "ICollapsibleListProps": {
      "fileName": "../core/src/components/collapsible-list/collapsibleList.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICollapsibleListProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapsible-list/collapsibleList.tsx#L22",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Which direction the items should collapse from: start or end of the children.</p>\n"
            ],
            "contentsRaw": "Which direction the items should collapse from: start or end of the children.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapsible-list/collapsibleList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "collapseFrom",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapsible-list/collapsibleList.tsx#L43",
          "defaultValue": "Boundary.START",
          "type": "Boundary"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to the dropdown.</p>\n"
            ],
            "contentsRaw": "Props to pass to the dropdown.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapsible-list/collapsibleList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dropdownProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapsible-list/collapsibleList.tsx#L31",
          "type": "IPopoverProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Element to render as dropdown target with <code>CLICK</code> interaction to show collapsed menu.</p>\n"
            ],
            "contentsRaw": "Element to render as dropdown target with `CLICK` interaction to show collapsed menu.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapsible-list/collapsibleList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dropdownTarget",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapsible-list/collapsibleList.tsx#L26",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS class names to add to <code>&lt;li&gt;</code> tags containing each visible item and the dropdown.</p>\n"
            ],
            "contentsRaw": "CSS class names to add to `<li>` tags containing each visible item and the dropdown.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapsible-list/collapsibleList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "visibleItemClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapsible-list/collapsibleList.tsx#L48",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Exact number of visible items.</p>\n"
            ],
            "contentsRaw": "Exact number of visible items.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapsible-list/collapsibleList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "visibleItemCount",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapsible-list/collapsibleList.tsx#L54",
          "defaultValue": "3",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render each visible item. The item will be wrapped in an <code>li</code> with\nthe optional <code>visibleItemClassName</code> prop.</p>\n"
            ],
            "contentsRaw": "Callback invoked to render each visible item. The item will be wrapped in an `li` with\nthe optional `visibleItemClassName` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/collapsible-list/collapsibleList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "visibleItemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/collapsible-list/collapsibleList.tsx#L37",
          "type": "(props: IMenuItemProps, index: number) => Element"
        }
      ]
    },
    "IContextMenuTargetComponent": {
      "fileName": "../core/src/components/context-menu/contextMenuTarget.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IContextMenuTargetComponent",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenuTarget.tsx#L19",
      "extends": [
        "Component"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/context-menu/contextMenuTarget.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onContextMenuClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenuTarget.tsx#L22",
          "signatures": [
            {
              "fileName": "../core/src/components/context-menu/contextMenuTarget.tsx",
              "kind": "signature",
              "name": "onContextMenuClose",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenuTarget.tsx#L22",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/context-menu/contextMenuTarget.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenuTarget.tsx#L20",
          "signatures": [
            {
              "fileName": "../core/src/components/context-menu/contextMenuTarget.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenuTarget.tsx#L20",
              "parameters": [],
              "returnType": "ReactElement<any> | null | undefined",
              "type": "() => ReactElement<any> | null | undefined"
            }
          ]
        },
        {
          "fileName": "../core/src/components/context-menu/contextMenuTarget.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "renderContextMenu",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenuTarget.tsx#L21",
          "signatures": [
            {
              "fileName": "../core/src/components/context-menu/contextMenuTarget.tsx",
              "kind": "signature",
              "name": "renderContextMenu",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/context-menu/contextMenuTarget.tsx#L21",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "e",
                  "type": "MouseEvent<HTMLElement>"
                }
              ],
              "returnType": "Element | undefined",
              "type": "(e: MouseEvent<HTMLElement>) => Element | undefined"
            }
          ]
        }
      ],
      "properties": []
    },
    "IDividerProps": {
      "fileName": "../core/src/components/divider/divider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDividerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/divider/divider.tsx#L13",
      "extends": [
        "IProps",
        "HTMLAttributes<HTMLElement>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML tag to use for element.</p>\n"
            ],
            "contentsRaw": "HTML tag to use for element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/divider/divider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/divider/divider.tsx#L18",
          "defaultValue": "\"div\"",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "IEditableTextProps": {
      "fileName": "../core/src/components/editable-text/editableText.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IEditableTextProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L17",
      "extends": [
        "IIntentProps",
        "IProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onCancel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L79",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when user cancels input with the <code>esc</code> key. Receives last confirmed value.</p>\n"
                ],
                "contentsRaw": "Callback invoked when user cancels input with the `esc` key. Receives last confirmed value.",
                "metadata": {}
              },
              "fileName": "../core/src/components/editable-text/editableText.tsx",
              "kind": "signature",
              "name": "onCancel",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L79",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(value: string) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L82",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when user changes input in any way.</p>\n"
                ],
                "contentsRaw": "Callback invoked when user changes input in any way.",
                "metadata": {}
              },
              "fileName": "../core/src/components/editable-text/editableText.tsx",
              "kind": "signature",
              "name": "onChange",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L82",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(value: string) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onConfirm",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L85",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when user confirms value with <code>enter</code> key or by blurring input.</p>\n"
                ],
                "contentsRaw": "Callback invoked when user confirms value with `enter` key or by blurring input.",
                "metadata": {}
              },
              "fileName": "../core/src/components/editable-text/editableText.tsx",
              "kind": "signature",
              "name": "onConfirm",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L85",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(value: string) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onEdit",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L88",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked after the user enters edit mode.</p>\n"
                ],
                "contentsRaw": "Callback invoked after the user enters edit mode.",
                "metadata": {}
              },
              "fileName": "../core/src/components/editable-text/editableText.tsx",
              "kind": "signature",
              "name": "onEdit",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L88",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(value: string) => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Maximum number of lines before scrolling begins, when <code>multiline</code>.</p>\n"
            ],
            "contentsRaw": "Maximum number of lines before scrolling begins, when `multiline`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxLines",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L54",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Default text value of uncontrolled input.</p>\n"
            ],
            "contentsRaw": "Default text value of uncontrolled input.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L27",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the text can be edited.</p>\n"
            ],
            "contentsRaw": "Whether the text can be edited.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L33",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the component is currently being edited.</p>\n"
            ],
            "contentsRaw": "Whether the component is currently being edited.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isEditing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L36",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Maximum number of characters allowed. Unlimited by default.</p>\n"
            ],
            "contentsRaw": "Maximum number of characters allowed. Unlimited by default.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxLength",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L39",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and in multiline mode, the <code>enter</code> key will trigger onConfirm and <code>mod+enter</code>\nwill insert a newline. If <code>false</code>, the key bindings are inverted such that <code>enter</code>\nadds a newline.</p>\n"
            ],
            "contentsRaw": "If `true` and in multiline mode, the `enter` key will trigger onConfirm and `mod+enter`\nwill insert a newline. If `false`, the key bindings are inverted such that `enter`\nadds a newline.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "confirmOnEnterKey",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L24",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Minimum number of lines (essentially minimum height), when <code>multiline</code>.</p>\n"
            ],
            "contentsRaw": "Minimum number of lines (essentially minimum height), when `multiline`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minLines",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L60",
          "defaultValue": "1",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Minimum width in pixels of the input, when not <code>multiline</code>.</p>\n"
            ],
            "contentsRaw": "Minimum width in pixels of the input, when not `multiline`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L42",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the component supports multiple lines of text.\nThis prop should not be changed during the component&#39;s lifetime.</p>\n"
            ],
            "contentsRaw": "Whether the component supports multiple lines of text.\nThis prop should not be changed during the component's lifetime.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "multiline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L49",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Placeholder text when there is no value.</p>\n"
            ],
            "contentsRaw": "Placeholder text when there is no value.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L66",
          "defaultValue": "\"Click to Edit\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the entire text field should be selected on focus.\nIf <code>false</code>, the cursor is placed at the end of the text.</p>\n"
            ],
            "contentsRaw": "Whether the entire text field should be selected on focus.\nIf `false`, the cursor is placed at the end of the text.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectAllOnFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L73",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text value of controlled input.</p>\n"
            ],
            "contentsRaw": "Text value of controlled input.",
            "metadata": {}
          },
          "fileName": "../core/src/components/editable-text/editableText.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/editable-text/editableText.tsx#L76",
          "type": "string"
        }
      ]
    },
    "IControlGroupProps": {
      "fileName": "../core/src/components/forms/controlGroup.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IControlGroupProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controlGroup.tsx#L12",
      "extends": [
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control group should take up the full width of its container.</p>\n"
            ],
            "contentsRaw": "Whether the control group should take up the full width of its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controlGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controlGroup.tsx#L17",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control group should appear with vertical styling.</p>\n"
            ],
            "contentsRaw": "Whether the control group should appear with vertical styling.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controlGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controlGroup.tsx#L23",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "IControlProps": {
      "fileName": "../core/src/components/forms/controls.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IControlProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L19",
      "extends": [
        "IProps",
        "InputHTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the control should appear as an inline element.</p>\n"
            ],
            "contentsRaw": "Whether the control should appear as an inline element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L44",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Alignment of the indicator within container.</p>\n"
            ],
            "contentsRaw": "Alignment of the indicator within container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignIndicator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L26",
          "defaultValue": "Alignment.LEFT",
          "type": "Alignment"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX label for the control.</p>\n"
            ],
            "contentsRaw": "JSX label for the control.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L32",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is initially checked (uncontrolled mode).</p>\n"
            ],
            "contentsRaw": "Whether the control is initially checked (uncontrolled mode).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultChecked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L35",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the control is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L38",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is checked.</p>\n"
            ],
            "contentsRaw": "Whether the control is checked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "checked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L29",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives HTML <code>&lt;input&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives HTML `<input>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L41",
          "type": "(ref: HTMLInputElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text label for the control.</p>\n<p>Use <code>children</code> or <code>labelElement</code> to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because <code>HTMLAttributes</code> only allows strings.</p>\n"
            ],
            "contentsRaw": "Text label for the control.\n\nUse `children` or `labelElement` to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because `HTMLAttributes` only allows strings.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L52",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX Element label for the control.</p>\n<p>This prop is a workaround for TypeScript consumers as the type definition for <code>label</code> only\naccepts strings. JavaScript consumers can provide a JSX element directly to <code>label</code>.</p>\n"
            ],
            "contentsRaw": "JSX Element label for the control.\n\nThis prop is a workaround for TypeScript consumers as the type definition for `label` only\naccepts strings. JavaScript consumers can provide a JSX element directly to `label`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L60",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this control should use large styles.</p>\n"
            ],
            "contentsRaw": "Whether this control should use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L63",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Event handler invoked when input value is changed.</p>\n"
            ],
            "contentsRaw": "Event handler invoked when input value is changed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L66",
          "type": "React.FormEventHandler<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the HTML tag that wraps the checkbox.</p>\n<p>By default a <code>&lt;label&gt;</code> is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you&#39;re listening to click events from a\nparent element (as the label can register duplicate clicks).</p>\n"
            ],
            "contentsRaw": "Name of the HTML tag that wraps the checkbox.\n\nBy default a `<label>` is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you're listening to click events from a\nparent element (as the label can register duplicate clicks).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L78",
          "defaultValue": "\"label\"",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "ISwitchProps": {
      "fileName": "../core/src/components/forms/controls.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ISwitchProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L132",
      "extends": [
        "IControlProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the control should appear as an inline element.</p>\n"
            ],
            "contentsRaw": "Whether the control should appear as an inline element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L44",
          "inheritedFrom": "IControlProps.inline",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Alignment of the indicator within container.</p>\n"
            ],
            "contentsRaw": "Alignment of the indicator within container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignIndicator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L26",
          "defaultValue": "Alignment.LEFT",
          "inheritedFrom": "IControlProps.alignIndicator",
          "type": "Alignment"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX label for the control.</p>\n"
            ],
            "contentsRaw": "JSX label for the control.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L32",
          "inheritedFrom": "IControlProps.children",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is initially checked (uncontrolled mode).</p>\n"
            ],
            "contentsRaw": "Whether the control is initially checked (uncontrolled mode).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultChecked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L35",
          "inheritedFrom": "IControlProps.defaultChecked",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the control is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L38",
          "inheritedFrom": "IControlProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is checked.</p>\n"
            ],
            "contentsRaw": "Whether the control is checked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "checked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L29",
          "inheritedFrom": "IControlProps.checked",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives HTML <code>&lt;input&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives HTML `<input>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L41",
          "inheritedFrom": "IControlProps.inputRef",
          "type": "(ref: HTMLInputElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text label for the control.</p>\n<p>Use <code>children</code> or <code>labelElement</code> to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because <code>HTMLAttributes</code> only allows strings.</p>\n"
            ],
            "contentsRaw": "Text label for the control.\n\nUse `children` or `labelElement` to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because `HTMLAttributes` only allows strings.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L52",
          "inheritedFrom": "IControlProps.label",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX Element label for the control.</p>\n<p>This prop is a workaround for TypeScript consumers as the type definition for <code>label</code> only\naccepts strings. JavaScript consumers can provide a JSX element directly to <code>label</code>.</p>\n"
            ],
            "contentsRaw": "JSX Element label for the control.\n\nThis prop is a workaround for TypeScript consumers as the type definition for `label` only\naccepts strings. JavaScript consumers can provide a JSX element directly to `label`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L60",
          "inheritedFrom": "IControlProps.labelElement",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this control should use large styles.</p>\n"
            ],
            "contentsRaw": "Whether this control should use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L63",
          "inheritedFrom": "IControlProps.large",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Event handler invoked when input value is changed.</p>\n"
            ],
            "contentsRaw": "Event handler invoked when input value is changed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L66",
          "inheritedFrom": "IControlProps.onChange",
          "type": "React.FormEventHandler<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the HTML tag that wraps the checkbox.</p>\n<p>By default a <code>&lt;label&gt;</code> is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you&#39;re listening to click events from a\nparent element (as the label can register duplicate clicks).</p>\n"
            ],
            "contentsRaw": "Name of the HTML tag that wraps the checkbox.\n\nBy default a `<label>` is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you're listening to click events from a\nparent element (as the label can register duplicate clicks).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L78",
          "defaultValue": "\"label\"",
          "inheritedFrom": "IControlProps.tagName",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "IRadioProps": {
      "fileName": "../core/src/components/forms/controls.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRadioProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L146",
      "extends": [
        "IControlProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the control should appear as an inline element.</p>\n"
            ],
            "contentsRaw": "Whether the control should appear as an inline element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L44",
          "inheritedFrom": "IControlProps.inline",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Alignment of the indicator within container.</p>\n"
            ],
            "contentsRaw": "Alignment of the indicator within container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignIndicator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L26",
          "defaultValue": "Alignment.LEFT",
          "inheritedFrom": "IControlProps.alignIndicator",
          "type": "Alignment"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX label for the control.</p>\n"
            ],
            "contentsRaw": "JSX label for the control.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L32",
          "inheritedFrom": "IControlProps.children",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is initially checked (uncontrolled mode).</p>\n"
            ],
            "contentsRaw": "Whether the control is initially checked (uncontrolled mode).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultChecked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L35",
          "inheritedFrom": "IControlProps.defaultChecked",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the control is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L38",
          "inheritedFrom": "IControlProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is checked.</p>\n"
            ],
            "contentsRaw": "Whether the control is checked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "checked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L29",
          "inheritedFrom": "IControlProps.checked",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives HTML <code>&lt;input&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives HTML `<input>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L41",
          "inheritedFrom": "IControlProps.inputRef",
          "type": "(ref: HTMLInputElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text label for the control.</p>\n<p>Use <code>children</code> or <code>labelElement</code> to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because <code>HTMLAttributes</code> only allows strings.</p>\n"
            ],
            "contentsRaw": "Text label for the control.\n\nUse `children` or `labelElement` to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because `HTMLAttributes` only allows strings.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L52",
          "inheritedFrom": "IControlProps.label",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX Element label for the control.</p>\n<p>This prop is a workaround for TypeScript consumers as the type definition for <code>label</code> only\naccepts strings. JavaScript consumers can provide a JSX element directly to <code>label</code>.</p>\n"
            ],
            "contentsRaw": "JSX Element label for the control.\n\nThis prop is a workaround for TypeScript consumers as the type definition for `label` only\naccepts strings. JavaScript consumers can provide a JSX element directly to `label`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L60",
          "inheritedFrom": "IControlProps.labelElement",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this control should use large styles.</p>\n"
            ],
            "contentsRaw": "Whether this control should use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L63",
          "inheritedFrom": "IControlProps.large",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Event handler invoked when input value is changed.</p>\n"
            ],
            "contentsRaw": "Event handler invoked when input value is changed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L66",
          "inheritedFrom": "IControlProps.onChange",
          "type": "React.FormEventHandler<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the HTML tag that wraps the checkbox.</p>\n<p>By default a <code>&lt;label&gt;</code> is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you&#39;re listening to click events from a\nparent element (as the label can register duplicate clicks).</p>\n"
            ],
            "contentsRaw": "Name of the HTML tag that wraps the checkbox.\n\nBy default a `<label>` is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you're listening to click events from a\nparent element (as the label can register duplicate clicks).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L78",
          "defaultValue": "\"label\"",
          "inheritedFrom": "IControlProps.tagName",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "ICheckboxProps": {
      "fileName": "../core/src/components/forms/controls.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICheckboxProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L160",
      "extends": [
        "IControlProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether this checkbox is indeterminate, or &quot;partially checked.&quot;\nThe checkbox will appear with a small dash instead of a tick to indicate that the value\nis not exactly true or false.</p>\n<p>Note that this prop takes precendence over <code>checked</code>: if a checkbox is marked both\n<code>checked</code> and <code>indeterminate</code> via props, it will appear as indeterminate in the DOM.</p>\n"
            ],
            "contentsRaw": "Whether this checkbox is indeterminate, or \"partially checked.\"\nThe checkbox will appear with a small dash instead of a tick to indicate that the value\nis not exactly true or false.\n\nNote that this prop takes precendence over `checked`: if a checkbox is marked both\n`checked` and `indeterminate` via props, it will appear as indeterminate in the DOM.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "indeterminate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L172",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Alignment of the indicator within container.</p>\n"
            ],
            "contentsRaw": "Alignment of the indicator within container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "alignIndicator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L26",
          "defaultValue": "Alignment.LEFT",
          "inheritedFrom": "IControlProps.alignIndicator",
          "type": "Alignment"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX label for the control.</p>\n"
            ],
            "contentsRaw": "JSX label for the control.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L32",
          "inheritedFrom": "IControlProps.children",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is initially checked (uncontrolled mode).</p>\n"
            ],
            "contentsRaw": "Whether the control is initially checked (uncontrolled mode).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultChecked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L35",
          "inheritedFrom": "IControlProps.defaultChecked",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this checkbox is initially indeterminate (uncontrolled mode).</p>\n"
            ],
            "contentsRaw": "Whether this checkbox is initially indeterminate (uncontrolled mode).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultIndeterminate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L162",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the control is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L38",
          "inheritedFrom": "IControlProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control is checked.</p>\n"
            ],
            "contentsRaw": "Whether the control is checked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "checked",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L29",
          "inheritedFrom": "IControlProps.checked",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the control should appear as an inline element.</p>\n"
            ],
            "contentsRaw": "Whether the control should appear as an inline element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L44",
          "inheritedFrom": "IControlProps.inline",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives HTML <code>&lt;input&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives HTML `<input>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L41",
          "inheritedFrom": "IControlProps.inputRef",
          "type": "(ref: HTMLInputElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text label for the control.</p>\n<p>Use <code>children</code> or <code>labelElement</code> to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because <code>HTMLAttributes</code> only allows strings.</p>\n"
            ],
            "contentsRaw": "Text label for the control.\n\nUse `children` or `labelElement` to supply JSX content. This prop actually supports JSX elements,\nbut TypeScript will throw an error because `HTMLAttributes` only allows strings.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L52",
          "inheritedFrom": "IControlProps.label",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>JSX Element label for the control.</p>\n<p>This prop is a workaround for TypeScript consumers as the type definition for <code>label</code> only\naccepts strings. JavaScript consumers can provide a JSX element directly to <code>label</code>.</p>\n"
            ],
            "contentsRaw": "JSX Element label for the control.\n\nThis prop is a workaround for TypeScript consumers as the type definition for `label` only\naccepts strings. JavaScript consumers can provide a JSX element directly to `label`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L60",
          "inheritedFrom": "IControlProps.labelElement",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this control should use large styles.</p>\n"
            ],
            "contentsRaw": "Whether this control should use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L63",
          "inheritedFrom": "IControlProps.large",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Event handler invoked when input value is changed.</p>\n"
            ],
            "contentsRaw": "Event handler invoked when input value is changed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L66",
          "inheritedFrom": "IControlProps.onChange",
          "type": "React.FormEventHandler<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the HTML tag that wraps the checkbox.</p>\n<p>By default a <code>&lt;label&gt;</code> is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you&#39;re listening to click events from a\nparent element (as the label can register duplicate clicks).</p>\n"
            ],
            "contentsRaw": "Name of the HTML tag that wraps the checkbox.\n\nBy default a `<label>` is used, which effectively enlarges the click\ntarget to include all of its children. Supply a different tag name if\nthis behavior is undesirable or you're listening to click events from a\nparent element (as the label can register duplicate clicks).",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/controls.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/controls.tsx#L78",
          "defaultValue": "\"label\"",
          "inheritedFrom": "IControlProps.tagName",
          "type": "keyof IntrinsicElements"
        }
      ]
    },
    "IFileInputProps": {
      "fileName": "../core/src/components/forms/fileInput.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IFileInputProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/fileInput.tsx#L13",
      "extends": [
        "LabelHTMLAttributes<HTMLLabelElement>",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the file input is non-interactive.\nSetting this to <code>true</code> will automatically disable the child input too.</p>\n"
            ],
            "contentsRaw": "Whether the file input is non-interactive.\nSetting this to `true` will automatically disable the child input too.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/fileInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/fileInput.tsx#L18",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the file input should take up the full width of its container.</p>\n"
            ],
            "contentsRaw": "Whether the file input should take up the full width of its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/fileInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/fileInput.tsx#L23",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The props to pass to the child input.\n<code>disabled</code> will be ignored in favor of the top-level prop.\n<code>type</code> will be ignored, because the input <em>must</em> be <code>type=&quot;file&quot;</code>.\nPass <code>onChange</code> here to be notified when the user selects a file.</p>\n"
            ],
            "contentsRaw": "The props to pass to the child input.\n`disabled` will be ignored in favor of the top-level prop.\n`type` will be ignored, because the input _must_ be `type=\"file\"`.\nPass `onChange` here to be notified when the user selects a file.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/fileInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/fileInput.tsx#L31",
          "type": "HTMLProps<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the file input should appear with large styling.</p>\n"
            ],
            "contentsRaw": "Whether the file input should appear with large styling.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/fileInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/fileInput.tsx#L36",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked on <code>&lt;input&gt;</code> <code>change</code> events.</p>\n<p>This callback is offered as a convenience; it is equivalent to passing\n<code>onChange</code> to <code>inputProps</code>.</p>\n<p><strong>Note:</strong> The top-level <code>onChange</code> prop is passed to the wrapping\n<code>&lt;label&gt;</code> rather than the <code>&lt;input&gt;</code>, which may not be what you expect.</p>\n"
            ],
            "contentsRaw": "Callback invoked on `<input>` `change` events.\n\nThis callback is offered as a convenience; it is equivalent to passing\n`onChange` to `inputProps`.\n\n__Note:__ The top-level `onChange` prop is passed to the wrapping\n`<label>` rather than the `<input>`, which may not be what you expect.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/fileInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onInputChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/fileInput.tsx#L47",
          "type": "React.FormEventHandler<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>The text to display.</p>\n"
            ],
            "contentsRaw": "The text to display.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/fileInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "text",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/fileInput.tsx#L53",
          "defaultValue": "\"Choose file...\"",
          "type": "React.ReactNode"
        }
      ]
    },
    "IFormGroupProps": {
      "fileName": "../core/src/components/forms/formGroup.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IFormGroupProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L12",
      "extends": [
        "IIntentProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to the\n<code>Classes.FORM_CONTENT</code> element that contains <code>children</code>.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to the\n`Classes.FORM_CONTENT` element that contains `children`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "contentClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L17",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether form group should appear as non-interactive.\nRemember that <code>input</code> elements must be disabled separately.</p>\n"
            ],
            "contentsRaw": "Whether form group should appear as non-interactive.\nRemember that `input` elements must be disabled separately.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L23",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Optional helper text. The given content will be wrapped in\n<code>Classes.FORM_HELPER_TEXT</code> and displayed beneath <code>children</code>.\nHelper text color is determined by the <code>intent</code>.</p>\n"
            ],
            "contentsRaw": "Optional helper text. The given content will be wrapped in\n`Classes.FORM_HELPER_TEXT` and displayed beneath `children`.\nHelper text color is determined by the `intent`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "helperText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L30",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to render the label and children on a single line.</p>\n"
            ],
            "contentsRaw": "Whether to render the label and children on a single line.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L33",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Label of this form group.</p>\n"
            ],
            "contentsRaw": "Label of this form group.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L36",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p><code>id</code> attribute of the labelable form element that this <code>FormGroup</code> controls,\nused as <code>&lt;label for&gt;</code> attribute.</p>\n"
            ],
            "contentsRaw": "`id` attribute of the labelable form element that this `FormGroup` controls,\nused as `<label for>` attribute.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelFor",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L42",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Optional secondary text that appears after the label.</p>\n"
            ],
            "contentsRaw": "Optional secondary text that appears after the label.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelInfo",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L47",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS properties to apply to the root element.</p>\n"
            ],
            "contentsRaw": "CSS properties to apply to the root element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/formGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/formGroup.tsx#L50",
          "type": "CSSProperties"
        }
      ]
    },
    "IInputGroupProps": {
      "fileName": "../core/src/components/forms/inputGroup.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IInputGroupProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L26",
      "extends": [
        "IControlledProps",
        "IIntentProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Change event handler. Use <code>event.target.value</code> for new value.</p>\n"
            ],
            "contentsRaw": "Change event handler. Use `event.target.value` for new value.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L79",
          "inheritedFrom": "IControlledProps.onChange",
          "type": "React.FormEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the input is non-interactive.\nNote that <code>rightElement</code> must be disabled separately; this prop will not affect it.</p>\n"
            ],
            "contentsRaw": "Whether the input is non-interactive.\nNote that `rightElement` must be disabled separately; this prop will not affect it.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L32",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives HTML <code>&lt;input&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives HTML `<input>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L35",
          "type": "(ref: HTMLInputElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this input should use large styles.</p>\n"
            ],
            "contentsRaw": "Whether this input should use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L44",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render on the left side of the input group,\nbefore the user&#39;s cursor.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render on the left side of the input group,\nbefore the user's cursor.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "leftIcon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L41",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial value of the input, for uncontrolled usage.</p>\n"
            ],
            "contentsRaw": "Initial value of the input, for uncontrolled usage.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L76",
          "inheritedFrom": "IControlledProps.defaultValue",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Placeholder text in the absence of any value.</p>\n"
            ],
            "contentsRaw": "Placeholder text in the absence of any value.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L50",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Element to render on right side of input.\nFor best results, use a minimal button, tag, or small spinner.</p>\n"
            ],
            "contentsRaw": "Element to render on right side of input.\nFor best results, use a minimal button, tag, or small spinner.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rightElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L56",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the input (and any buttons) should appear with rounded caps.</p>\n"
            ],
            "contentsRaw": "Whether the input (and any buttons) should appear with rounded caps.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "round",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L59",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this input should use small styles.</p>\n"
            ],
            "contentsRaw": "Whether this input should use small styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "small",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L47",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML <code>input</code> type attribute.</p>\n"
            ],
            "contentsRaw": "HTML `input` type attribute.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/inputGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/inputGroup.tsx#L65",
          "defaultValue": "\"text\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Form value of the input, for controlled usage.</p>\n"
            ],
            "contentsRaw": "Form value of the input, for controlled usage.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L82",
          "inheritedFrom": "IControlledProps.value",
          "type": "string"
        }
      ]
    },
    "INumericInputProps": {
      "fileName": "../core/src/components/forms/numericInput.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INumericInputProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L39",
      "extends": [
        "IIntentProps",
        "IProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onButtonClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L133",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>The callback invoked when the value changes due to a button click.</p>\n"
                ],
                "contentsRaw": "The callback invoked when the value changes due to a button click.",
                "metadata": {}
              },
              "fileName": "../core/src/components/forms/numericInput.tsx",
              "kind": "signature",
              "name": "onButtonClick",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L133",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "valueAsNumber",
                  "type": "number"
                },
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "valueAsString",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(valueAsNumber: number, valueAsString: string) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onValueChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L136",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>The callback invoked when the value changes due to typing, arrow keys, or button clicks.</p>\n"
                ],
                "contentsRaw": "The callback invoked when the value changes due to typing, arrow keys, or button clicks.",
                "metadata": {}
              },
              "fileName": "../core/src/components/forms/numericInput.tsx",
              "kind": "signature",
              "name": "onValueChange",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L136",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "valueAsNumber",
                  "type": "number"
                },
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "valueAsString",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(valueAsNumber: number, valueAsString: string) => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render on the left side of input.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render on the left side of input.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "leftIcon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L86",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to allow only floating-point number characters in the field,\nmimicking the native <code>input[type=&quot;number&quot;]</code>.</p>\n"
            ],
            "contentsRaw": "Whether to allow only floating-point number characters in the field,\nmimicking the native `input[type=\"number\"]`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "allowNumericCharactersOnly",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L45",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the value should be clamped to <code>[min, max]</code> on blur.\nThe value will be clamped to each bound only if the bound is defined.\nNote that native <code>input[type=&quot;number&quot;]</code> controls do <em>NOT</em> clamp on blur.</p>\n"
            ],
            "contentsRaw": "Whether the value should be clamped to `[min, max]` on blur.\nThe value will be clamped to each bound only if the bound is defined.\nNote that native `input[type=\"number\"]` controls do *NOT* clamp on blur.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "clampValueOnBlur",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L59",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the input is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the input is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L65",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the numeric input should take up the full width of its container.</p>\n"
            ],
            "contentsRaw": "Whether the numeric input should take up the full width of its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L68",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives HTML <code>&lt;input&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives HTML `<input>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L73",
          "type": "(ref: HTMLInputElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>If set to <code>true</code>, the input will display with larger styling.\nThis is equivalent to setting <code>Classes.LARGE</code> via className on the\nparent control group and on the child input group.</p>\n"
            ],
            "contentsRaw": "If set to `true`, the input will display with larger styling.\nThis is equivalent to setting `Classes.LARGE` via className on the\nparent control group and on the child input group.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L81",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The position of the buttons with respect to the input field.</p>\n"
            ],
            "contentsRaw": "The position of the buttons with respect to the input field.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "buttonPosition",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L51",
          "defaultValue": "Position.RIGHT",
          "type": "\"left\" | \"right\" | \"none\""
        },
        {
          "documentation": {
            "contents": [
              "<p>The increment between successive values when <kbd>shift</kbd> is held.\nPass explicit <code>null</code> value to disable this interaction.</p>\n"
            ],
            "contentsRaw": "The increment between successive values when <kbd>shift</kbd> is held.\nPass explicit `null` value to disable this interaction.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "majorStepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L96",
          "defaultValue": "10",
          "type": "number | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>The maximum value of the input.</p>\n"
            ],
            "contentsRaw": "The maximum value of the input.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "max",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L99",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The minimum value of the input.</p>\n"
            ],
            "contentsRaw": "The minimum value of the input.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "min",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L102",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The increment between successive values when <kbd>alt</kbd> is held.\nPass explicit <code>null</code> value to disable this interaction.</p>\n"
            ],
            "contentsRaw": "The increment between successive values when <kbd>alt</kbd> is held.\nPass explicit `null` value to disable this interaction.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minorStepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L109",
          "defaultValue": "0.1",
          "type": "number | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>The placeholder text in the absence of any value.</p>\n"
            ],
            "contentsRaw": "The placeholder text in the absence of any value.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L89",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the entire text field should be selected on focus.</p>\n"
            ],
            "contentsRaw": "Whether the entire text field should be selected on focus.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectAllOnFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L115",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the entire text field should be selected on increment.</p>\n"
            ],
            "contentsRaw": "Whether the entire text field should be selected on increment.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectAllOnIncrement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L121",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The increment between successive values when no modifier keys are held.</p>\n"
            ],
            "contentsRaw": "The increment between successive values when no modifier keys are held.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L127",
          "defaultValue": "1",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The value to display in the input field.</p>\n"
            ],
            "contentsRaw": "The value to display in the input field.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/numericInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/numericInput.tsx#L130",
          "type": "number | string"
        }
      ]
    },
    "IRadioGroupProps": {
      "fileName": "../core/src/components/forms/radioGroup.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRadioGroupProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L16",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the group and <em>all</em> its radios are disabled.\nIndividual radios can be disabled using their <code>disabled</code> prop.</p>\n"
            ],
            "contentsRaw": "Whether the group and _all_ its radios are disabled.\nIndividual radios can be disabled using their `disabled` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/radioGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L21",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the radio buttons are to be displayed inline horizontally.</p>\n"
            ],
            "contentsRaw": "Whether the radio buttons are to be displayed inline horizontally.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/radioGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L26",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Optional label text to display above the radio buttons.</p>\n"
            ],
            "contentsRaw": "Optional label text to display above the radio buttons.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/radioGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L29",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the group, used to link radio buttons together in HTML.\nIf omitted, a unique name will be generated internally.</p>\n"
            ],
            "contentsRaw": "Name of the group, used to link radio buttons together in HTML.\nIf omitted, a unique name will be generated internally.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/radioGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L35",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the currently selected radio changes.\nUse <code>event.currentTarget.value</code> to read the currently selected value.\nThis prop is required because this component only supports controlled usage.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the currently selected radio changes.\nUse `event.currentTarget.value` to read the currently selected value.\nThis prop is required because this component only supports controlled usage.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/radioGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L42",
          "type": "(event: FormEvent<HTMLInputElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Array of options to render in the group. This prop is mutually exclusive\nwith <code>children</code>: either provide an array of <code>IOptionProps</code> objects or\nprovide <code>&lt;Radio&gt;</code> children elements.</p>\n"
            ],
            "contentsRaw": "Array of options to render in the group. This prop is mutually exclusive\nwith `children`: either provide an array of `IOptionProps` objects or\nprovide `<Radio>` children elements.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/radioGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "options",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L49",
          "type": "IOptionProps[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Value of the selected radio. The child with this value will be <code>:checked</code>.</p>\n"
            ],
            "contentsRaw": "Value of the selected radio. The child with this value will be `:checked`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/radioGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/radioGroup.tsx#L52",
          "type": "string | number"
        }
      ]
    },
    "ITextAreaProps": {
      "fileName": "../core/src/components/forms/textArea.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITextAreaProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/textArea.tsx#L12",
      "extends": [
        "IIntentProps",
        "IProps",
        "TextareaHTMLAttributes<HTMLTextAreaElement>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the text area should take up the full width of its container.</p>\n"
            ],
            "contentsRaw": "Whether the text area should take up the full width of its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/textArea.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/textArea.tsx#L16",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives HTML <code>&lt;textarea&gt;</code> element backing this component.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives HTML `<textarea>` element backing this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/textArea.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/textArea.tsx#L31",
          "type": "(ref: HTMLTextAreaElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the text area should appear with large styling.</p>\n"
            ],
            "contentsRaw": "Whether the text area should appear with large styling.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/textArea.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/textArea.tsx#L21",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the text area should appear with small styling.</p>\n"
            ],
            "contentsRaw": "Whether the text area should appear with small styling.",
            "metadata": {}
          },
          "fileName": "../core/src/components/forms/textArea.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "small",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/forms/textArea.tsx#L26",
          "type": "boolean"
        }
      ]
    },
    "IHTMLSelectProps": {
      "fileName": "../core/src/components/html-select/htmlSelect.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHTMLSelectProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L14",
      "extends": [
        "IElementRefProps<HTMLSelectElement>",
        "SelectHTMLAttributes<HTMLSelectElement>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether this element is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether this element is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L18",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler to access the instance of the internal HTML element.</p>\n"
            ],
            "contentsRaw": "Ref handler to access the instance of the internal HTML element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html/html.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elementRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html/html.tsx#L13",
          "inheritedFrom": "IElementRefProps.elementRef",
          "type": "(ref: HTMLSelectElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this element should fill its container.</p>\n"
            ],
            "contentsRaw": "Whether this element should fill its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L21",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to the <code>&lt;Icon&gt;</code> element.</p>\n"
            ],
            "contentsRaw": "Props to spread to the `<Icon>` element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "iconProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L24",
          "type": "Partial<IIconProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to use large styles.</p>\n"
            ],
            "contentsRaw": "Whether to use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L27",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to use minimal styles.</p>\n"
            ],
            "contentsRaw": "Whether to use minimal styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minimal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L30",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Multiple select is not supported.</p>\n"
            ],
            "contentsRaw": "Multiple select is not supported.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "multiple",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L33",
          "type": "never"
        },
        {
          "documentation": {
            "contents": [
              "<p>Change event handler. Use <code>event.currentTarget.value</code> to access the new value.</p>\n"
            ],
            "contentsRaw": "Change event handler. Use `event.currentTarget.value` to access the new value.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L36",
          "type": "React.ChangeEventHandler<HTMLSelectElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Shorthand for supplying options: an array of basic types or\n<code>{ label?, value }</code> objects. If no <code>label</code> is supplied, <code>value</code>\nwill be used as the label.</p>\n"
            ],
            "contentsRaw": "Shorthand for supplying options: an array of basic types or\n`{ label?, value }` objects. If no `label` is supplied, `value`\nwill be used as the label.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "options",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L43",
          "type": "Array<string | number | IOptionProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Controlled value of this component.</p>\n"
            ],
            "contentsRaw": "Controlled value of this component.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-select/htmlSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-select/htmlSelect.tsx#L46",
          "type": "string | number"
        }
      ]
    },
    "IHTMLTableProps": {
      "fileName": "../core/src/components/html-table/htmlTable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHTMLTableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-table/htmlTable.tsx#L19",
      "extends": [
        "TableHTMLAttributes<HTMLTableElement>",
        "IElementRefProps<HTMLTableElement>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Enables borders between rows and cells.</p>\n"
            ],
            "contentsRaw": "Enables borders between rows and cells.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-table/htmlTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "bordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-table/htmlTable.tsx#L23",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Use small, condensed appearance.</p>\n"
            ],
            "contentsRaw": "Use small, condensed appearance.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-table/htmlTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "condensed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-table/htmlTable.tsx#L26",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler to access the instance of the internal HTML element.</p>\n"
            ],
            "contentsRaw": "Ref handler to access the instance of the internal HTML element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html/html.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "elementRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html/html.tsx#L13",
          "inheritedFrom": "IElementRefProps.elementRef",
          "type": "(ref: HTMLTableElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables hover styles on row.</p>\n"
            ],
            "contentsRaw": "Enables hover styles on row.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-table/htmlTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-table/htmlTable.tsx#L29",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Use small, condensed appearance for this element and all child elements.</p>\n"
            ],
            "contentsRaw": "Use small, condensed appearance for this element and all child elements.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-table/htmlTable.tsx",
          "flags": {
            "isDeprecated": true,
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "small",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-table/htmlTable.tsx#L35",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Use an alternate background color on odd rows.</p>\n"
            ],
            "contentsRaw": "Use an alternate background color on odd rows.",
            "metadata": {}
          },
          "fileName": "../core/src/components/html-table/htmlTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "striped",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/html-table/htmlTable.tsx#L38",
          "type": "boolean"
        }
      ]
    },
    "IKeyCodeTable": {
      "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyCodeTable",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L7",
      "indexSignature": {
        "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L7",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "code",
            "type": "number"
          }
        ],
        "returnType": "string",
        "type": "{ [code: number]: string }"
      },
      "methods": [],
      "properties": []
    },
    "IKeyCodeReverseTable": {
      "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyCodeReverseTable",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L11",
      "indexSignature": {
        "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L11",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "number",
        "type": "{ [key: string]: number }"
      },
      "methods": [],
      "properties": []
    },
    "IKeyMap": {
      "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyMap",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L15",
      "indexSignature": {
        "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L15",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "key",
            "type": "string"
          }
        ],
        "returnType": "string",
        "type": "{ [key: string]: string }"
      },
      "methods": [],
      "properties": []
    },
    "IKeyCombo": {
      "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyCombo",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L158",
      "methods": [],
      "properties": [
        {
          "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "key",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L159",
          "type": "string"
        },
        {
          "fileName": "../core/src/components/hotkeys/hotkeyParser.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeyParser.ts#L160",
          "type": "number"
        }
      ]
    },
    "IKeyComboProps": {
      "fileName": "../core/src/components/hotkeys/keyCombo.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyComboProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/keyCombo.tsx#L27",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The key combo to display, such as <code>&quot;cmd + s&quot;</code>.</p>\n"
            ],
            "contentsRaw": "The key combo to display, such as `\"cmd + s\"`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/keyCombo.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "combo",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/keyCombo.tsx#L29",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to render in a minimal style.\nIf <code>false</code>, each key in the combo will be rendered inside a <code>&lt;kbd&gt;</code> tag.\nIf <code>true</code>, only the icon or short name of a key will be rendered with no wrapper styles.</p>\n"
            ],
            "contentsRaw": "Whether to render in a minimal style.\nIf `false`, each key in the combo will be rendered inside a `<kbd>` tag.\nIf `true`, only the icon or short name of a key will be rendered with no wrapper styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/keyCombo.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minimal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/keyCombo.tsx#L37",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "IHotkeyProps": {
      "fileName": "../core/src/components/hotkeys/hotkey.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHotkeyProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L13",
      "extends": [
        "IProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L68",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p><code>keydown</code> event handler.</p>\n"
                ],
                "contentsRaw": "`keydown` event handler.",
                "metadata": {}
              },
              "fileName": "../core/src/components/hotkeys/hotkey.tsx",
              "kind": "signature",
              "name": "onKeyDown",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L68",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "e",
                  "type": "KeyboardEvent"
                }
              ],
              "returnType": "any",
              "type": "(e: KeyboardEvent) => any"
            }
          ]
        },
        {
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onKeyUp",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L73",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p><code>keyup</code> event handler.</p>\n"
                ],
                "contentsRaw": "`keyup` event handler.",
                "metadata": {}
              },
              "fileName": "../core/src/components/hotkeys/hotkey.tsx",
              "kind": "signature",
              "name": "onKeyUp",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L73",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "e",
                  "type": "KeyboardEvent"
                }
              ],
              "returnType": "any",
              "type": "(e: KeyboardEvent) => any"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the hotkey should be triggerable when focused in a text input.</p>\n"
            ],
            "contentsRaw": "Whether the hotkey should be triggerable when focused in a text input.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "allowInInput",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L18",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Hotkey combination string, such as &quot;space&quot; or &quot;cmd+n&quot;.</p>\n"
            ],
            "contentsRaw": "Hotkey combination string, such as \"space\" or \"cmd+n\".",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "combo",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L23",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the hotkey cannot be triggered.</p>\n"
            ],
            "contentsRaw": "Whether the hotkey cannot be triggered.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L29",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, the hotkey is active only when the target is focused. If\n<code>true</code>, the hotkey can be triggered regardless of what component is\nfocused.</p>\n"
            ],
            "contentsRaw": "If `false`, the hotkey is active only when the target is focused. If\n`true`, the hotkey can be triggered regardless of what component is\nfocused.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "global",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L42",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Unless the hotkey is global, you must specify a group where the hotkey\nwill be displayed in the hotkeys dialog. This string will be displayed\nin a header at the start of the group of hotkeys.</p>\n"
            ],
            "contentsRaw": "Unless the hotkey is global, you must specify a group where the hotkey\nwill be displayed in the hotkeys dialog. This string will be displayed\nin a header at the start of the group of hotkeys.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "group",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L49",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Human-friendly label for the hotkey.</p>\n"
            ],
            "contentsRaw": "Human-friendly label for the hotkey.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L34",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>true</code>, invokes <code>event.preventDefault()</code> before the respective <code>onKeyDown</code> and\n<code>onKeyUp</code> callbacks are invoked. Enabling this can simplify handler implementations.</p>\n"
            ],
            "contentsRaw": "When `true`, invokes `event.preventDefault()` before the respective `onKeyDown` and\n`onKeyUp` callbacks are invoked. Enabling this can simplify handler implementations.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preventDefault",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L56",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>true</code>, invokes <code>event.stopPropagation()</code> before the respective <code>onKeyDown</code> and\n<code>onKeyUp</code> callbacks are invoked. Enabling this can simplify handler implementations.</p>\n"
            ],
            "contentsRaw": "When `true`, invokes `event.stopPropagation()` before the respective `onKeyDown` and\n`onKeyUp` callbacks are invoked. Enabling this can simplify handler implementations.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkey.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stopPropagation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkey.tsx#L63",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "IHotkeysDialogProps": {
      "fileName": "../core/src/components/hotkeys/hotkeysDialog.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHotkeysDialogProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysDialog.tsx#L16",
      "extends": [
        "IDialogProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code> and <code>usePortal={true}</code>, the <code>Portal</code> containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.</p>\n"
            ],
            "contentsRaw": "If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\nto the DOM when the overlay is opened for the first time; otherwise this happens when the\ncomponent mounts. Lazy mounting provides noticeable performance improvements if you have lots\nof overlays at once, such as on each row of a table.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "lazy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L47",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.lazy",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should acquire application focus when it first opens.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should acquire application focus when it first opens.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L23",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.autoFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML props for the backdrop element.</p>\n"
            ],
            "contentsRaw": "HTML props for the backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L129",
          "inheritedFrom": "IBackdropProps.backdropProps",
          "type": "HTMLProps<HTMLDivElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L29",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.canEscapeKeyClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke <code>onClose</code>.</p>\n"
            ],
            "contentsRaw": "Whether clicking outside the overlay element (either on backdrop when present or on document)\nshould invoke `onClose`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canOutsideClickClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L136",
          "defaultValue": "true",
          "inheritedFrom": "IBackdropProps.canOutsideClickClose",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the &quot;outermost&quot; overlays or mark the nested ones <code>usePortal={false}</code>.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\nto focus an element outside the overlay and this prop is enabled, then the overlay will\nimmediately bring focus back to itself. If you are nesting overlay components, either disable\nthis prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enforceFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L38",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.enforceFocus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>This string displayed as the group name in the hotkeys dialog for all\nglobal hotkeys.</p>\n"
            ],
            "contentsRaw": "This string displayed as the group name in the hotkeys dialog for all\nglobal hotkeys.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkeysDialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "globalHotkeysGroup",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysDialog.tsx#L21",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Dialog always has a backdrop so this prop is excluded from the public API.</p>\n",
              {
                "tag": "internal"
              }
            ],
            "contentsRaw": "Dialog always has a backdrop so this prop is excluded from the public API.\n\n@internal",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hasBackdrop",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L30",
          "inheritedFrom": "IDialogProps.hasBackdrop",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render in the\ndialog&#39;s header. Note that the header will only be rendered if <code>title</code> is\nprovided.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render in the\ndialog's header. Note that the header will only be rendered if `title` is\nprovided.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L37",
          "inheritedFrom": "IDialogProps.icon",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show the close button in the dialog&#39;s header.\nNote that the header will only be rendered if <code>title</code> is provided.</p>\n"
            ],
            "contentsRaw": "Whether to show the close button in the dialog's header.\nNote that the header will only be rendered if `title` is provided.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isCloseButtonShown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L44",
          "defaultValue": "true",
          "inheritedFrom": "IDialogProps.isCloseButtonShown",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Toggles the visibility of the overlay and its children.\nThis prop is required because the component is controlled.</p>\n"
            ],
            "contentsRaw": "Toggles the visibility of the overlay and its children.\nThis prop is required because the component is controlled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L24",
          "inheritedFrom": "IDialogProps.isOpen",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS class names to apply to backdrop element.</p>\n"
            ],
            "contentsRaw": "CSS class names to apply to backdrop element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "backdropClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L126",
          "inheritedFrom": "IBackdropProps.backdropClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the <code>esc</code> key (if enabled).</p>\n<p>Receives the event from the user&#39;s interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the <code>isOpen</code> prop, it\nwill not actually close itself until that prop becomes <code>false</code>.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the overlay to close, such as\nclicking on the overlay or pressing the `esc` key (if enabled).\n\nReceives the event from the user's interaction, if there was an event (generally either a\nmouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\nwill not actually close itself until that prop becomes `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L93",
          "inheritedFrom": "IOverlayableProps.onClose",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>close</em> transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _close_ transition ends but\nbefore the child has been removed from the DOM. Receives the DOM element\nof the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosed",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L108",
          "inheritedFrom": "IOverlayLifecycleProps.onClosed",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just before the CSS <em>close</em> transition begins on\na child. Receives the DOM element of the child being closed.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just before the CSS _close_ transition begins on\na child. Receives the DOM element of the child being closed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClosing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L101",
          "inheritedFrom": "IOverlayLifecycleProps.onClosing",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after the CSS <em>open</em> transition ends.\nReceives the DOM element of the child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after the CSS _open_ transition ends.\nReceives the DOM element of the child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpened",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L121",
          "inheritedFrom": "IOverlayLifecycleProps.onOpened",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS <em>open</em> transition begins. Receives the DOM element of\nthe child being opened.</p>\n"
            ],
            "contentsRaw": "Lifecycle method invoked just after mounting the child in the DOM but\njust before the CSS _open_ transition begins. Receives the DOM element of\nthe child being opened.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpening",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L115",
          "inheritedFrom": "IOverlayLifecycleProps.onOpening",
          "type": "(node: HTMLElement) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Space-delimited string of class names applied to the <code>Portal</code> element if\n<code>usePortal={true}</code>.</p>\n"
            ],
            "contentsRaw": "Space-delimited string of class names applied to the `Portal` element if\n`usePortal={true}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalClassName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L76",
          "inheritedFrom": "IOverlayableProps.portalClassName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The container element into which the overlay renders its contents, when <code>usePortal</code> is <code>true</code>.\nThis prop is ignored if <code>usePortal</code> is <code>false</code>.</p>\n"
            ],
            "contentsRaw": "The container element into which the overlay renders its contents, when `usePortal` is `true`.\nThis prop is ignored if `usePortal` is `false`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "portalContainer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L83",
          "defaultValue": "document.body",
          "inheritedFrom": "IOverlayableProps.portalContainer",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles to apply to the dialog.</p>\n"
            ],
            "contentsRaw": "CSS styles to apply to the dialog.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L50",
          "defaultValue": "{}",
          "inheritedFrom": "IDialogProps.style",
          "type": "CSSProperties"
        },
        {
          "documentation": {
            "contents": [
              "<p>Title of the dialog. If provided, an element with <code>Classes.DIALOG_HEADER</code>\nwill be rendered inside the dialog before any children elements.</p>\n"
            ],
            "contentsRaw": "Title of the dialog. If provided, an element with `Classes.DIALOG_HEADER`\nwill be rendered inside the dialog before any children elements.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L56",
          "inheritedFrom": "IDialogProps.title",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Indicates how long (in milliseconds) the overlay&#39;s enter/leave transition takes.\nThis is used by React <code>CSSTransition</code> to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint&#39;s default\ntransitions with new transitions of a different length.</p>\n"
            ],
            "contentsRaw": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\nThis is used by React `CSSTransition` to know when a transition completes and must match\nthe duration of the animation in CSS. Only set this prop if you override Blueprint's default\ntransitions with new transitions of a different length.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionDuration",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L56",
          "defaultValue": "100",
          "inheritedFrom": "IOverlayableProps.transitionDuration",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of the transition for internal <code>CSSTransition</code>. Providing your own\nname here will require defining new CSS transition properties.</p>\n"
            ],
            "contentsRaw": "Name of the transition for internal `CSSTransition`. Providing your own\nname here will require defining new CSS transition properties.",
            "metadata": {}
          },
          "fileName": "../core/src/components/dialog/dialog.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "transitionName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/dialog/dialog.tsx#L62",
          "inheritedFrom": "IDialogProps.transitionName",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the overlay should be wrapped in a <code>Portal</code>, which renders its contents in a new\nelement attached to <code>portalContainer</code> prop.</p>\n<p>This prop essentially determines which element is covered by the backdrop: if <code>false</code>,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the <code>Portal</code> is the <code>&lt;body&gt;</code> itself).</p>\n<p>Set this prop to <code>false</code> on nested overlays (such as <code>Dialog</code> or <code>Popover</code>) to ensure that they\nare rendered above their parents.</p>\n"
            ],
            "contentsRaw": "Whether the overlay should be wrapped in a `Portal`, which renders its contents in a new\nelement attached to `portalContainer` prop.\n\nThis prop essentially determines which element is covered by the backdrop: if `false`,\nthen only its parent is covered; otherwise, the entire page is covered (because the parent\nof the `Portal` is the `<body>` itself).\n\nSet this prop to `false` on nested overlays (such as `Dialog` or `Popover`) to ensure that they\nare rendered above their parents.",
            "metadata": {}
          },
          "fileName": "../core/src/components/overlay/overlay.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/overlay/overlay.tsx#L70",
          "defaultValue": "true",
          "inheritedFrom": "IOverlayableProps.usePortal",
          "type": "boolean"
        }
      ]
    },
    "IHotkeyAction": {
      "fileName": "../core/src/components/hotkeys/hotkeysEvents.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHotkeyAction",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysEvents.ts#L22",
      "methods": [],
      "properties": [
        {
          "fileName": "../core/src/components/hotkeys/hotkeysEvents.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "combo",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysEvents.ts#L23",
          "type": "IKeyCombo"
        },
        {
          "fileName": "../core/src/components/hotkeys/hotkeysEvents.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "props",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysEvents.ts#L24",
          "type": "IHotkeyProps"
        }
      ]
    },
    "IHotkeysTargetComponent": {
      "fileName": "../core/src/components/hotkeys/hotkeysTarget.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHotkeysTargetComponent",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysTarget.tsx#L15",
      "extends": [
        "Component"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/hotkeys/hotkeysTarget.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "render",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysTarget.tsx#L17",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Components decorated with the <code>@HotkeysTarget</code> decorator must implement React&#39;s component <code>render</code> function.</p>\n"
                ],
                "contentsRaw": "Components decorated with the `@HotkeysTarget` decorator must implement React's component `render` function.",
                "metadata": {}
              },
              "fileName": "../core/src/components/hotkeys/hotkeysTarget.tsx",
              "kind": "signature",
              "name": "render",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysTarget.tsx#L17",
              "parameters": [],
              "returnType": "ReactElement<any> | null | undefined",
              "type": "() => ReactElement<any> | null | undefined"
            }
          ]
        },
        {
          "fileName": "../core/src/components/hotkeys/hotkeysTarget.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "renderHotkeys",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysTarget.tsx#L23",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Components decorated with the <code>@HotkeysTarget</code> decorator must implement\nthis method, and it must return a <code>Hotkeys</code> React element.</p>\n"
                ],
                "contentsRaw": "Components decorated with the `@HotkeysTarget` decorator must implement\nthis method, and it must return a `Hotkeys` React element.",
                "metadata": {}
              },
              "fileName": "../core/src/components/hotkeys/hotkeysTarget.tsx",
              "kind": "signature",
              "name": "renderHotkeys",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeysTarget.tsx#L23",
              "parameters": [],
              "returnType": "ReactElement<IHotkeysProps>",
              "type": "() => ReactElement<IHotkeysProps>"
            }
          ]
        }
      ],
      "properties": []
    },
    "IHotkeysProps": {
      "fileName": "../core/src/components/hotkeys/hotkeys.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHotkeysProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeys.tsx#L22",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>In order to make local hotkeys work on elements that are not normally\nfocusable, such as <code>&lt;div&gt;</code>s or <code>&lt;span&gt;</code>s, we add a <code>tabIndex</code> attribute\nto the hotkey target, which makes it focusable. By default, we use <code>0</code>,\nbut you can override this value to change the tab navigation behavior\nof the component. You may even set this value to <code>null</code>, which will omit\nthe <code>tabIndex</code> from the component decorated by <code>HotkeysTarget</code>.</p>\n"
            ],
            "contentsRaw": "In order to make local hotkeys work on elements that are not normally\nfocusable, such as `<div>`s or `<span>`s, we add a `tabIndex` attribute\nto the hotkey target, which makes it focusable. By default, we use `0`,\nbut you can override this value to change the tab navigation behavior\nof the component. You may even set this value to `null`, which will omit\nthe `tabIndex` from the component decorated by `HotkeysTarget`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/hotkeys/hotkeys.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tabIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/hotkeys/hotkeys.tsx#L31",
          "type": "number"
        }
      ]
    },
    "INavbarDividerProps": {
      "fileName": "../core/src/components/navbar/navbarDivider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavbarDividerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/navbar/navbarDivider.tsx#L13",
      "extends": [
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        }
      ]
    },
    "INavbarGroupProps": {
      "fileName": "../core/src/components/navbar/navbarGroup.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavbarGroupProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/navbar/navbarGroup.tsx#L13",
      "extends": [
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The side of the navbar on which the group should appear.\nThe <code>Alignment</code> enum provides constants for these values.</p>\n"
            ],
            "contentsRaw": "The side of the navbar on which the group should appear.\nThe `Alignment` enum provides constants for these values.",
            "metadata": {}
          },
          "fileName": "../core/src/components/navbar/navbarGroup.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "align",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/navbar/navbarGroup.tsx#L19",
          "defaultValue": "Alignment.LEFT",
          "type": "Alignment"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        }
      ]
    },
    "INavbarHeadingProps": {
      "fileName": "../core/src/components/navbar/navbarHeading.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavbarHeadingProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/navbar/navbarHeading.tsx#L13",
      "extends": [
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        }
      ]
    },
    "INavbarProps": {
      "fileName": "../core/src/components/navbar/navbar.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavbarProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/navbar/navbar.tsx#L18",
      "extends": [
        "IProps",
        "HTMLAttributes"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this navbar should be fixed to the top of the viewport (using CSS <code>position: fixed</code>).</p>\n"
            ],
            "contentsRaw": "Whether this navbar should be fixed to the top of the viewport (using CSS `position: fixed`).",
            "metadata": {}
          },
          "fileName": "../core/src/components/navbar/navbar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fixedToTop",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/navbar/navbar.tsx#L22",
          "type": "boolean"
        }
      ]
    },
    "INonIdealStateProps": {
      "fileName": "../core/src/components/non-ideal-state/nonIdealState.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INonIdealStateProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/non-ideal-state/nonIdealState.tsx#L16",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>An action to resolve the non-ideal state which appears after <code>description</code>.</p>\n"
            ],
            "contentsRaw": "An action to resolve the non-ideal state which appears after `description`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/non-ideal-state/nonIdealState.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "action",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/non-ideal-state/nonIdealState.tsx#L18",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Advanced usage: React <code>children</code> will appear last (after <code>action</code>).\nAvoid passing raw strings as they will not receive margins and disrupt the layout flow.</p>\n"
            ],
            "contentsRaw": "Advanced usage: React `children` will appear last (after `action`).\nAvoid passing raw strings as they will not receive margins and disrupt the layout flow.",
            "metadata": {}
          },
          "fileName": "../core/src/components/non-ideal-state/nonIdealState.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/non-ideal-state/nonIdealState.tsx#L24",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A longer description of the non-ideal state.\nA string or number value will be wrapped in a <code>&lt;div&gt;</code> to preserve margins.</p>\n"
            ],
            "contentsRaw": "A longer description of the non-ideal state.\nA string or number value will be wrapped in a `<div>` to preserve margins.",
            "metadata": {}
          },
          "fileName": "../core/src/components/non-ideal-state/nonIdealState.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "description",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/non-ideal-state/nonIdealState.tsx#L30",
          "type": "React.ReactChild"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name of a Blueprint icon or a JSX Element (such as <code>&lt;Spinner/&gt;</code>) to render above the title.</p>\n"
            ],
            "contentsRaw": "The name of a Blueprint icon or a JSX Element (such as `<Spinner/>`) to render above the title.",
            "metadata": {}
          },
          "fileName": "../core/src/components/non-ideal-state/nonIdealState.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/non-ideal-state/nonIdealState.tsx#L33",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>The title of the non-ideal state.</p>\n"
            ],
            "contentsRaw": "The title of the non-ideal state.",
            "metadata": {}
          },
          "fileName": "../core/src/components/non-ideal-state/nonIdealState.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/non-ideal-state/nonIdealState.tsx#L36",
          "type": "React.ReactNode"
        }
      ]
    },
    "IPanel": {
      "documentation": {
        "contents": [
          "<p>An object describing a panel in a <code>PanelStack</code>.</p>\n"
        ],
        "contentsRaw": "An object describing a panel in a `PanelStack`.",
        "metadata": {}
      },
      "fileName": "../core/src/components/panel-stack/panelProps.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPanel",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L12",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The component type to render for this panel. This must be a reference to\nthe component class or SFC, <em>not</em> a JSX element, so it can be re-created\ndynamically when needed.</p>\n"
            ],
            "contentsRaw": "The component type to render for this panel. This must be a reference to\nthe component class or SFC, _not_ a JSX element, so it can be re-created\ndynamically when needed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "component",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L18",
          "type": "React.ComponentType<P & IPanelProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>The props passed to the component type when it is rendered. The methods\nin <code>IPanelProps</code> will be injected by <code>PanelStack</code>.</p>\n"
            ],
            "contentsRaw": "The props passed to the component type when it is rendered. The methods\nin `IPanelProps` will be injected by `PanelStack`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "props",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L24",
          "type": "P"
        },
        {
          "documentation": {
            "contents": [
              "<p>The title to be displayed above this panel. It is also used as the text\nof the back button for any panel opened by this panel.</p>\n"
            ],
            "contentsRaw": "The title to be displayed above this panel. It is also used as the text\nof the back button for any panel opened by this panel.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L30",
          "type": "React.ReactNode"
        }
      ]
    },
    "IPanelProps": {
      "documentation": {
        "contents": [
          "<p>Include this interface in your panel component&#39;s props type to access these\ntwo functions which are injected by <code>PanelStack</code>.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta import tsx\"><span class=\"keyword control import tsx\"><span>import</span></span><span>&nbsp;</span><span class=\"meta block tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"variable other readwrite alias tsx\"><span>IPanelProps</span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span>&nbsp;</span><span class=\"keyword control from tsx\"><span>from</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>@blueprintjs/core</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span></span><span class=\"punctuation terminator statement tsx\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta class tsx\"><span class=\"keyword control export tsx\"><span>export</span></span><span>&nbsp;</span><span class=\"storage type class tsx\"><span>class</span></span><span>&nbsp;</span><span class=\"entity name type class tsx\"><span>SettingsPanel</span></span><span>&nbsp;</span><span class=\"storage modifier tsx\"><span>extends</span></span><span>&nbsp;</span><span class=\"entity name type module tsx\"><span>React</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity other inherited-class tsx\"><span>Component</span></span><span class=\"meta type parameters tsx\"><span class=\"punctuation definition typeparameters begin tsx\"><span>&lt;</span></span><span class=\"entity name type tsx\"><span>IPanelProps</span></span><span>&nbsp;</span><span class=\"keyword operator type tsx\"><span>&amp;</span></span><span>&nbsp;</span><span class=\"entity name type tsx\"><span>ISettingsPanelProps</span></span><span class=\"punctuation definition typeparameters end tsx\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"punctuation definition block tsx\"><span>{</span></span><span class=\"keyword operator spread tsx\"><span>...</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span></span></div></pre>"
        ],
        "contentsRaw": "Include this interface in your panel component's props type to access these\ntwo functions which are injected by `PanelStack`.\n\n```tsx\nimport { IPanelProps } from \"@blueprintjs/core\";\nexport class SettingsPanel extends React.Component<IPanelProps & ISettingsPanelProps> {...}\n```",
        "metadata": {}
      },
      "fileName": "../core/src/components/panel-stack/panelProps.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPanelProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L42",
      "methods": [
        {
          "fileName": "../core/src/components/panel-stack/panelProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "closePanel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L50",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Call this method to programatically close this panel. If this is the only\npanel on the stack then this method will do nothing.</p>\n<p>Remember that the panel header always contains a &quot;back&quot; button that\ncloses this panel on click (unless there is only one panel on the stack).</p>\n"
                ],
                "contentsRaw": "Call this method to programatically close this panel. If this is the only\npanel on the stack then this method will do nothing.\n\nRemember that the panel header always contains a \"back\" button that\ncloses this panel on click (unless there is only one panel on the stack).",
                "metadata": {}
              },
              "fileName": "../core/src/components/panel-stack/panelProps.ts",
              "kind": "signature",
              "name": "closePanel",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L50",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/panel-stack/panelProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "openPanel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L55",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Call this method to open a new panel on the top of the stack.</p>\n"
                ],
                "contentsRaw": "Call this method to open a new panel on the top of the stack.",
                "metadata": {}
              },
              "fileName": "../core/src/components/panel-stack/panelProps.ts",
              "kind": "signature",
              "name": "openPanel",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelProps.ts#L55",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "panel",
                  "type": "IPanel<P>"
                }
              ],
              "returnType": "void",
              "type": "(panel: IPanel<P>) => void"
            }
          ]
        }
      ],
      "properties": []
    },
    "IPanelViewProps": {
      "fileName": "../core/src/components/panel-stack/panelView.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPanelViewProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelView.tsx#L14",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user presses the back button or a panel invokes\nthe <code>closePanel()</code> injected prop method.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user presses the back button or a panel invokes\nthe `closePanel()` injected prop method.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelView.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelView.tsx#L19",
          "type": "(removedPanel: IPanel) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when a panel invokes the <code>openPanel(panel)</code> injected\nprop method.</p>\n"
            ],
            "contentsRaw": "Callback invoked when a panel invokes the `openPanel(panel)` injected\nprop method.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelView.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelView.tsx#L25",
          "type": "(addedPanel: IPanel) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The panel to be displayed.</p>\n"
            ],
            "contentsRaw": "The panel to be displayed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelView.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "panel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelView.tsx#L28",
          "type": "IPanel"
        },
        {
          "documentation": {
            "contents": [
              "<p>The previous panel in the stack, for rendering the &quot;back&quot; button.</p>\n"
            ],
            "contentsRaw": "The previous panel in the stack, for rendering the \"back\" button.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelView.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "previousPanel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelView.tsx#L31",
          "type": "IPanel"
        }
      ]
    },
    "IPanelStackProps": {
      "fileName": "../core/src/components/panel-stack/panelStack.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPanelStackProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelStack.tsx#L17",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The initial panel to show on mount. This panel cannot be removed from the\nstack and will appear when the stack is empty.</p>\n"
            ],
            "contentsRaw": "The initial panel to show on mount. This panel cannot be removed from the\nstack and will appear when the stack is empty.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialPanel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelStack.tsx#L22",
          "type": "IPanel"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user presses the back button or a panel invokes\nthe <code>closePanel()</code> injected prop method.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user presses the back button or a panel invokes\nthe `closePanel()` injected prop method.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelStack.tsx#L28",
          "type": "(removedPanel: IPanel) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when a panel invokes the <code>openPanel(panel)</code> injected\nprop method.</p>\n"
            ],
            "contentsRaw": "Callback invoked when a panel invokes the `openPanel(panel)` injected\nprop method.",
            "metadata": {}
          },
          "fileName": "../core/src/components/panel-stack/panelStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/panel-stack/panelStack.tsx#L34",
          "type": "(addedPanel: IPanel) => void"
        }
      ]
    },
    "IProgressBarProps": {
      "fileName": "../core/src/components/progress-bar/progressBar.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IProgressBarProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/progress-bar/progressBar.tsx#L14",
      "extends": [
        "IProps",
        "IIntentProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the background should animate.</p>\n"
            ],
            "contentsRaw": "Whether the background should animate.",
            "metadata": {}
          },
          "fileName": "../core/src/components/progress-bar/progressBar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "animate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/progress-bar/progressBar.tsx#L19",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the background should be striped.</p>\n"
            ],
            "contentsRaw": "Whether the background should be striped.",
            "metadata": {}
          },
          "fileName": "../core/src/components/progress-bar/progressBar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stripes",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/progress-bar/progressBar.tsx#L25",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A value between 0 and 1 (inclusive) representing how far along the operation is.\nValues below 0 or above 1 will be interpreted as 0 or 1, respectively.\nOmitting this prop will result in an &quot;indeterminate&quot; progress meter that fills the entire bar.</p>\n"
            ],
            "contentsRaw": "A value between 0 and 1 (inclusive) representing how far along the operation is.\nValues below 0 or above 1 will be interpreted as 0 or 1, respectively.\nOmitting this prop will result in an \"indeterminate\" progress meter that fills the entire bar.",
            "metadata": {}
          },
          "fileName": "../core/src/components/progress-bar/progressBar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/progress-bar/progressBar.tsx#L32",
          "type": "number"
        }
      ]
    },
    "IHandleProps": {
      "fileName": "../core/src/components/slider/handleProps.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHandleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L36",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Intent for the track segment immediately after this handle, taking priority over <code>intentBefore</code>.</p>\n"
            ],
            "contentsRaw": "Intent for the track segment immediately after this handle, taking priority over `intentBefore`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intentAfter",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L41",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Intent for the track segment immediately before this handle.</p>\n"
            ],
            "contentsRaw": "Intent for the track segment immediately before this handle.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intentBefore",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L44",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>How this handle interacts with other handles.</p>\n"
            ],
            "contentsRaw": "How this handle interacts with other handles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactionKind",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L50",
          "defaultValue": "\"lock\"",
          "type": "HandleInteractionKind"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when this handle&#39;s value is changed due to a drag\ninteraction. Note that &quot;push&quot; interactions can cause multiple handles to\nupdate at the same time.</p>\n"
            ],
            "contentsRaw": "Callback invoked when this handle's value is changed due to a drag\ninteraction. Note that \"push\" interactions can cause multiple handles to\nupdate at the same time.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L57",
          "type": "(newValue: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when this handle is released (the end of a drag interaction).</p>\n"
            ],
            "contentsRaw": "Callback invoked when this handle is released (the end of a drag interaction).",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onRelease",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L60",
          "type": "(newValue: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Handle appearance type.</p>\n"
            ],
            "contentsRaw": "Handle appearance type.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L66",
          "defaultValue": "\"full\"",
          "type": "HandleType"
        },
        {
          "documentation": {
            "contents": [
              "<p>Numeric value of this handle.</p>\n"
            ],
            "contentsRaw": "Numeric value of this handle.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L38",
          "type": "number"
        }
      ]
    },
    "IInternalHandleProps": {
      "documentation": {
        "contents": [
          "<p>Props for the internal <Handle> component needs some additional info from the parent Slider.\nN.B. some properties need to be optional for spread in slider.tsx to work</p>\n"
        ],
        "contentsRaw": "Props for the internal <Handle> component needs some additional info from the parent Slider.\nN.B. some properties need to be optional for spread in slider.tsx to work",
        "metadata": {}
      },
      "fileName": "../core/src/components/slider/handle.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IInternalHandleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L22",
      "extends": [
        "IHandleProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when this handle&#39;s value is changed due to a drag\ninteraction. Note that &quot;push&quot; interactions can cause multiple handles to\nupdate at the same time.</p>\n"
            ],
            "contentsRaw": "Callback invoked when this handle's value is changed due to a drag\ninteraction. Note that \"push\" interactions can cause multiple handles to\nupdate at the same time.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L57",
          "inheritedFrom": "IHandleProps.onChange",
          "type": "(newValue: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Intent for the track segment immediately after this handle, taking priority over <code>intentBefore</code>.</p>\n"
            ],
            "contentsRaw": "Intent for the track segment immediately after this handle, taking priority over `intentBefore`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intentAfter",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L41",
          "inheritedFrom": "IHandleProps.intentAfter",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Intent for the track segment immediately before this handle.</p>\n"
            ],
            "contentsRaw": "Intent for the track segment immediately before this handle.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intentBefore",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L44",
          "inheritedFrom": "IHandleProps.intentBefore",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>How this handle interacts with other handles.</p>\n"
            ],
            "contentsRaw": "How this handle interacts with other handles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactionKind",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L50",
          "defaultValue": "\"lock\"",
          "inheritedFrom": "IHandleProps.interactionKind",
          "type": "HandleInteractionKind"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L24",
          "type": "React.ReactChild"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "max",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L25",
          "type": "number"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "min",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L26",
          "type": "number"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L23",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when this handle is released (the end of a drag interaction).</p>\n"
            ],
            "contentsRaw": "Callback invoked when this handle is released (the end of a drag interaction).",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onRelease",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L60",
          "inheritedFrom": "IHandleProps.onRelease",
          "type": "(newValue: number) => void"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L27",
          "type": "number"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tickSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L28",
          "type": "number"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tickSizeRatio",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L29",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Handle appearance type.</p>\n"
            ],
            "contentsRaw": "Handle appearance type.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "type",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L66",
          "defaultValue": "\"full\"",
          "inheritedFrom": "IHandleProps.type",
          "type": "HandleType"
        },
        {
          "documentation": {
            "contents": [
              "<p>Numeric value of this handle.</p>\n"
            ],
            "contentsRaw": "Numeric value of this handle.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L38",
          "inheritedFrom": "IHandleProps.value",
          "type": "number"
        },
        {
          "fileName": "../core/src/components/slider/handle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handle.tsx#L30",
          "type": "boolean"
        }
      ]
    },
    "IChildrenProps": {
      "documentation": {
        "contents": [
          "<p>A convenience type for React&#39;s optional children prop.</p>\n"
        ],
        "contentsRaw": "A convenience type for React's optional children prop.",
        "metadata": {}
      },
      "fileName": "../core/src/components/slider/multiSlider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IChildrenProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L28",
      "methods": [],
      "properties": [
        {
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L29",
          "type": "React.ReactNode"
        }
      ]
    },
    "ISliderBaseProps": {
      "fileName": "../core/src/components/slider/multiSlider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ISliderBaseProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L32",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the slider is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the slider is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L37",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the <code>stepSize</code> prop. This prop has <em>no effect</em> if you supply a custom\n<code>labelRenderer</code> callback.</p>\n"
            ],
            "contentsRaw": "Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the `stepSize` prop. This prop has _no effect_ if you supply a custom\n`labelRenderer` callback.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelPrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L51",
          "defaultValue": "inferred from stepSize",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf <code>true</code>, labels will use number value formatted to <code>labelPrecision</code> decimal places.\nIf <code>false</code>, labels will not be shown.</p>\n"
            ],
            "contentsRaw": "Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L84",
          "defaultValue": "true",
          "type": "boolean | (value: number) => string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive labels. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive labels. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelStepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L43",
          "defaultValue": "1",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Maximum value of the slider.</p>\n"
            ],
            "contentsRaw": "Maximum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "max",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L57",
          "defaultValue": "10",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Minimum value of the slider.</p>\n"
            ],
            "contentsRaw": "Minimum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "min",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L63",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for <code>RangeSlider</code>.</p>\n"
            ],
            "contentsRaw": "Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for `RangeSlider`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showTrackFill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L70",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive values; amount by which the handle moves. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive values; amount by which the handle moves. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L76",
          "defaultValue": "1",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show the slider in a vertical orientation.</p>\n"
            ],
            "contentsRaw": "Whether to show the slider in a vertical orientation.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L90",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "IMultiSliderProps": {
      "fileName": "../core/src/components/slider/multiSlider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IMultiSliderProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L93",
      "extends": [
        "ISliderBaseProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L98",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when a handle value changes. Receives handle values in sorted order.</p>\n"
                ],
                "contentsRaw": "Callback invoked when a handle value changes. Receives handle values in sorted order.",
                "metadata": {}
              },
              "fileName": "../core/src/components/slider/multiSlider.tsx",
              "kind": "signature",
              "name": "onChange",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L98",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "values",
                  "type": "number[]"
                }
              ],
              "returnType": "void",
              "type": "(values: number[]) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onRelease",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L101",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when a handle is released. Receives handle values in sorted order.</p>\n"
                ],
                "contentsRaw": "Callback invoked when a handle is released. Receives handle values in sorted order.",
                "metadata": {}
              },
              "fileName": "../core/src/components/slider/multiSlider.tsx",
              "kind": "signature",
              "name": "onRelease",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L101",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "values",
                  "type": "number[]"
                }
              ],
              "returnType": "void",
              "type": "(values: number[]) => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive labels. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive labels. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelStepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L43",
          "defaultValue": "1",
          "inheritedFrom": "ISliderBaseProps.labelStepSize",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the slider is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the slider is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L37",
          "defaultValue": "false",
          "inheritedFrom": "ISliderBaseProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the <code>stepSize</code> prop. This prop has <em>no effect</em> if you supply a custom\n<code>labelRenderer</code> callback.</p>\n"
            ],
            "contentsRaw": "Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the `stepSize` prop. This prop has _no effect_ if you supply a custom\n`labelRenderer` callback.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelPrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L51",
          "defaultValue": "inferred from stepSize",
          "inheritedFrom": "ISliderBaseProps.labelPrecision",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf <code>true</code>, labels will use number value formatted to <code>labelPrecision</code> decimal places.\nIf <code>false</code>, labels will not be shown.</p>\n"
            ],
            "contentsRaw": "Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L84",
          "defaultValue": "true",
          "inheritedFrom": "ISliderBaseProps.labelRenderer",
          "type": "boolean | (value: number) => string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Default intent of a track segment, used only if no handle specifies <code>intentBefore/After</code>.</p>\n"
            ],
            "contentsRaw": "Default intent of a track segment, used only if no handle specifies `intentBefore/After`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultTrackIntent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L95",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Maximum value of the slider.</p>\n"
            ],
            "contentsRaw": "Maximum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "max",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L57",
          "defaultValue": "10",
          "inheritedFrom": "ISliderBaseProps.max",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Minimum value of the slider.</p>\n"
            ],
            "contentsRaw": "Minimum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "min",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L63",
          "defaultValue": "0",
          "inheritedFrom": "ISliderBaseProps.min",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for <code>RangeSlider</code>.</p>\n"
            ],
            "contentsRaw": "Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for `RangeSlider`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showTrackFill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L70",
          "defaultValue": "true",
          "inheritedFrom": "ISliderBaseProps.showTrackFill",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive values; amount by which the handle moves. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive values; amount by which the handle moves. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L76",
          "defaultValue": "1",
          "inheritedFrom": "ISliderBaseProps.stepSize",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show the slider in a vertical orientation.</p>\n"
            ],
            "contentsRaw": "Whether to show the slider in a vertical orientation.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L90",
          "defaultValue": "false",
          "inheritedFrom": "ISliderBaseProps.vertical",
          "type": "boolean"
        }
      ]
    },
    "IRangeSliderProps": {
      "fileName": "../core/src/components/slider/rangeSlider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRangeSliderProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/rangeSlider.tsx#L22",
      "extends": [
        "ISliderBaseProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/slider/rangeSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/rangeSlider.tsx#L30",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when the range value changes.</p>\n"
                ],
                "contentsRaw": "Callback invoked when the range value changes.",
                "metadata": {}
              },
              "fileName": "../core/src/components/slider/rangeSlider.tsx",
              "kind": "signature",
              "name": "onChange",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/rangeSlider.tsx#L30",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "NumberRange"
                }
              ],
              "returnType": "void",
              "type": "(value: NumberRange) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/slider/rangeSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onRelease",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/rangeSlider.tsx#L33",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when a handle is released.</p>\n"
                ],
                "contentsRaw": "Callback invoked when a handle is released.",
                "metadata": {}
              },
              "fileName": "../core/src/components/slider/rangeSlider.tsx",
              "kind": "signature",
              "name": "onRelease",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/rangeSlider.tsx#L33",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "NumberRange"
                }
              ],
              "returnType": "void",
              "type": "(value: NumberRange) => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Maximum value of the slider.</p>\n"
            ],
            "contentsRaw": "Maximum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "max",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L57",
          "defaultValue": "10",
          "inheritedFrom": "ISliderBaseProps.max",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the <code>stepSize</code> prop. This prop has <em>no effect</em> if you supply a custom\n<code>labelRenderer</code> callback.</p>\n"
            ],
            "contentsRaw": "Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the `stepSize` prop. This prop has _no effect_ if you supply a custom\n`labelRenderer` callback.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelPrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L51",
          "defaultValue": "inferred from stepSize",
          "inheritedFrom": "ISliderBaseProps.labelPrecision",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf <code>true</code>, labels will use number value formatted to <code>labelPrecision</code> decimal places.\nIf <code>false</code>, labels will not be shown.</p>\n"
            ],
            "contentsRaw": "Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L84",
          "defaultValue": "true",
          "inheritedFrom": "ISliderBaseProps.labelRenderer",
          "type": "boolean | (value: number) => string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive labels. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive labels. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelStepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L43",
          "defaultValue": "1",
          "inheritedFrom": "ISliderBaseProps.labelStepSize",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the slider is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the slider is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L37",
          "defaultValue": "false",
          "inheritedFrom": "ISliderBaseProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Minimum value of the slider.</p>\n"
            ],
            "contentsRaw": "Minimum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "min",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L63",
          "defaultValue": "0",
          "inheritedFrom": "ISliderBaseProps.min",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for <code>RangeSlider</code>.</p>\n"
            ],
            "contentsRaw": "Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for `RangeSlider`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showTrackFill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L70",
          "defaultValue": "true",
          "inheritedFrom": "ISliderBaseProps.showTrackFill",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive values; amount by which the handle moves. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive values; amount by which the handle moves. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L76",
          "defaultValue": "1",
          "inheritedFrom": "ISliderBaseProps.stepSize",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Range value of slider. Handles will be rendered at each position in the range.</p>\n"
            ],
            "contentsRaw": "Range value of slider. Handles will be rendered at each position in the range.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/rangeSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/rangeSlider.tsx#L27",
          "defaultValue": "[0, 10]",
          "type": "NumberRange"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show the slider in a vertical orientation.</p>\n"
            ],
            "contentsRaw": "Whether to show the slider in a vertical orientation.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L90",
          "defaultValue": "false",
          "inheritedFrom": "ISliderBaseProps.vertical",
          "type": "boolean"
        }
      ]
    },
    "ISliderProps": {
      "fileName": "../core/src/components/slider/slider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ISliderProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/slider.tsx#L14",
      "extends": [
        "ISliderBaseProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/slider/slider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/slider.tsx#L29",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when the value changes.</p>\n"
                ],
                "contentsRaw": "Callback invoked when the value changes.",
                "metadata": {}
              },
              "fileName": "../core/src/components/slider/slider.tsx",
              "kind": "signature",
              "name": "onChange",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/slider.tsx#L29",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "number"
                }
              ],
              "returnType": "void",
              "type": "(value: number) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/slider/slider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onRelease",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/slider.tsx#L32",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Callback invoked when the handle is released.</p>\n"
                ],
                "contentsRaw": "Callback invoked when the handle is released.",
                "metadata": {}
              },
              "fileName": "../core/src/components/slider/slider.tsx",
              "kind": "signature",
              "name": "onRelease",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/slider.tsx#L32",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "value",
                  "type": "number"
                }
              ],
              "returnType": "void",
              "type": "(value: number) => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Maximum value of the slider.</p>\n"
            ],
            "contentsRaw": "Maximum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "max",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L57",
          "defaultValue": "10",
          "inheritedFrom": "ISliderBaseProps.max",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial value of the slider. This determines the other end of the\ntrack fill: from <code>initialValue</code> to <code>value</code>.</p>\n"
            ],
            "contentsRaw": "Initial value of the slider. This determines the other end of the\ntrack fill: from `initialValue` to `value`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/slider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/slider.tsx#L20",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the <code>stepSize</code> prop. This prop has <em>no effect</em> if you supply a custom\n<code>labelRenderer</code> callback.</p>\n"
            ],
            "contentsRaw": "Number of decimal places to use when rendering label value. Default value is the number of\ndecimals used in the `stepSize` prop. This prop has _no effect_ if you supply a custom\n`labelRenderer` callback.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelPrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L51",
          "defaultValue": "inferred from stepSize",
          "inheritedFrom": "ISliderBaseProps.labelPrecision",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf <code>true</code>, labels will use number value formatted to <code>labelPrecision</code> decimal places.\nIf <code>false</code>, labels will not be shown.</p>\n"
            ],
            "contentsRaw": "Callback to render a single label. Useful for formatting numbers as currency or percentages.\nIf `true`, labels will use number value formatted to `labelPrecision` decimal places.\nIf `false`, labels will not be shown.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L84",
          "defaultValue": "true",
          "inheritedFrom": "ISliderBaseProps.labelRenderer",
          "type": "boolean | (value: number) => string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive labels. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive labels. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "labelStepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L43",
          "defaultValue": "1",
          "inheritedFrom": "ISliderBaseProps.labelStepSize",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the slider is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the slider is non-interactive.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L37",
          "defaultValue": "false",
          "inheritedFrom": "ISliderBaseProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Minimum value of the slider.</p>\n"
            ],
            "contentsRaw": "Minimum value of the slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "min",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L63",
          "defaultValue": "0",
          "inheritedFrom": "ISliderBaseProps.min",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for <code>RangeSlider</code>.</p>\n"
            ],
            "contentsRaw": "Whether a solid bar should be rendered on the track between current and initial values,\nor between handles for `RangeSlider`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showTrackFill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L70",
          "defaultValue": "true",
          "inheritedFrom": "ISliderBaseProps.showTrackFill",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Increment between successive values; amount by which the handle moves. Must be greater than zero.</p>\n"
            ],
            "contentsRaw": "Increment between successive values; amount by which the handle moves. Must be greater than zero.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stepSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L76",
          "defaultValue": "1",
          "inheritedFrom": "ISliderBaseProps.stepSize",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Value of slider.</p>\n"
            ],
            "contentsRaw": "Value of slider.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/slider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/slider.tsx#L26",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show the slider in a vertical orientation.</p>\n"
            ],
            "contentsRaw": "Whether to show the slider in a vertical orientation.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/multiSlider.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/multiSlider.tsx#L90",
          "defaultValue": "false",
          "inheritedFrom": "ISliderBaseProps.vertical",
          "type": "boolean"
        }
      ]
    },
    "ITabProps": {
      "fileName": "../core/src/components/tabs/tab.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITabProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L15",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Content of tab title, rendered in a list above the active panel.\nCan also be set via the <code>title</code> prop.</p>\n"
            ],
            "contentsRaw": "Content of tab title, rendered in a list above the active panel.\nCan also be set via the `title` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L20",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the tab is disabled.</p>\n"
            ],
            "contentsRaw": "Whether the tab is disabled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L26",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Unique identifier used to control which tab is selected\nand to generate ARIA attributes for accessibility.</p>\n"
            ],
            "contentsRaw": "Unique identifier used to control which tab is selected\nand to generate ARIA attributes for accessibility.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L32",
          "type": "TabId"
        },
        {
          "documentation": {
            "contents": [
              "<p>Panel content, rendered by the parent <code>Tabs</code> when this tab is active.\nIf omitted, no panel will be rendered for this tab.</p>\n"
            ],
            "contentsRaw": "Panel content, rendered by the parent `Tabs` when this tab is active.\nIf omitted, no panel will be rendered for this tab.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "panel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L38",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Content of tab title element, rendered in a list above the active panel.\nCan also be set via React <code>children</code>.</p>\n"
            ],
            "contentsRaw": "Content of tab title element, rendered in a list above the active panel.\nCan also be set via React `children`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L44",
          "type": "React.ReactNode"
        }
      ]
    },
    "ITabTitleProps": {
      "fileName": "../core/src/components/tabs/tabTitle.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITabTitleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabTitle.tsx#L14",
      "extends": [
        "ITabProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Content of tab title, rendered in a list above the active panel.\nCan also be set via the <code>title</code> prop.</p>\n"
            ],
            "contentsRaw": "Content of tab title, rendered in a list above the active panel.\nCan also be set via the `title` prop.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L20",
          "inheritedFrom": "ITabProps.children",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the tab is disabled.</p>\n"
            ],
            "contentsRaw": "Whether the tab is disabled.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L26",
          "defaultValue": "false",
          "inheritedFrom": "ITabProps.disabled",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Unique identifier used to control which tab is selected\nand to generate ARIA attributes for accessibility.</p>\n"
            ],
            "contentsRaw": "Unique identifier used to control which tab is selected\nand to generate ARIA attributes for accessibility.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L32",
          "inheritedFrom": "ITabProps.id",
          "type": "TabId"
        },
        {
          "documentation": {
            "contents": [
              "<p>Handler invoked when this tab is clicked.</p>\n"
            ],
            "contentsRaw": "Handler invoked when this tab is clicked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabTitle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabTitle.tsx#L16",
          "type": "(id: TabId, event: MouseEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Panel content, rendered by the parent <code>Tabs</code> when this tab is active.\nIf omitted, no panel will be rendered for this tab.</p>\n"
            ],
            "contentsRaw": "Panel content, rendered by the parent `Tabs` when this tab is active.\nIf omitted, no panel will be rendered for this tab.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "panel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L38",
          "inheritedFrom": "ITabProps.panel",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>ID of the parent <code>Tabs</code> to which this tab belongs. Used to generate ID for ARIA attributes.</p>\n"
            ],
            "contentsRaw": "ID of the parent `Tabs` to which this tab belongs. Used to generate ID for ARIA attributes.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabTitle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parentId",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabTitle.tsx#L19",
          "type": "TabId"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the tab is currently selected.</p>\n"
            ],
            "contentsRaw": "Whether the tab is currently selected.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabTitle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selected",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabTitle.tsx#L22",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Content of tab title element, rendered in a list above the active panel.\nCan also be set via React <code>children</code>.</p>\n"
            ],
            "contentsRaw": "Content of tab title element, rendered in a list above the active panel.\nCan also be set via React `children`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tab.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L44",
          "inheritedFrom": "ITabProps.title",
          "type": "React.ReactNode"
        }
      ]
    },
    "ITabsProps": {
      "fileName": "../core/src/components/tabs/tabs.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITabsProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L25",
      "extends": [
        "IProps"
      ],
      "methods": [
        {
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L77",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>A callback function that is invoked when a tab in the tab list is clicked.</p>\n"
                ],
                "contentsRaw": "A callback function that is invoked when a tab in the tab list is clicked.",
                "metadata": {}
              },
              "fileName": "../core/src/components/tabs/tabs.tsx",
              "kind": "signature",
              "name": "onChange",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L77",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "newTabId",
                  "type": "TabId"
                },
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "prevTabId",
                  "type": "TabId"
                },
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "event",
                  "type": "MouseEvent<HTMLElement>"
                }
              ],
              "returnType": "void",
              "type": "(newTabId: TabId, prevTabId: TabId, event: MouseEvent<HTMLElement>) => void"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the selected tab indicator should animate its movement.</p>\n"
            ],
            "contentsRaw": "Whether the selected tab indicator should animate its movement.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "animate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L30",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial selected tab <code>id</code>, for uncontrolled usage.\nNote that this prop refers only to <code>&lt;Tab&gt;</code> children; other types of elements are ignored.</p>\n"
            ],
            "contentsRaw": "Initial selected tab `id`, for uncontrolled usage.\nNote that this prop refers only to `<Tab>` children; other types of elements are ignored.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultSelectedTabId",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L37",
          "defaultValue": "first tab",
          "type": "TabId"
        },
        {
          "documentation": {
            "contents": [
              "<p>Unique identifier for this <code>Tabs</code> container. This will be combined with the <code>id</code> of each\n<code>Tab</code> child to generate ARIA accessibility attributes. IDs are required and should be\nunique on the page to support server-side rendering.</p>\n"
            ],
            "contentsRaw": "Unique identifier for this `Tabs` container. This will be combined with the `id` of each\n`Tab` child to generate ARIA accessibility attributes. IDs are required and should be\nunique on the page to support server-side rendering.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L44",
          "type": "TabId"
        },
        {
          "documentation": {
            "contents": [
              "<p>If set to <code>true</code>, the tab titles will display with larger styling.\nThis will apply large styles only to the tabs at this level, not to nested tabs.</p>\n"
            ],
            "contentsRaw": "If set to `true`, the tab titles will display with larger styling.\nThis will apply large styles only to the tabs at this level, not to nested tabs.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L51",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether inactive tab panels should be removed from the DOM and unmounted in React.\nThis can be a performance enhancement when rendering many complex panels, but requires\ncareful support for unmounting and remounting.</p>\n"
            ],
            "contentsRaw": "Whether inactive tab panels should be removed from the DOM and unmounted in React.\nThis can be a performance enhancement when rendering many complex panels, but requires\ncareful support for unmounting and remounting.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderActiveTabPanelOnly",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L59",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Selected tab <code>id</code>, for controlled usage.\nProviding this prop will put the component in controlled mode.\nUnknown ids will result in empty selection (no errors).</p>\n"
            ],
            "contentsRaw": "Selected tab `id`, for controlled usage.\nProviding this prop will put the component in controlled mode.\nUnknown ids will result in empty selection (no errors).",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedTabId",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L66",
          "type": "TabId"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show tabs stacked vertically on the left side.</p>\n"
            ],
            "contentsRaw": "Whether to show tabs stacked vertically on the left side.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tabs/tabs.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "vertical",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tabs.tsx#L72",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "ITagProps": {
      "fileName": "../core/src/components/tag/tag.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITagProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L15",
      "extends": [
        "IProps",
        "IIntentProps",
        "HTMLAttributes<HTMLSpanElement>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether this tag should use minimal styles.</p>\n"
            ],
            "contentsRaw": "Whether this tag should use minimal styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minimal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L45",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the tag should appear in an active state.</p>\n"
            ],
            "contentsRaw": "Whether the tag should appear in an active state.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "active",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L20",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render before the children.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render before the children.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L23",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the tag should visually respond to user interactions. If set\nto <code>true</code>, hovering over the tag will change its color and mouse cursor.</p>\n<p>Recommended when <code>onClick</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Whether the tag should visually respond to user interactions. If set\nto `true`, hovering over the tag will change its color and mouse cursor.\n\nRecommended when `onClick` is also defined.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L33",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this tag should use large styles.</p>\n"
            ],
            "contentsRaw": "Whether this tag should use large styles.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L39",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether tag content should be allowed to occupy multiple lines.\nIf false, a single line of text will be truncated with an ellipsis if\nit overflows. Note that icons will be vertically centered relative to\nmultiline text.</p>\n"
            ],
            "contentsRaw": "Whether tag content should be allowed to occupy multiple lines.\nIf false, a single line of text will be truncated with an ellipsis if\nit overflows. Note that icons will be vertically centered relative to\nmultiline text.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "multiline",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L54",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the tag is clicked.\nRecommended when <code>interactive</code> is <code>true</code>.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the tag is clicked.\nRecommended when `interactive` is `true`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L60",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Click handler for remove button.\nThe remove button will only be rendered if this prop is defined.</p>\n"
            ],
            "contentsRaw": "Click handler for remove button.\nThe remove button will only be rendered if this prop is defined.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onRemove",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L66",
          "type": "(e: MouseEvent<HTMLButtonElement>, tagProps: ITagProps) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render after the children.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render after the children.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rightIcon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L69",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this tag should have rounded ends.</p>\n"
            ],
            "contentsRaw": "Whether this tag should have rounded ends.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag/tag.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "round",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag/tag.tsx#L75",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "ITagInputProps": {
      "fileName": "../core/src/components/tag-input/tagInput.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITagInputProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L18",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when new tags are added by the user pressing <code>enter</code> on the input.\nReceives the current value of the input field split by <code>separator</code> into an array.\nNew tags are expected to be appended to the list.</p>\n<p>The input will be cleared after <code>onAdd</code> is invoked <em>unless</em> the callback explicitly\nreturns <code>false</code>. This is useful if the provided <code>value</code> is somehow invalid and should\nnot be added as a tag.</p>\n"
            ],
            "contentsRaw": "Callback invoked when new tags are added by the user pressing `enter` on the input.\nReceives the current value of the input field split by `separator` into an array.\nNew tags are expected to be appended to the list.\n\nThe input will be cleared after `onAdd` is invoked _unless_ the callback explicitly\nreturns `false`. This is useful if the provided `value` is somehow invalid and should\nnot be added as a tag.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onAdd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L77",
          "type": "(values: string[]) => boolean | void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, <code>onAdd</code> will be invoked when the input loses focus.\nOtherwise, <code>onAdd</code> is only invoked when <code>enter</code> is pressed.</p>\n"
            ],
            "contentsRaw": "If true, `onAdd` will be invoked when the input loses focus.\nOtherwise, `onAdd` is only invoked when `enter` is pressed.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "addOnBlur",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L24",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the component is non-interactive.\nNote that you&#39;ll also need to disable the component&#39;s <code>rightElement</code>,\nif appropriate.</p>\n"
            ],
            "contentsRaw": "Whether the component is non-interactive.\nNote that you'll also need to disable the component's `rightElement`,\nif appropriate.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L45",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the tag input should take up the full width of its container.</p>\n"
            ],
            "contentsRaw": "Whether the tag input should take up the full width of its container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fill",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L48",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>React props to pass to the <code>&lt;input&gt;</code> element.\nNote that <code>ref</code> and <code>key</code> are not supported here; use <code>inputRef</code> below.</p>\n"
            ],
            "contentsRaw": "React props to pass to the `<input>` element.\nNote that `ref` and `key` are not supported here; use `inputRef` below.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L54",
          "type": "HTMLInputProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Ref handler for the <code>&lt;input&gt;</code> element.</p>\n"
            ],
            "contentsRaw": "Ref handler for the `<input>` element.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L57",
          "type": "(input: HTMLInputElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Controlled value of the <code>&lt;input&gt;</code> element. This is shorthand for <code>inputProps={{ value }}</code>.</p>\n"
            ],
            "contentsRaw": "Controlled value of the `<input>` element. This is shorthand for `inputProps={{ value }}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L60",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the tag input should use a large size.</p>\n"
            ],
            "contentsRaw": "Whether the tag input should use a large size.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "large",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L63",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render on the left side of the input.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render on the left side of the input.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "leftIcon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L66",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, <code>onAdd</code> will be invoked when the user pastes text containing the <code>separator</code>\ninto the input. Otherwise, pasted text will remain in the input.</p>\n<p><strong>Note:</strong> For example, if <code>addOnPaste=true</code> and <code>separator=&quot;\\n&quot;</code> (new line), then:</p>\n<ul>\n<li>Pasting <code>&quot;hello&quot;</code> will <em>not</em> invoke <code>onAdd</code></li>\n<li>Pasting <code>&quot;hello\\n&quot;</code> will invoke <code>onAdd</code> with <code>[&quot;hello&quot;]</code></li>\n<li>Pasting <code>&quot;hello\\nworld&quot;</code> will invoke <code>onAdd</code> with <code>[&quot;hello&quot;, &quot;world&quot;]</code></li>\n</ul>\n"
            ],
            "contentsRaw": "If true, `onAdd` will be invoked when the user pastes text containing the `separator`\ninto the input. Otherwise, pasted text will remain in the input.\n\n__Note:__ For example, if `addOnPaste=true` and `separator=\"\\n\"` (new line), then:\n- Pasting `\"hello\"` will _not_ invoke `onAdd`\n- Pasting `\"hello\\n\"` will invoke `onAdd` with `[\"hello\"]`\n- Pasting `\"hello\\nworld\"` will invoke `onAdd` with `[\"hello\", \"world\"]`",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "addOnPaste",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L37",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when new tags are added or removed. Receives the updated list of <code>values</code>:\nnew tags are appended to the end of the list, removed tags are removed at their index.</p>\n<p>Like <code>onAdd</code>, the input will be cleared after this handler is invoked <em>unless</em> the callback\nexplicitly returns <code>false</code>.</p>\n<p>This callback essentially implements basic <code>onAdd</code> and <code>onRemove</code> functionality and merges\nthe two handlers into one to simplify controlled usage.</p>\n<p><strong>Note about typed usage:</strong> Your handler can declare a subset type of <code>React.ReactNode[]</code>,\nsuch as <code>string[]</code> or <code>Array&lt;string | JSX.Element&gt;</code>, to match the type of your <code>values</code> array:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag begin tsx\"><span>&lt;</span></span><span class=\"entity name tag tsx\"><span class=\"support class component tsx\"><span>TagInput</span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>onChange</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta arrow tsx\"><span class=\"meta parameters tsx\"><span class=\"punctuation definition parameters begin tsx\"><span>(</span></span><span class=\"variable parameter tsx\"><span>values</span></span><span class=\"meta type annotation tsx\"><span class=\"keyword operator type annotation tsx\"><span>:</span></span><span>&nbsp;</span><span class=\"support type primitive tsx\"><span>string</span></span><span class=\"meta type tuple tsx\"><span class=\"meta brace square tsx\"><span>[</span><span>]</span></span></span></span><span class=\"punctuation definition parameters end tsx\"><span>)</span></span></span><span>&nbsp;</span><span class=\"storage type function arrow tsx\"><span>=&gt;</span></span><span>&nbsp;</span></span><span class=\"meta function-call tsx\"><span class=\"variable language this tsx\"><span>this</span></span><span class=\"punctuation accessor tsx\"><span>.</span></span><span class=\"entity name function tsx\"><span>setState</span></span></span><span class=\"meta brace round tsx\"><span>(</span></span><span class=\"meta objectliteral tsx\"><span class=\"punctuation definition block tsx\"><span>{</span></span><span>&nbsp;</span><span class=\"meta object member tsx\"><span class=\"variable other readwrite tsx\"><span>values</span></span><span>&nbsp;</span></span><span class=\"punctuation definition block tsx\"><span>}</span></span></span><span class=\"meta brace round tsx\"><span>)</span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"meta tag attributes tsx\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name tsx\"><span>values</span></span><span class=\"keyword operator assignment tsx\"><span>=</span></span><span class=\"meta embedded expression tsx\"><span class=\"punctuation section embedded begin tsx\"><span>{</span></span><span class=\"meta array literal tsx\"><span class=\"meta brace square tsx\"><span>[</span></span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>apple</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>banana</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"punctuation separator comma tsx\"><span>,</span></span><span>&nbsp;</span><span class=\"string quoted double tsx\"><span class=\"punctuation definition string begin tsx\"><span>&quot;</span></span><span>cherry</span><span class=\"punctuation definition string end tsx\"><span>&quot;</span></span></span><span class=\"meta brace square tsx\"><span>]</span></span></span><span class=\"punctuation section embedded end tsx\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source tsx\"><span class=\"meta tag tsx\"><span class=\"punctuation definition tag end tsx\"><span>/&gt;</span></span></span></span></div></pre>"
            ],
            "contentsRaw": "Callback invoked when new tags are added or removed. Receives the updated list of `values`:\nnew tags are appended to the end of the list, removed tags are removed at their index.\n\nLike `onAdd`, the input will be cleared after this handler is invoked _unless_ the callback\nexplicitly returns `false`.\n\nThis callback essentially implements basic `onAdd` and `onRemove` functionality and merges\nthe two handlers into one to simplify controlled usage.\n\n**Note about typed usage:** Your handler can declare a subset type of `React.ReactNode[]`,\nsuch as `string[]` or `Array<string | JSX.Element>`, to match the type of your `values` array:\n```tsx\n<TagInput\n    onChange={(values: string[]) => this.setState({ values })}\n    values={[\"apple\", \"banana\", \"cherry\"]}\n/>\n```",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L98",
          "type": "(values: React.ReactNode[]) => boolean | void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the value of <code>&lt;input&gt;</code> element is changed.\nThis is shorthand for <code>inputProps={{ onChange }}</code>.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the value of `<input>` element is changed.\nThis is shorthand for `inputProps={{ onChange }}`.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onInputChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L104",
          "type": "React.FormEventHandler<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user depresses a keyboard key.\nReceives the event and the index of the active tag (or <code>undefined</code> if\nfocused in the input).</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user depresses a keyboard key.\nReceives the event and the index of the active tag (or `undefined` if\nfocused in the input).",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L111",
          "type": "(event: KeyboardEvent<HTMLElement>, index?: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user releases a keyboard key.\nReceives the event and the index of the active tag (or <code>undefined</code> if\nfocused in the input).</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user releases a keyboard key.\nReceives the event and the index of the active tag (or `undefined` if\nfocused in the input).",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyUp",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L118",
          "type": "(event: KeyboardEvent<HTMLElement>, index?: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user clicks the X button on a tag.\nReceives value and index of removed tag.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user clicks the X button on a tag.\nReceives value and index of removed tag.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onRemove",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L124",
          "type": "(value: string, index: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Input placeholder text which will not appear if <code>values</code> contains any items\n(consistent with default HTML input behavior).\nUse <code>inputProps.placeholder</code> if you want the placeholder text to <em>always</em> appear.</p>\n<p>If you define both <code>placeholder</code> and <code>inputProps.placeholder</code>, then the former will appear\nwhen <code>values</code> is empty and the latter at all other times.</p>\n"
            ],
            "contentsRaw": "Input placeholder text which will not appear if `values` contains any items\n(consistent with default HTML input behavior).\nUse `inputProps.placeholder` if you want the placeholder text to _always_ appear.\n\nIf you define both `placeholder` and `inputProps.placeholder`, then the former will appear\nwhen `values` is empty and the latter at all other times.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L134",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Element to render on right side of input.\nFor best results, use a small spinner or minimal button (button height will adjust if <code>TagInput</code> uses large styles).\nOther elements will likely require custom styles for correct positioning.</p>\n"
            ],
            "contentsRaw": "Element to render on right side of input.\nFor best results, use a small spinner or minimal button (button height will adjust if `TagInput` uses large styles).\nOther elements will likely require custom styles for correct positioning.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rightElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L141",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Separator pattern used to split input text into multiple values. Default value splits on commas and newlines.\nExplicit <code>false</code> value disables splitting (note that <code>onAdd</code> will still receive an array of length 1).</p>\n"
            ],
            "contentsRaw": "Separator pattern used to split input text into multiple values. Default value splits on commas and newlines.\nExplicit `false` value disables splitting (note that `onAdd` will still receive an array of length 1).",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "separator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L148",
          "defaultValue": "/[,\\n\\r]/",
          "type": "string | RegExp | false"
        },
        {
          "documentation": {
            "contents": [
              "<p>React props to pass to each <code>Tag</code>. Provide an object to pass the same props to every tag,\nor a function to customize props per tag.</p>\n<p>If you define <code>onRemove</code> here then you will have to implement your own tag removal\nhandling as <code>TagInput</code>&#39;s own <code>onRemove</code> handler will never be invoked.</p>\n"
            ],
            "contentsRaw": "React props to pass to each `Tag`. Provide an object to pass the same props to every tag,\nor a function to customize props per tag.\n\nIf you define `onRemove` here then you will have to implement your own tag removal\nhandling as `TagInput`'s own `onRemove` handler will never be invoked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L157",
          "type": "ITagProps | (value: React.ReactNode, index: number) => ITagProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Controlled tag values. Each value will be rendered inside a <code>Tag</code>, which can be customized\nusing <code>tagProps</code>. Therefore, any valid React node can be used as a <code>TagInput</code> value; falsy\nvalues will not be rendered.</p>\n<p><strong>Note about typed usage:</strong> If you know your <code>values</code> will always be of a certain <code>ReactNode</code>\nsubtype, such as <code>string</code> or <code>ReactChild</code>, you can use that type on all your handlers\nto simplify type logic.</p>\n"
            ],
            "contentsRaw": "Controlled tag values. Each value will be rendered inside a `Tag`, which can be customized\nusing `tagProps`. Therefore, any valid React node can be used as a `TagInput` value; falsy\nvalues will not be rendered.\n\n__Note about typed usage:__ If you know your `values` will always be of a certain `ReactNode`\nsubtype, such as `string` or `ReactChild`, you can use that type on all your handlers\nto simplify type logic.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tag-input/tagInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "values",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tag-input/tagInput.tsx#L168",
          "type": "React.ReactNode[]"
        }
      ]
    },
    "IToastProps": {
      "fileName": "../core/src/components/toast/toast.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IToastProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toast.tsx#L18",
      "extends": [
        "IProps",
        "IIntentProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Action rendered as a minimal <code>AnchorButton</code>. The toast is dismissed automatically when the\nuser clicks the action button. Note that the <code>intent</code> prop is ignored (the action button\ncannot have its own intent color that might conflict with the toast&#39;s intent). Omit this\nprop to omit the action button.</p>\n"
            ],
            "contentsRaw": "Action rendered as a minimal `AnchorButton`. The toast is dismissed automatically when the\nuser clicks the action button. Note that the `intent` prop is ignored (the action button\ncannot have its own intent color that might conflict with the toast's intent). Omit this\nprop to omit the action button.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toast.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "action",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toast.tsx#L25",
          "type": "IActionProps & ILinkProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Name of a Blueprint UI icon (or an icon element) to render before the message.</p>\n"
            ],
            "contentsRaw": "Name of a Blueprint UI icon (or an icon element) to render before the message.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toast.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toast.tsx#L28",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Visual intent color to apply to element.</p>\n"
            ],
            "contentsRaw": "Visual intent color to apply to element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L43",
          "inheritedFrom": "IIntentProps.intent",
          "type": "Intent"
        },
        {
          "documentation": {
            "contents": [
              "<p>Message to display in the body of the toast.</p>\n"
            ],
            "contentsRaw": "Message to display in the body of the toast.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toast.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "message",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toast.tsx#L31",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the toast is dismissed, either by the user or by the timeout.\nThe value of the argument indicates whether the toast was closed because the timeout expired.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the toast is dismissed, either by the user or by the timeout.\nThe value of the argument indicates whether the toast was closed because the timeout expired.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toast.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDismiss",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toast.tsx#L37",
          "type": "(didTimeoutExpire: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Milliseconds to wait before automatically dismissing toast.\nProviding a value less than or equal to 0 will disable the timeout (this is discouraged).</p>\n"
            ],
            "contentsRaw": "Milliseconds to wait before automatically dismissing toast.\nProviding a value less than or equal to 0 will disable the timeout (this is discouraged).",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toast.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timeout",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toast.tsx#L44",
          "defaultValue": "5000",
          "type": "number"
        }
      ]
    },
    "IToaster": {
      "documentation": {
        "contents": [
          "<p>Instance methods available on a <code>&lt;Toaster&gt;</code> component instance.</p>\n"
        ],
        "contentsRaw": "Instance methods available on a `<Toaster>` component instance.",
        "metadata": {}
      },
      "fileName": "../core/src/components/toast/toaster.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IToaster",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L31",
      "methods": [
        {
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "clear",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L43",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Dismiss all toasts instantly.</p>\n"
                ],
                "contentsRaw": "Dismiss all toasts instantly.",
                "metadata": {}
              },
              "fileName": "../core/src/components/toast/toaster.tsx",
              "kind": "signature",
              "name": "clear",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L43",
              "parameters": [],
              "returnType": "void",
              "type": "() => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "dismiss",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L40",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Dismiss the given toast instantly.</p>\n"
                ],
                "contentsRaw": "Dismiss the given toast instantly.",
                "metadata": {}
              },
              "fileName": "../core/src/components/toast/toaster.tsx",
              "kind": "signature",
              "name": "dismiss",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L40",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "key",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(key: string) => void"
            }
          ]
        },
        {
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getToasts",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L46",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Returns the props for all current toasts.</p>\n"
                ],
                "contentsRaw": "Returns the props for all current toasts.",
                "metadata": {}
              },
              "fileName": "../core/src/components/toast/toaster.tsx",
              "kind": "signature",
              "name": "getToasts",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L46",
              "parameters": [],
              "returnType": "IToastOptions[]",
              "type": "() => IToastOptions[]"
            }
          ]
        },
        {
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "show",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L37",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Shows a new toast to the user, or updates an existing toast corresponding to the provided key (optional).</p>\n<p>Returns the unique key of the toast.</p>\n"
                ],
                "contentsRaw": "Shows a new toast to the user, or updates an existing toast corresponding to the provided key (optional).\n\nReturns the unique key of the toast.",
                "metadata": {}
              },
              "fileName": "../core/src/components/toast/toaster.tsx",
              "kind": "signature",
              "name": "show",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L37",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "props",
                  "type": "IToastProps"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "key",
                  "type": "string"
                }
              ],
              "returnType": "string",
              "type": "(props: IToastProps, key?: string) => string"
            }
          ]
        }
      ],
      "properties": []
    },
    "IToasterProps": {
      "documentation": {
        "contents": [
          "<p>Props supported by the <code>&lt;Toaster&gt;</code> component.\nThese props can be passed as an argument to the static <code>Toaster.create(props?, container?)</code> method.</p>\n"
        ],
        "contentsRaw": "Props supported by the `<Toaster>` component.\nThese props can be passed as an argument to the static `Toaster.create(props?, container?)` method.",
        "metadata": {}
      },
      "fileName": "../core/src/components/toast/toaster.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IToasterProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L53",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether a toast should acquire application focus when it first opens.\nThis is disabled by default so that toasts do not interrupt the user&#39;s flow.\nNote that <code>enforceFocus</code> is always disabled for <code>Toaster</code>s.</p>\n"
            ],
            "contentsRaw": "Whether a toast should acquire application focus when it first opens.\nThis is disabled by default so that toasts do not interrupt the user's flow.\nNote that `enforceFocus` is always disabled for `Toaster`s.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "autoFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L60",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether pressing the <code>esc</code> key should clear all active toasts.</p>\n"
            ],
            "contentsRaw": "Whether pressing the `esc` key should clear all active toasts.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canEscapeKeyClear",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L66",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Position of <code>Toaster</code> within its container.</p>\n<p>Note that only <code>TOP</code> and <code>BOTTOM</code> are supported because Toaster only\nsupports the top and bottom edge positioning.</p>\n"
            ],
            "contentsRaw": "Position of `Toaster` within its container.\n\nNote that only `TOP` and `BOTTOM` are supported because Toaster only\nsupports the top and bottom edge positioning.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "position",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L85",
          "defaultValue": "Position.TOP",
          "type": "ToasterPosition"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the toaster should be rendered into a new element attached to <code>document.body</code>.\nIf <code>false</code>, then positioning will be relative to the parent element.</p>\n<p>This prop is ignored by <code>Toaster.create()</code> as that method always appends a new element\nto the container.</p>\n"
            ],
            "contentsRaw": "Whether the toaster should be rendered into a new element attached to `document.body`.\nIf `false`, then positioning will be relative to the parent element.\n\nThis prop is ignored by `Toaster.create()` as that method always appends a new element\nto the container.",
            "metadata": {}
          },
          "fileName": "../core/src/components/toast/toaster.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "usePortal",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L76",
          "defaultValue": "true",
          "type": "boolean"
        }
      ]
    },
    "ITreeNode": {
      "fileName": "../core/src/components/tree/treeNode.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITreeNode",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L16",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Child tree nodes of this node.</p>\n"
            ],
            "contentsRaw": "Child tree nodes of this node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "childNodes",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L20",
          "type": "Array<ITreeNode<T>>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the caret to expand/collapse a node should be shown.\nIf not specified, this will be true if the node has children and false otherwise.</p>\n"
            ],
            "contentsRaw": "Whether the caret to expand/collapse a node should be shown.\nIf not specified, this will be true if the node has children and false otherwise.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hasCaret",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L26",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name of a Blueprint icon (or an icon element) to render next to the node&#39;s label.</p>\n"
            ],
            "contentsRaw": "The name of a Blueprint icon (or an icon element) to render next to the node's label.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L31",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>A unique identifier for the node.</p>\n"
            ],
            "contentsRaw": "A unique identifier for the node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L36",
          "type": "string | number"
        },
        {
          "documentation": {
            "contents": [],
            "contentsRaw": "",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isExpanded",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L40",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this node is selected.</p>\n"
            ],
            "contentsRaw": "Whether this node is selected.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isSelected",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L46",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The main label for the node.</p>\n"
            ],
            "contentsRaw": "The main label for the node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L51",
          "type": "string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional custom user object to associate with the node.\nThis property can then be used in the <code>onClick</code>, <code>onContextMenu</code> and <code>onDoubleClick</code>\nevent handlers for doing custom logic per node.</p>\n"
            ],
            "contentsRaw": "An optional custom user object to associate with the node.\nThis property can then be used in the `onClick`, `onContextMenu` and `onDoubleClick`\nevent handlers for doing custom logic per node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "nodeData",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L63",
          "type": "T"
        },
        {
          "documentation": {
            "contents": [
              "<p>A secondary label/component that is displayed at the right side of the node.</p>\n"
            ],
            "contentsRaw": "A secondary label/component that is displayed at the right side of the node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "secondaryLabel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L56",
          "type": "string | MaybeElement"
        }
      ]
    },
    "ITreeNodeProps": {
      "fileName": "../core/src/components/tree/treeNode.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITreeNodeProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L66",
      "extends": [
        "ITreeNode<T>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The main label for the node.</p>\n"
            ],
            "contentsRaw": "The main label for the node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L51",
          "inheritedFrom": "ITreeNode.label",
          "type": "string | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Child tree nodes of this node.</p>\n"
            ],
            "contentsRaw": "Child tree nodes of this node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "childNodes",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L20",
          "inheritedFrom": "ITreeNode.childNodes",
          "type": "Array<ITreeNode<T>>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "contentRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L68",
          "type": "(node: TreeNode<T>, element: HTMLDivElement | null) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "depth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L69",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the caret to expand/collapse a node should be shown.\nIf not specified, this will be true if the node has children and false otherwise.</p>\n"
            ],
            "contentsRaw": "Whether the caret to expand/collapse a node should be shown.\nIf not specified, this will be true if the node has children and false otherwise.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hasCaret",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L26",
          "inheritedFrom": "ITreeNode.hasCaret",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name of a Blueprint icon (or an icon element) to render next to the node&#39;s label.</p>\n"
            ],
            "contentsRaw": "The name of a Blueprint icon (or an icon element) to render next to the node's label.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L31",
          "inheritedFrom": "ITreeNode.icon",
          "type": "IconName | MaybeElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>A unique identifier for the node.</p>\n"
            ],
            "contentsRaw": "A unique identifier for the node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L36",
          "inheritedFrom": "ITreeNode.id",
          "type": "string | number"
        },
        {
          "documentation": {
            "contents": [],
            "contentsRaw": "",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isExpanded",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L40",
          "inheritedFrom": "ITreeNode.isExpanded",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this node is selected.</p>\n"
            ],
            "contentsRaw": "Whether this node is selected.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isSelected",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L46",
          "defaultValue": "false",
          "inheritedFrom": "ITreeNode.isSelected",
          "type": "boolean"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "key",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L70",
          "type": "string | number"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L67",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional custom user object to associate with the node.\nThis property can then be used in the <code>onClick</code>, <code>onContextMenu</code> and <code>onDoubleClick</code>\nevent handlers for doing custom logic per node.</p>\n"
            ],
            "contentsRaw": "An optional custom user object to associate with the node.\nThis property can then be used in the `onClick`, `onContextMenu` and `onDoubleClick`\nevent handlers for doing custom logic per node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "nodeData",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L63",
          "inheritedFrom": "ITreeNode.nodeData",
          "type": "T"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L71",
          "type": "(node: TreeNode<T>, e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCollapse",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L72",
          "type": "(node: TreeNode<T>, e: MouseEvent<HTMLSpanElement>) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onContextMenu",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L73",
          "type": "(node: TreeNode<T>, e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDoubleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L74",
          "type": "(node: TreeNode<T>, e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onExpand",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L75",
          "type": "(node: TreeNode<T>, e: MouseEvent<HTMLSpanElement>) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onMouseEnter",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L76",
          "type": "(node: TreeNode<T>, e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onMouseLeave",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L77",
          "type": "(node: TreeNode<T>, e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "path",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L78",
          "type": "number[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>A secondary label/component that is displayed at the right side of the node.</p>\n"
            ],
            "contentsRaw": "A secondary label/component that is displayed at the right side of the node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/treeNode.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "secondaryLabel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/treeNode.tsx#L56",
          "inheritedFrom": "ITreeNode.secondaryLabel",
          "type": "string | MaybeElement"
        }
      ]
    },
    "ITreeProps": {
      "fileName": "../core/src/components/tree/tree.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITreeProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L21",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A space-delimited list of class names to pass along to a child element.</p>\n"
            ],
            "contentsRaw": "A space-delimited list of class names to pass along to a child element.",
            "metadata": {}
          },
          "fileName": "../core/src/common/props.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L38",
          "inheritedFrom": "IProps.className",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The data specifying the contents and appearance of the tree.</p>\n"
            ],
            "contentsRaw": "The data specifying the contents and appearance of the tree.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "contents",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L25",
          "type": "Array<ITreeNode<T>>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.</p>\n"
            ],
            "contentsRaw": "Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNodeClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L30",
          "type": "TreeEventHandler<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when caret of an expanded node is clicked.</p>\n"
            ],
            "contentsRaw": "Invoked when caret of an expanded node is clicked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNodeCollapse",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L35",
          "type": "TreeEventHandler<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when a node is right-clicked or the context menu button is pressed on a focused node.</p>\n"
            ],
            "contentsRaw": "Invoked when a node is right-clicked or the context menu button is pressed on a focused node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNodeContextMenu",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L40",
          "type": "TreeEventHandler<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when a node is double-clicked. Be careful when using this in combination with\nan <code>onNodeClick</code> (single-click) handler, as the way this behaves can vary between browsers.\nSee <a href=\"http://stackoverflow.com/q/5497073/3124288\">http://stackoverflow.com/q/5497073/3124288</a></p>\n"
            ],
            "contentsRaw": "Invoked when a node is double-clicked. Be careful when using this in combination with\nan `onNodeClick` (single-click) handler, as the way this behaves can vary between browsers.\nSee http://stackoverflow.com/q/5497073/3124288",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNodeDoubleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L47",
          "type": "TreeEventHandler<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when the caret of a collapsed node is clicked.</p>\n"
            ],
            "contentsRaw": "Invoked when the caret of a collapsed node is clicked.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNodeExpand",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L52",
          "type": "TreeEventHandler<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when the mouse is moved over a node.</p>\n"
            ],
            "contentsRaw": "Invoked when the mouse is moved over a node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNodeMouseEnter",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L57",
          "type": "TreeEventHandler<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when the mouse is moved out of a node.</p>\n"
            ],
            "contentsRaw": "Invoked when the mouse is moved out of a node.",
            "metadata": {}
          },
          "fileName": "../core/src/components/tree/tree.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onNodeMouseLeave",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L62",
          "type": "TreeEventHandler<T>"
        }
      ]
    },
    "ITimePickerProps": {
      "fileName": "../datetime/src/timePicker.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITimePickerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L40",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Initial time the <code>TimePicker</code> will display.\nThis should not be set if <code>value</code> is set.</p>\n"
            ],
            "contentsRaw": "Initial time the `TimePicker` will display.\nThis should not be set if `value` is set.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L45",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the time picker is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the time picker is non-interactive.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L51",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The latest time the user can select. The year, month, and day parts of the <code>Date</code> object are ignored.\nWhile the <code>maxTime</code> will be later than the <code>minTime</code> in the basic case,\nit is also allowed to be earlier than the <code>minTime</code>.\nThis is useful, for example, to express a time range that extends before and after midnight.\nIf the <code>maxTime</code> and <code>minTime</code> are equal, then the valid time range is constrained to only that one value.</p>\n"
            ],
            "contentsRaw": "The latest time the user can select. The year, month, and day parts of the `Date` object are ignored.\nWhile the `maxTime` will be later than the `minTime` in the basic case,\nit is also allowed to be earlier than the `minTime`.\nThis is useful, for example, to express a time range that extends before and after midnight.\nIf the `maxTime` and `minTime` are equal, then the valid time range is constrained to only that one value.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxTime",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L89",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The earliest time the user can select. The year, month, and day parts of the <code>Date</code> object are ignored.\nWhile the <code>minTime</code> will be earlier than the <code>maxTime</code> in the basic case,\nit is also allowed to be later than the <code>maxTime</code>.\nThis is useful, for example, to express a time range that extends before and after midnight.\nIf the <code>maxTime</code> and <code>minTime</code> are equal, then the valid time range is constrained to only that one value.</p>\n"
            ],
            "contentsRaw": "The earliest time the user can select. The year, month, and day parts of the `Date` object are ignored.\nWhile the `minTime` will be earlier than the `maxTime` in the basic case,\nit is also allowed to be later than the `maxTime`.\nThis is useful, for example, to express a time range that extends before and after midnight.\nIf the `maxTime` and `minTime` are equal, then the valid time range is constrained to only that one value.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minTime",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L98",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user changes the time.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user changes the time.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L56",
          "type": "(newTime: Date) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The precision of time the user can set.</p>\n"
            ],
            "contentsRaw": "The precision of time the user can set.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "precision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L62",
          "defaultValue": "TimePrecision.MINUTE",
          "type": "TimePrecision"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether all the text in each input should be selected on focus.</p>\n"
            ],
            "contentsRaw": "Whether all the text in each input should be selected on focus.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectAllOnFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L68",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show arrows buttons for changing the time.</p>\n"
            ],
            "contentsRaw": "Whether to show arrows buttons for changing the time.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showArrowButtons",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L74",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to use a 12 hour format with an AM/PM dropdown.</p>\n"
            ],
            "contentsRaw": "Whether to use a 12 hour format with an AM/PM dropdown.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "useAmPm",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L80",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently set time.\nIf this prop is provided, the component acts in a controlled manner.</p>\n"
            ],
            "contentsRaw": "The currently set time.\nIf this prop is provided, the component acts in a controlled manner.",
            "metadata": {}
          },
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L104",
          "type": "Date"
        }
      ]
    },
    "IDatePickerModifiers": {
      "documentation": {
        "contents": [
          "<p>Collection of functions that determine which modifier classes get applied to which days.\nSee the <a href=\"http://react-day-picker.js.org/Modifiers.html\"><strong>react-day-picker</strong> documentation</a> to learn more.</p>\n"
        ],
        "contentsRaw": "Collection of functions that determine which modifier classes get applied to which days.\nSee the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.",
        "metadata": {}
      },
      "fileName": "../datetime/src/datePickerCore.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDatePickerModifiers",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L17",
      "indexSignature": {
        "documentation": {
          "contents": [
            "<p>Collection of functions that determine which modifier classes get applied to which days.\nSee the <a href=\"http://react-day-picker.js.org/Modifiers.html\"><strong>react-day-picker</strong> documentation</a> to learn more.</p>\n"
          ],
          "contentsRaw": "Collection of functions that determine which modifier classes get applied to which days.\nSee the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.",
          "metadata": {}
        },
        "fileName": "../datetime/src/datePickerCore.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L17",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "name",
            "type": "string"
          }
        ],
        "returnType": "(date: Date) => boolean",
        "type": "{ [name: string]: (date: Date) => boolean }"
      },
      "methods": [],
      "properties": []
    },
    "IKeyBlacklist": {
      "fileName": "../table/src/common/utils.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyBlacklist",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/utils.ts#L20",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/utils.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "exclude",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/utils.ts#L21",
          "type": "Array<keyof T>"
        }
      ]
    },
    "IDateFormatProps": {
      "fileName": "../datetime/src/dateFormat.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDateFormatProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L10",
      "methods": [
        {
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "formatDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L39",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Function to render a JavaScript <code>Date</code> to a string.\nOptional <code>locale</code> argument comes directly from the prop on this component:\nif the prop is defined, then the argument will be too.</p>\n"
                ],
                "contentsRaw": "Function to render a JavaScript `Date` to a string.\nOptional `locale` argument comes directly from the prop on this component:\nif the prop is defined, then the argument will be too.",
                "metadata": {}
              },
              "fileName": "../datetime/src/dateFormat.tsx",
              "kind": "signature",
              "name": "formatDate",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L39",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "date",
                  "type": "Date"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "locale",
                  "type": "string"
                }
              ],
              "returnType": "string",
              "type": "(date: Date, locale?: string) => string"
            }
          ]
        },
        {
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "parseDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L47",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Function to deserialize user input text to a JavaScript <code>Date</code> object.\nReturn <code>false</code> if the string is an invalid date.\nReturn <code>null</code> to represent the absence of a date.\nOptional <code>locale</code> argument comes directly from the prop on this component.</p>\n"
                ],
                "contentsRaw": "Function to deserialize user input text to a JavaScript `Date` object.\nReturn `false` if the string is an invalid date.\nReturn `null` to represent the absence of a date.\nOptional `locale` argument comes directly from the prop on this component.",
                "metadata": {}
              },
              "fileName": "../datetime/src/dateFormat.tsx",
              "kind": "signature",
              "name": "parseDate",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L47",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "str",
                  "type": "string"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "locale",
                  "type": "string"
                }
              ],
              "returnType": "Date | false | null",
              "type": "(str: string, locale?: string) => Date | false | null"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The error message to display when the date selected is invalid.</p>\n"
            ],
            "contentsRaw": "The error message to display when the date selected is invalid.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "invalidDateMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L15",
          "defaultValue": "\"Invalid date\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The locale name, which is passed to <code>formatDate</code>, <code>parseDate</code> and the functions in <code>localeUtils</code>.</p>\n"
            ],
            "contentsRaw": "The locale name, which is passed to `formatDate`, `parseDate` and the functions in `localeUtils`.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locale",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L20",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The error message to display when the date selected is out of range.</p>\n"
            ],
            "contentsRaw": "The error message to display when the date selected is out of range.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "outOfRangeMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L26",
          "defaultValue": "\"Out of range\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Placeholder text to display in empty input fields.\nRecommended practice is to indicate the expected date format.</p>\n"
            ],
            "contentsRaw": "Placeholder text to display in empty input fields.\nRecommended practice is to indicate the expected date format.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L32",
          "type": "string"
        }
      ]
    },
    "IDatePickerCaptionProps": {
      "fileName": "../datetime/src/datePickerCaption.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDatePickerCaptionProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCaption.tsx#L15",
      "extends": [
        "CaptionElementProps"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../datetime/src/datePickerCaption.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCaption.tsx#L16",
          "type": "Date"
        },
        {
          "fileName": "../datetime/src/datePickerCaption.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCaption.tsx#L17",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the month or year <code>&lt;select&gt;</code> is changed.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the month or year `<select>` is changed.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCaption.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDateChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCaption.tsx#L21",
          "type": "(date: Date) => void"
        },
        {
          "fileName": "../datetime/src/datePickerCaption.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onMonthChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCaption.tsx#L18",
          "type": "(month: number) => void"
        },
        {
          "fileName": "../datetime/src/datePickerCaption.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onYearChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCaption.tsx#L19",
          "type": "(year: number) => void"
        },
        {
          "fileName": "../datetime/src/datePickerCaption.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reverseMonthAndYearMenus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCaption.tsx#L22",
          "type": "boolean"
        }
      ]
    },
    "IDatePickerNavbarProps": {
      "fileName": "../datetime/src/datePickerNavbar.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDatePickerNavbarProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerNavbar.tsx#L15",
      "extends": [
        "NavbarElementProps"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../datetime/src/datePickerNavbar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hideLeftNavButton",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerNavbar.tsx#L19",
          "type": "boolean"
        },
        {
          "fileName": "../datetime/src/datePickerNavbar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hideRightNavButton",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerNavbar.tsx#L20",
          "type": "boolean"
        },
        {
          "fileName": "../datetime/src/datePickerNavbar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerNavbar.tsx#L16",
          "type": "Date"
        },
        {
          "fileName": "../datetime/src/datePickerNavbar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerNavbar.tsx#L17",
          "type": "Date"
        }
      ]
    },
    "IDatePickerProps": {
      "fileName": "../datetime/src/datePicker.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDatePickerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L20",
      "extends": [
        "IDatePickerBaseProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The earliest date the user can select.</p>\n"
            ],
            "contentsRaw": "The earliest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L48",
          "defaultValue": "Jan. 1st, 20 years in the past.",
          "inheritedFrom": "IDatePickerBaseProps.minDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Allows the user to clear the selection by clicking the currently selected day.</p>\n"
            ],
            "contentsRaw": "Allows the user to clear the selection by clicking the currently selected day.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canClearSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L25",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to ReactDayPicker. See API documentation\n<a href=\"http://react-day-picker.js.org/docs/api-daypicker.html\">here</a>.</p>\n<p>The following props are managed by the component and cannot be configured:\n<code>canChangeMonth</code>, <code>captionElement</code>, <code>fromMonth</code> (use <code>minDate</code>), <code>month</code> (use\n<code>initialMonth</code>), <code>toMonth</code> (use <code>maxDate</code>).</p>\n"
            ],
            "contentsRaw": "Props to pass to ReactDayPicker. See API documentation\n[here](http://react-day-picker.js.org/docs/api-daypicker.html).\n\nThe following props are managed by the component and cannot be configured:\n`canChangeMonth`, `captionElement`, `fromMonth` (use `minDate`), `month` (use\n`initialMonth`), `toMonth` (use `maxDate`).",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dayPickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L35",
          "type": "DayPickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial day the calendar will display as selected.\nThis should not be set if <code>value</code> is set.</p>\n"
            ],
            "contentsRaw": "Initial day the calendar will display as selected.\nThis should not be set if `value` is set.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L41",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The initial month the calendar displays.</p>\n"
            ],
            "contentsRaw": "The initial month the calendar displays.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialMonth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L25",
          "inheritedFrom": "IDatePickerBaseProps.initialMonth",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The locale name, which is passed to the functions in <code>localeUtils</code>\n(and <code>formatDate</code> and <code>parseDate</code> if supported).</p>\n"
            ],
            "contentsRaw": "The locale name, which is passed to the functions in `localeUtils`\n(and `formatDate` and `parseDate` if supported).",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locale",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L31",
          "inheritedFrom": "IDatePickerBaseProps.locale",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that provide internationalization support.</p>\n"
            ],
            "contentsRaw": "Collection of functions that provide internationalization support.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "localeUtils",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L36",
          "inheritedFrom": "IDatePickerBaseProps.localeUtils",
          "type": "LocaleUtils"
        },
        {
          "documentation": {
            "contents": [
              "<p>The latest date the user can select.</p>\n"
            ],
            "contentsRaw": "The latest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L42",
          "defaultValue": "Dec. 31st of this year.",
          "inheritedFrom": "IDatePickerBaseProps.maxDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text for the reset button in the action bar.</p>\n"
            ],
            "contentsRaw": "Text for the reset button in the action bar.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "clearButtonText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L68",
          "defaultValue": "\"Clear\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a <code>Date</code> and return a boolean.\nSee the <a href=\"http://react-day-picker.js.org/Modifiers.html\"><strong>react-day-picker</strong> documentation</a> to learn more.</p>\n"
            ],
            "contentsRaw": "Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a `Date` and return a boolean.\nSee the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L55",
          "inheritedFrom": "IDatePickerBaseProps.modifiers",
          "type": "IDatePickerModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the user selects a day.\nIf being used in an uncontrolled manner, <code>selectedDate</code> will be <code>null</code> if the user clicks the currently selected\nday. If being used in a controlled manner, <code>selectedDate</code> will contain the day clicked no matter what.\n<code>isUserChange</code> is true if the user selected a day, and false if the date was automatically changed\nby the user navigating to a new month or year rather than explicitly clicking on a date in the calendar.</p>\n"
            ],
            "contentsRaw": "Called when the user selects a day.\nIf being used in an uncontrolled manner, `selectedDate` will be `null` if the user clicks the currently selected\nday. If being used in a controlled manner, `selectedDate` will contain the day clicked no matter what.\n`isUserChange` is true if the user selected a day, and false if the date was automatically changed\nby the user navigating to a new month or year rather than explicitly clicking on a date in the calendar.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L50",
          "type": "(selectedDate: Date, isUserChange: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.</p>\n"
            ],
            "contentsRaw": "If `true`, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reverseMonthAndYearMenus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L62",
          "defaultValue": "false",
          "inheritedFrom": "IDatePickerBaseProps.reverseMonthAndYearMenus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the bottom bar displaying &quot;Today&quot; and &quot;Clear&quot; buttons should be shown.</p>\n"
            ],
            "contentsRaw": "Whether the bottom bar displaying \"Today\" and \"Clear\" buttons should be shown.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showActionsBar",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L56",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Further configure the <code>TimePicker</code> that appears beneath the calendar.\n<code>onChange</code> and <code>value</code> are ignored in favor of the corresponding\ntop-level props on this component.</p>\n<p>Passing any defined value to this prop (even <code>{}</code>) will cause the\n<code>TimePicker</code> to appear.</p>\n"
            ],
            "contentsRaw": "Further configure the `TimePicker` that appears beneath the calendar.\n`onChange` and `value` are ignored in favor of the corresponding\ntop-level props on this component.\n\nPassing any defined value to this prop (even `{}`) will cause the\n`TimePicker` to appear.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L82",
          "inheritedFrom": "IDatePickerBaseProps.timePickerProps",
          "type": "ITimePickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The precision of time selection that accompanies the calendar. Passing a\n<code>TimePrecision</code> value (or providing <code>timePickerProps</code>) shows a\n<code>TimePicker</code> below the calendar. Time is preserved across date changes.</p>\n<p>This is shorthand for <code>timePickerProps.precision</code> and is a quick way to\nenable time selection.</p>\n"
            ],
            "contentsRaw": "The precision of time selection that accompanies the calendar. Passing a\n`TimePrecision` value (or providing `timePickerProps`) shows a\n`TimePicker` below the calendar. Time is preserved across date changes.\n\nThis is shorthand for `timePickerProps.precision` and is a quick way to\nenable time selection.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L72",
          "inheritedFrom": "IDatePickerBaseProps.timePrecision",
          "type": "TimePrecision"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text for the today button in the action bar.</p>\n"
            ],
            "contentsRaw": "Text for the today button in the action bar.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "todayButtonText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L62",
          "defaultValue": "\"Today\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently selected day. If this prop is provided, the component acts in a controlled manner.</p>\n"
            ],
            "contentsRaw": "The currently selected day. If this prop is provided, the component acts in a controlled manner.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePicker.tsx#L73",
          "type": "Date"
        }
      ]
    },
    "IDateInputProps": {
      "fileName": "../datetime/src/dateInput.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDateInputProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L31",
      "extends": [
        "IDatePickerBaseProps",
        "IDateFormatProps",
        "IProps"
      ],
      "methods": [
        {
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "formatDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L39",
          "inheritedFrom": "IDateFormatProps.formatDate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Function to render a JavaScript <code>Date</code> to a string.\nOptional <code>locale</code> argument comes directly from the prop on this component:\nif the prop is defined, then the argument will be too.</p>\n"
                ],
                "contentsRaw": "Function to render a JavaScript `Date` to a string.\nOptional `locale` argument comes directly from the prop on this component:\nif the prop is defined, then the argument will be too.",
                "metadata": {}
              },
              "fileName": "../datetime/src/dateFormat.tsx",
              "kind": "signature",
              "name": "formatDate",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L39",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "date",
                  "type": "Date"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "locale",
                  "type": "string"
                }
              ],
              "returnType": "string",
              "type": "(date: Date, locale?: string) => string"
            }
          ]
        },
        {
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "parseDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L47",
          "inheritedFrom": "IDateFormatProps.parseDate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Function to deserialize user input text to a JavaScript <code>Date</code> object.\nReturn <code>false</code> if the string is an invalid date.\nReturn <code>null</code> to represent the absence of a date.\nOptional <code>locale</code> argument comes directly from the prop on this component.</p>\n"
                ],
                "contentsRaw": "Function to deserialize user input text to a JavaScript `Date` object.\nReturn `false` if the string is an invalid date.\nReturn `null` to represent the absence of a date.\nOptional `locale` argument comes directly from the prop on this component.",
                "metadata": {}
              },
              "fileName": "../datetime/src/dateFormat.tsx",
              "kind": "signature",
              "name": "parseDate",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L47",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "str",
                  "type": "string"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "locale",
                  "type": "string"
                }
              ],
              "returnType": "Date | false | null",
              "type": "(str: string, locale?: string) => Date | false | null"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a <code>Date</code> and return a boolean.\nSee the <a href=\"http://react-day-picker.js.org/Modifiers.html\"><strong>react-day-picker</strong> documentation</a> to learn more.</p>\n"
            ],
            "contentsRaw": "Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a `Date` and return a boolean.\nSee the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L55",
          "inheritedFrom": "IDatePickerBaseProps.modifiers",
          "type": "IDatePickerModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>Allows the user to clear the selection by clicking the currently selected day.\nPassed to <code>DatePicker</code> component.</p>\n"
            ],
            "contentsRaw": "Allows the user to clear the selection by clicking the currently selected day.\nPassed to `DatePicker` component.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canClearSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L37",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the calendar popover should close when a date is selected.</p>\n"
            ],
            "contentsRaw": "Whether the calendar popover should close when a date is selected.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "closeOnSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L50",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to ReactDayPicker. See API documentation\n<a href=\"http://react-day-picker.js.org/docs/api-daypicker.html\">here</a>.</p>\n<p>The following props are managed by the component and cannot be configured:\n<code>canChangeMonth</code>, <code>captionElement</code>, <code>fromMonth</code> (use <code>minDate</code>), <code>month</code> (use\n<code>initialMonth</code>), <code>toMonth</code> (use <code>maxDate</code>).</p>\n"
            ],
            "contentsRaw": "Props to pass to ReactDayPicker. See API documentation\n[here](http://react-day-picker.js.org/docs/api-daypicker.html).\n\nThe following props are managed by the component and cannot be configured:\n`canChangeMonth`, `captionElement`, `fromMonth` (use `minDate`), `month` (use\n`initialMonth`), `toMonth` (use `maxDate`).",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dayPickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L60",
          "type": "DayPickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The default date to be used in the component when uncontrolled.</p>\n"
            ],
            "contentsRaw": "The default date to be used in the component when uncontrolled.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L71",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the date input is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the date input is non-interactive.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L66",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The initial month the calendar displays.</p>\n"
            ],
            "contentsRaw": "The initial month the calendar displays.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialMonth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L25",
          "inheritedFrom": "IDatePickerBaseProps.initialMonth",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to the <a href=\"#core/components/text-inputs.input-group\">input group</a>.\n<code>disabled</code> and <code>value</code> will be ignored in favor of the top-level props on this component.\n<code>type</code> is fixed to &quot;text&quot; and <code>ref</code> is not supported; use <code>inputRef</code> instead.</p>\n"
            ],
            "contentsRaw": "Props to pass to the [input group](#core/components/text-inputs.input-group).\n`disabled` and `value` will be ignored in favor of the top-level props on this component.\n`type` is fixed to \"text\" and `ref` is not supported; use `inputRef` instead.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L78",
          "type": "HTMLInputProps & IInputGroupProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The error message to display when the date selected is invalid.</p>\n"
            ],
            "contentsRaw": "The error message to display when the date selected is invalid.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "invalidDateMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L15",
          "defaultValue": "\"Invalid date\"",
          "inheritedFrom": "IDateFormatProps.invalidDateMessage",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The locale name, which is passed to the functions in <code>localeUtils</code>\n(and <code>formatDate</code> and <code>parseDate</code> if supported).</p>\n"
            ],
            "contentsRaw": "The locale name, which is passed to the functions in `localeUtils`\n(and `formatDate` and `parseDate` if supported).",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locale",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L31",
          "inheritedFrom": "IDatePickerBaseProps.locale",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that provide internationalization support.</p>\n"
            ],
            "contentsRaw": "Collection of functions that provide internationalization support.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "localeUtils",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L36",
          "inheritedFrom": "IDatePickerBaseProps.localeUtils",
          "type": "LocaleUtils"
        },
        {
          "documentation": {
            "contents": [
              "<p>The latest date the user can select.</p>\n"
            ],
            "contentsRaw": "The latest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L42",
          "defaultValue": "Dec. 31st of this year.",
          "inheritedFrom": "IDatePickerBaseProps.maxDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The earliest date the user can select.</p>\n"
            ],
            "contentsRaw": "The earliest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L48",
          "defaultValue": "Jan. 1st, 20 years in the past.",
          "inheritedFrom": "IDatePickerBaseProps.minDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text for the reset button in the date picker action bar.\nPassed to <code>DatePicker</code> component.</p>\n"
            ],
            "contentsRaw": "Text for the reset button in the date picker action bar.\nPassed to `DatePicker` component.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "clearButtonText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L44",
          "defaultValue": "\"Clear\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the user selects a new valid date through the <code>DatePicker</code> or by typing\nin the input. The second argument is true if the user clicked on a date in the\ncalendar, changed the input value, or cleared the selection; it will be false if the date\nwas changed by choosing a new month or year.</p>\n"
            ],
            "contentsRaw": "Called when the user selects a new valid date through the `DatePicker` or by typing\nin the input. The second argument is true if the user clicked on a date in the\ncalendar, changed the input value, or cleared the selection; it will be false if the date\nwas changed by choosing a new month or year.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L86",
          "type": "(selectedDate: Date, isUserChange: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the user finishes typing in a new date and the date causes an error state.\nIf the date is invalid, <code>new Date(undefined)</code> will be returned. If the date is out of range,\nthe out of range date will be returned (<code>onChange</code> is not called in this case).</p>\n"
            ],
            "contentsRaw": "Called when the user finishes typing in a new date and the date causes an error state.\nIf the date is invalid, `new Date(undefined)` will be returned. If the date is out of range,\nthe out of range date will be returned (`onChange` is not called in this case).",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onError",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L93",
          "type": "(errorDate: Date) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The error message to display when the date selected is out of range.</p>\n"
            ],
            "contentsRaw": "The error message to display when the date selected is out of range.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "outOfRangeMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L26",
          "defaultValue": "\"Out of range\"",
          "inheritedFrom": "IDateFormatProps.outOfRangeMessage",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Placeholder text to display in empty input fields.\nRecommended practice is to indicate the expected date format.</p>\n"
            ],
            "contentsRaw": "Placeholder text to display in empty input fields.\nRecommended practice is to indicate the expected date format.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L32",
          "inheritedFrom": "IDateFormatProps.placeholder",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to the <code>Popover</code>.\nNote that <code>content</code>, <code>autoFocus</code>, and <code>enforceFocus</code> cannot be changed.</p>\n"
            ],
            "contentsRaw": "Props to pass to the `Popover`.\nNote that `content`, `autoFocus`, and `enforceFocus` cannot be changed.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L99",
          "type": "Partial<IPopoverProps> & any"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.</p>\n"
            ],
            "contentsRaw": "If `true`, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reverseMonthAndYearMenus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L62",
          "defaultValue": "false",
          "inheritedFrom": "IDatePickerBaseProps.reverseMonthAndYearMenus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Element to render on right side of input.</p>\n"
            ],
            "contentsRaw": "Element to render on right side of input.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rightElement",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L104",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the bottom bar displaying &quot;Today&quot; and &quot;Clear&quot; buttons should be shown below the calendar.</p>\n"
            ],
            "contentsRaw": "Whether the bottom bar displaying \"Today\" and \"Clear\" buttons should be shown below the calendar.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showActionsBar",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L110",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Further configure the <code>TimePicker</code> that appears beneath the calendar.\n<code>onChange</code> and <code>value</code> are ignored in favor of the corresponding\ntop-level props on this component.</p>\n<p>Passing any defined value to this prop (even <code>{}</code>) will cause the\n<code>TimePicker</code> to appear.</p>\n"
            ],
            "contentsRaw": "Further configure the `TimePicker` that appears beneath the calendar.\n`onChange` and `value` are ignored in favor of the corresponding\ntop-level props on this component.\n\nPassing any defined value to this prop (even `{}`) will cause the\n`TimePicker` to appear.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L82",
          "inheritedFrom": "IDatePickerBaseProps.timePickerProps",
          "type": "ITimePickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The precision of time selection that accompanies the calendar. Passing a\n<code>TimePrecision</code> value (or providing <code>timePickerProps</code>) shows a\n<code>TimePicker</code> below the calendar. Time is preserved across date changes.</p>\n<p>This is shorthand for <code>timePickerProps.precision</code> and is a quick way to\nenable time selection.</p>\n"
            ],
            "contentsRaw": "The precision of time selection that accompanies the calendar. Passing a\n`TimePrecision` value (or providing `timePickerProps`) shows a\n`TimePicker` below the calendar. Time is preserved across date changes.\n\nThis is shorthand for `timePickerProps.precision` and is a quick way to\nenable time selection.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L72",
          "inheritedFrom": "IDatePickerBaseProps.timePrecision",
          "type": "TimePrecision"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text for the today button in the date picker action bar.\nPassed to <code>DatePicker</code> component.</p>\n"
            ],
            "contentsRaw": "Text for the today button in the date picker action bar.\nPassed to `DatePicker` component.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "todayButtonText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L124",
          "defaultValue": "\"Today\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently selected day. If this prop is provided, the component acts in a controlled manner.\nTo display no date in the input field, pass <code>null</code> to the value prop. To display an invalid date error\nin the input field, pass <code>new Date(undefined)</code> to the value prop.</p>\n"
            ],
            "contentsRaw": "The currently selected day. If this prop is provided, the component acts in a controlled manner.\nTo display no date in the input field, pass `null` to the value prop. To display an invalid date error\nin the input field, pass `new Date(undefined)` to the value prop.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateInput.tsx#L117",
          "type": "Date | null"
        }
      ]
    },
    "IDateTimePickerProps": {
      "fileName": "../datetime/src/dateTimePicker.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDateTimePickerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateTimePicker.tsx#L17",
      "extends": [
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Allows the user to clear the selection by clicking the currently selected day.</p>\n"
            ],
            "contentsRaw": "Allows the user to clear the selection by clicking the currently selected day.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateTimePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "canClearSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateTimePicker.tsx#L51",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Any props to be passed on to the <code>DatePicker</code> other than the <code>value</code> and <code>onChange</code> props as they come directly\nfrom the <code>DateTimePicker</code> props.</p>\n"
            ],
            "contentsRaw": "Any props to be passed on to the `DatePicker` other than the `value` and `onChange` props as they come directly\nfrom the `DateTimePicker` props.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateTimePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "datePickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateTimePicker.tsx#L29",
          "type": "IDatePickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The initial date and time value that will be set.\nThis will be ignored if <code>value</code> is set.</p>\n"
            ],
            "contentsRaw": "The initial date and time value that will be set.\nThis will be ignored if `value` is set.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateTimePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateTimePicker.tsx#L23",
          "defaultValue": "Date.now()",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user changes the date or time.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user changes the date or time.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateTimePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateTimePicker.tsx#L34",
          "type": "(selectedDate: Date, isUserChange: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Any props to be passed on to the <code>TimePicker</code> other than the <code>value</code> and <code>onChange</code> props as they come directly\nfrom the <code>DateTimePicker</code> props.</p>\n"
            ],
            "contentsRaw": "Any props to be passed on to the `TimePicker` other than the `value` and `onChange` props as they come directly\nfrom the `DateTimePicker` props.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateTimePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateTimePicker.tsx#L40",
          "type": "ITimePickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently set date and time. If this prop is provided, the component acts in a controlled manner.</p>\n"
            ],
            "contentsRaw": "The currently set date and time. If this prop is provided, the component acts in a controlled manner.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateTimePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateTimePicker.tsx#L45",
          "type": "Date"
        }
      ]
    },
    "IDateRangeShortcut": {
      "fileName": "../datetime/src/dateRangePicker.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDateRangeShortcut",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L35",
      "methods": [],
      "properties": [
        {
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dateRange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L37",
          "type": "DateRange"
        },
        {
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L36",
          "type": "string"
        }
      ]
    },
    "IShortcutsProps": {
      "fileName": "../datetime/src/shortcuts.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IShortcutsProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/shortcuts.tsx#L17",
      "methods": [],
      "properties": [
        {
          "fileName": "../datetime/src/shortcuts.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "allowSingleDayRange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/shortcuts.tsx#L18",
          "type": "boolean"
        },
        {
          "fileName": "../datetime/src/shortcuts.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/shortcuts.tsx#L20",
          "type": "Date"
        },
        {
          "fileName": "../datetime/src/shortcuts.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/shortcuts.tsx#L19",
          "type": "Date"
        },
        {
          "fileName": "../datetime/src/shortcuts.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onShortcutClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/shortcuts.tsx#L22",
          "type": "(shortcut: DateRange) => void"
        },
        {
          "fileName": "../datetime/src/shortcuts.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "shortcuts",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/shortcuts.tsx#L21",
          "type": "IDateRangeShortcut[] | true"
        }
      ]
    },
    "IDateRangePickerProps": {
      "fileName": "../datetime/src/dateRangePicker.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDateRangePickerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L40",
      "extends": [
        "IDatePickerBaseProps",
        "IProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The earliest date the user can select.</p>\n"
            ],
            "contentsRaw": "The earliest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L48",
          "defaultValue": "Jan. 1st, 20 years in the past.",
          "inheritedFrom": "IDatePickerBaseProps.minDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the start and end dates of the range can be the same day.\nIf <code>true</code>, clicking a selected date will create a one-day range.\nIf <code>false</code>, clicking a selected date will clear the selection.</p>\n"
            ],
            "contentsRaw": "Whether the start and end dates of the range can be the same day.\nIf `true`, clicking a selected date will create a one-day range.\nIf `false`, clicking a selected date will clear the selection.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "allowSingleDayRange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L47",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether displayed months in the calendar are contiguous.\nIf false, each side of the calendar can move independently to non-contiguous months.</p>\n"
            ],
            "contentsRaw": "Whether displayed months in the calendar are contiguous.\nIf false, each side of the calendar can move independently to non-contiguous months.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "contiguousCalendarMonths",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L62",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to ReactDayPicker. See API documentation\n<a href=\"http://react-day-picker.js.org/docs/api-daypicker.html\">here</a>.</p>\n<p>The following props are managed by the component and cannot be configured:\n<code>canChangeMonth</code>, <code>captionElement</code>, <code>numberOfMonths</code>, <code>fromMonth</code> (use\n<code>minDate</code>), <code>month</code> (use <code>initialMonth</code>), <code>toMonth</code> (use <code>maxDate</code>).</p>\n"
            ],
            "contentsRaw": "Props to pass to ReactDayPicker. See API documentation\n[here](http://react-day-picker.js.org/docs/api-daypicker.html).\n\nThe following props are managed by the component and cannot be configured:\n`canChangeMonth`, `captionElement`, `numberOfMonths`, `fromMonth` (use\n`minDate`), `month` (use `initialMonth`), `toMonth` (use `maxDate`).",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dayPickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L71",
          "type": "DayPickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Initial <code>DateRange</code> the calendar will display as selected.\nThis should not be set if <code>value</code> is set.</p>\n"
            ],
            "contentsRaw": "Initial `DateRange` the calendar will display as selected.\nThis should not be set if `value` is set.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L77",
          "type": "DateRange"
        },
        {
          "documentation": {
            "contents": [
              "<p>The initial month the calendar displays.</p>\n"
            ],
            "contentsRaw": "The initial month the calendar displays.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialMonth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L25",
          "inheritedFrom": "IDatePickerBaseProps.initialMonth",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The locale name, which is passed to the functions in <code>localeUtils</code>\n(and <code>formatDate</code> and <code>parseDate</code> if supported).</p>\n"
            ],
            "contentsRaw": "The locale name, which is passed to the functions in `localeUtils`\n(and `formatDate` and `parseDate` if supported).",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locale",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L31",
          "inheritedFrom": "IDatePickerBaseProps.locale",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that provide internationalization support.</p>\n"
            ],
            "contentsRaw": "Collection of functions that provide internationalization support.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "localeUtils",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L36",
          "inheritedFrom": "IDatePickerBaseProps.localeUtils",
          "type": "LocaleUtils"
        },
        {
          "documentation": {
            "contents": [
              "<p>The latest date the user can select.</p>\n"
            ],
            "contentsRaw": "The latest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L42",
          "defaultValue": "Dec. 31st of this year.",
          "inheritedFrom": "IDatePickerBaseProps.maxDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The date-range boundary that the next click should modify.\nThis will be honored unless the next click would overlap the other boundary date.\nIn that case, the two boundary dates will be auto-swapped to keep them in chronological order.\nIf <code>undefined</code>, the picker will revert to its default selection behavior.</p>\n"
            ],
            "contentsRaw": "The date-range boundary that the next click should modify.\nThis will be honored unless the next click would overlap the other boundary date.\nIn that case, the two boundary dates will be auto-swapped to keep them in chronological order.\nIf `undefined`, the picker will revert to its default selection behavior.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "boundaryToModify",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L55",
          "type": "Boundary"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a <code>Date</code> and return a boolean.\nSee the <a href=\"http://react-day-picker.js.org/Modifiers.html\"><strong>react-day-picker</strong> documentation</a> to learn more.</p>\n"
            ],
            "contentsRaw": "Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a `Date` and return a boolean.\nSee the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L55",
          "inheritedFrom": "IDatePickerBaseProps.modifiers",
          "type": "IDatePickerModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the user selects a day.\nIf no days are selected, it will pass <code>[null, null]</code>.\nIf a start date is selected but not an end date, it will pass <code>[selectedDate, null]</code>.\nIf both a start and end date are selected, it will pass <code>[startDate, endDate]</code>.</p>\n"
            ],
            "contentsRaw": "Called when the user selects a day.\nIf no days are selected, it will pass `[null, null]`.\nIf a start date is selected but not an end date, it will pass `[selectedDate, null]`.\nIf both a start and end date are selected, it will pass `[startDate, endDate]`.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L85",
          "type": "(selectedDates: DateRange) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the user changes the hovered date range, either from mouseenter or mouseleave.\nWhen triggered from mouseenter, it will pass the date range that would result from next click.\nWhen triggered from mouseleave, it will pass <code>undefined</code>.</p>\n"
            ],
            "contentsRaw": "Called when the user changes the hovered date range, either from mouseenter or mouseleave.\nWhen triggered from mouseenter, it will pass the date range that would result from next click.\nWhen triggered from mouseleave, it will pass `undefined`.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onHoverChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L92",
          "type": "(hoveredDates: DateRange, hoveredDay: Date, hoveredBoundary: Boundary) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.</p>\n"
            ],
            "contentsRaw": "If `true`, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reverseMonthAndYearMenus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L62",
          "defaultValue": "false",
          "inheritedFrom": "IDatePickerBaseProps.reverseMonthAndYearMenus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether shortcuts to quickly select a range of dates are displayed or not.\nIf <code>true</code>, preset shortcuts will be displayed.\nIf <code>false</code>, no shortcuts will be displayed.\nIf an array is provided, the custom shortcuts will be displayed.</p>\n"
            ],
            "contentsRaw": "Whether shortcuts to quickly select a range of dates are displayed or not.\nIf `true`, preset shortcuts will be displayed.\nIf `false`, no shortcuts will be displayed.\nIf an array is provided, the custom shortcuts will be displayed.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "shortcuts",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L101",
          "defaultValue": "true",
          "type": "boolean | IDateRangeShortcut[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show only a single month calendar.</p>\n"
            ],
            "contentsRaw": "Whether to show only a single month calendar.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "singleMonthOnly",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L107",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Further configure the <code>TimePicker</code> that appears beneath the calendar.\n<code>onChange</code> and <code>value</code> are ignored in favor of the corresponding\ntop-level props on this component.</p>\n<p>Passing any defined value to this prop (even <code>{}</code>) will cause the\n<code>TimePicker</code> to appear.</p>\n"
            ],
            "contentsRaw": "Further configure the `TimePicker` that appears beneath the calendar.\n`onChange` and `value` are ignored in favor of the corresponding\ntop-level props on this component.\n\nPassing any defined value to this prop (even `{}`) will cause the\n`TimePicker` to appear.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L82",
          "inheritedFrom": "IDatePickerBaseProps.timePickerProps",
          "type": "ITimePickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The precision of time selection that accompanies the calendar. Passing a\n<code>TimePrecision</code> value (or providing <code>timePickerProps</code>) shows a\n<code>TimePicker</code> below the calendar. Time is preserved across date changes.</p>\n<p>This is shorthand for <code>timePickerProps.precision</code> and is a quick way to\nenable time selection.</p>\n"
            ],
            "contentsRaw": "The precision of time selection that accompanies the calendar. Passing a\n`TimePrecision` value (or providing `timePickerProps`) shows a\n`TimePicker` below the calendar. Time is preserved across date changes.\n\nThis is shorthand for `timePickerProps.precision` and is a quick way to\nenable time selection.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L72",
          "inheritedFrom": "IDatePickerBaseProps.timePrecision",
          "type": "TimePrecision"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently selected <code>DateRange</code>.\nIf this prop is provided, the component acts in a controlled manner.</p>\n"
            ],
            "contentsRaw": "The currently selected `DateRange`.\nIf this prop is provided, the component acts in a controlled manner.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangePicker.tsx#L113",
          "type": "DateRange"
        }
      ]
    },
    "IDateRangeInputProps": {
      "fileName": "../datetime/src/dateRangeInput.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDateRangeInputProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L35",
      "extends": [
        "IDatePickerBaseProps",
        "IDateFormatProps",
        "IProps"
      ],
      "methods": [
        {
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "formatDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L39",
          "inheritedFrom": "IDateFormatProps.formatDate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Function to render a JavaScript <code>Date</code> to a string.\nOptional <code>locale</code> argument comes directly from the prop on this component:\nif the prop is defined, then the argument will be too.</p>\n"
                ],
                "contentsRaw": "Function to render a JavaScript `Date` to a string.\nOptional `locale` argument comes directly from the prop on this component:\nif the prop is defined, then the argument will be too.",
                "metadata": {}
              },
              "fileName": "../datetime/src/dateFormat.tsx",
              "kind": "signature",
              "name": "formatDate",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L39",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "date",
                  "type": "Date"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "locale",
                  "type": "string"
                }
              ],
              "returnType": "string",
              "type": "(date: Date, locale?: string) => string"
            }
          ]
        },
        {
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "parseDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L47",
          "inheritedFrom": "IDateFormatProps.parseDate",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Function to deserialize user input text to a JavaScript <code>Date</code> object.\nReturn <code>false</code> if the string is an invalid date.\nReturn <code>null</code> to represent the absence of a date.\nOptional <code>locale</code> argument comes directly from the prop on this component.</p>\n"
                ],
                "contentsRaw": "Function to deserialize user input text to a JavaScript `Date` object.\nReturn `false` if the string is an invalid date.\nReturn `null` to represent the absence of a date.\nOptional `locale` argument comes directly from the prop on this component.",
                "metadata": {}
              },
              "fileName": "../datetime/src/dateFormat.tsx",
              "kind": "signature",
              "name": "parseDate",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L47",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "str",
                  "type": "string"
                },
                {
                  "flags": {
                    "isOptional": true,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "locale",
                  "type": "string"
                }
              ],
              "returnType": "Date | false | null",
              "type": "(str: string, locale?: string) => Date | false | null"
            }
          ]
        }
      ],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Called when the user selects a day.\nIf no days are selected, it will pass <code>[null, null]</code>.\nIf a start date is selected but not an end date, it will pass <code>[selectedDate, null]</code>.\nIf both a start and end date are selected, it will pass <code>[startDate, endDate]</code>.</p>\n"
            ],
            "contentsRaw": "Called when the user selects a day.\nIf no days are selected, it will pass `[null, null]`.\nIf a start date is selected but not an end date, it will pass `[selectedDate, null]`.\nIf both a start and end date are selected, it will pass `[startDate, endDate]`.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L92",
          "type": "(selectedRange: DateRange) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the start and end dates of the range can be the same day.\nIf <code>true</code>, clicking a selected date will create a one-day range.\nIf <code>false</code>, clicking a selected date will clear the selection.</p>\n"
            ],
            "contentsRaw": "Whether the start and end dates of the range can be the same day.\nIf `true`, clicking a selected date will create a one-day range.\nIf `false`, clicking a selected date will clear the selection.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "allowSingleDayRange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L42",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether displayed months in the calendar are contiguous.\nIf false, each side of the calendar can move independently to non-contiguous months.</p>\n"
            ],
            "contentsRaw": "Whether displayed months in the calendar are contiguous.\nIf false, each side of the calendar can move independently to non-contiguous months.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "contiguousCalendarMonths",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L55",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to ReactDayPicker. See API documentation\n<a href=\"http://react-day-picker.js.org/docs/api-daypicker.html\">here</a>.</p>\n<p>The following props are managed by the component and cannot be configured:\n<code>canChangeMonth</code>, <code>captionElement</code>, <code>numberOfMonths</code>, <code>fromMonth</code> (use\n<code>minDate</code>), <code>month</code> (use <code>initialMonth</code>), <code>toMonth</code> (use <code>maxDate</code>).</p>\n"
            ],
            "contentsRaw": "Props to pass to ReactDayPicker. See API documentation\n[here](http://react-day-picker.js.org/docs/api-daypicker.html).\n\nThe following props are managed by the component and cannot be configured:\n`canChangeMonth`, `captionElement`, `numberOfMonths`, `fromMonth` (use\n`minDate`), `month` (use `initialMonth`), `toMonth` (use `maxDate`).",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "dayPickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L65",
          "type": "DayPickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The default date range to be used in the component when uncontrolled.\nThis will be ignored if <code>value</code> is set.</p>\n"
            ],
            "contentsRaw": "The default date range to be used in the component when uncontrolled.\nThis will be ignored if `value` is set.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultValue",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L71",
          "type": "DateRange"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the text inputs are non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether the text inputs are non-interactive.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L77",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to the end-date <a href=\"#core/components/text-inputs.input-group\">input group</a>.\n<code>disabled</code> and <code>value</code> will be ignored in favor of the top-level props on this component.\n<code>ref</code> is not supported; use <code>inputRef</code> instead.</p>\n"
            ],
            "contentsRaw": "Props to pass to the end-date [input group](#core/components/text-inputs.input-group).\n`disabled` and `value` will be ignored in favor of the top-level props on this component.\n`ref` is not supported; use `inputRef` instead.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "endInputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L84",
          "type": "HTMLInputProps & IInputGroupProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The initial month the calendar displays.</p>\n"
            ],
            "contentsRaw": "The initial month the calendar displays.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialMonth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L25",
          "inheritedFrom": "IDatePickerBaseProps.initialMonth",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The error message to display when the date selected is invalid.</p>\n"
            ],
            "contentsRaw": "The error message to display when the date selected is invalid.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "invalidDateMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L15",
          "defaultValue": "\"Invalid date\"",
          "inheritedFrom": "IDateFormatProps.invalidDateMessage",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The locale name, which is passed to the functions in <code>localeUtils</code>\n(and <code>formatDate</code> and <code>parseDate</code> if supported).</p>\n"
            ],
            "contentsRaw": "The locale name, which is passed to the functions in `localeUtils`\n(and `formatDate` and `parseDate` if supported).",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locale",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L31",
          "inheritedFrom": "IDatePickerBaseProps.locale",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that provide internationalization support.</p>\n"
            ],
            "contentsRaw": "Collection of functions that provide internationalization support.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "localeUtils",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L36",
          "inheritedFrom": "IDatePickerBaseProps.localeUtils",
          "type": "LocaleUtils"
        },
        {
          "documentation": {
            "contents": [
              "<p>The latest date the user can select.</p>\n"
            ],
            "contentsRaw": "The latest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L42",
          "defaultValue": "Dec. 31st of this year.",
          "inheritedFrom": "IDatePickerBaseProps.maxDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>The earliest date the user can select.</p>\n"
            ],
            "contentsRaw": "The earliest date the user can select.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minDate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L48",
          "defaultValue": "Jan. 1st, 20 years in the past.",
          "inheritedFrom": "IDatePickerBaseProps.minDate",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a <code>Date</code> and return a boolean.\nSee the <a href=\"http://react-day-picker.js.org/Modifiers.html\"><strong>react-day-picker</strong> documentation</a> to learn more.</p>\n"
            ],
            "contentsRaw": "Collection of functions that determine which modifier classes get applied to which days.\nEach function should accept a `Date` and return a boolean.\nSee the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L55",
          "inheritedFrom": "IDatePickerBaseProps.modifiers",
          "type": "IDatePickerModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the calendar popover should close when a date range is fully selected.</p>\n"
            ],
            "contentsRaw": "Whether the calendar popover should close when a date range is fully selected.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "closeOnSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L48",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the user finishes typing in a new date and the date causes an error state.\nIf the date is invalid, <code>new Date(undefined)</code> will be returned for the corresponding\nboundary of the date range.\nIf the date is out of range, the out-of-range date will be returned for the corresponding\nboundary of the date range (<code>onChange</code> is not called in this case).</p>\n"
            ],
            "contentsRaw": "Called when the user finishes typing in a new date and the date causes an error state.\nIf the date is invalid, `new Date(undefined)` will be returned for the corresponding\nboundary of the date range.\nIf the date is out of range, the out-of-range date will be returned for the corresponding\nboundary of the date range (`onChange` is not called in this case).",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onError",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L101",
          "type": "(errorRange: DateRange) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The error message to display when the date selected is out of range.</p>\n"
            ],
            "contentsRaw": "The error message to display when the date selected is out of range.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "outOfRangeMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L26",
          "defaultValue": "\"Out of range\"",
          "inheritedFrom": "IDateFormatProps.outOfRangeMessage",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The error message to display when the selected dates overlap.\nThis can only happen when typing dates in the input field.</p>\n"
            ],
            "contentsRaw": "The error message to display when the selected dates overlap.\nThis can only happen when typing dates in the input field.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "overlappingDatesMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L108",
          "defaultValue": "\"Overlapping dates\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Placeholder text to display in empty input fields.\nRecommended practice is to indicate the expected date format.</p>\n"
            ],
            "contentsRaw": "Placeholder text to display in empty input fields.\nRecommended practice is to indicate the expected date format.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateFormat.tsx#L32",
          "inheritedFrom": "IDateFormatProps.placeholder",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The props to pass to the popover.\n<code>autoFocus</code>, <code>content</code>, and <code>enforceFocus</code> will be ignored to avoid compromising usability.</p>\n"
            ],
            "contentsRaw": "The props to pass to the popover.\n`autoFocus`, `content`, and `enforceFocus` will be ignored to avoid compromising usability.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L114",
          "type": "Partial<IPopoverProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.</p>\n"
            ],
            "contentsRaw": "If `true`, the month menu will appear to the left of the year menu.\nOtherwise, the month menu will apear to the right of the year menu.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reverseMonthAndYearMenus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L62",
          "defaultValue": "false",
          "inheritedFrom": "IDatePickerBaseProps.reverseMonthAndYearMenus",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the entire text field should be selected on focus.</p>\n"
            ],
            "contentsRaw": "Whether the entire text field should be selected on focus.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectAllOnFocus",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L120",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether shortcuts to quickly select a range of dates are displayed or not.\nIf <code>true</code>, preset shortcuts will be displayed.\nIf <code>false</code>, no shortcuts will be displayed.\nIf an array is provided, the custom shortcuts will be displayed.</p>\n"
            ],
            "contentsRaw": "Whether shortcuts to quickly select a range of dates are displayed or not.\nIf `true`, preset shortcuts will be displayed.\nIf `false`, no shortcuts will be displayed.\nIf an array is provided, the custom shortcuts will be displayed.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "shortcuts",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L129",
          "defaultValue": "true",
          "type": "boolean | IDateRangeShortcut[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show only a single month calendar.</p>\n"
            ],
            "contentsRaw": "Whether to show only a single month calendar.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "singleMonthOnly",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L135",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to pass to the start-date <a href=\"#core/components/text-inputs.input-group\">input group</a>.\n<code>disabled</code> and <code>value</code> will be ignored in favor of the top-level props on this component.\n<code>ref</code> is not supported; use <code>inputRef</code> instead.</p>\n"
            ],
            "contentsRaw": "Props to pass to the start-date [input group](#core/components/text-inputs.input-group).\n`disabled` and `value` will be ignored in favor of the top-level props on this component.\n`ref` is not supported; use `inputRef` instead.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "startInputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L142",
          "type": "HTMLInputProps & IInputGroupProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Further configure the <code>TimePicker</code> that appears beneath the calendar.\n<code>onChange</code> and <code>value</code> are ignored in favor of the corresponding\ntop-level props on this component.</p>\n<p>Passing any defined value to this prop (even <code>{}</code>) will cause the\n<code>TimePicker</code> to appear.</p>\n"
            ],
            "contentsRaw": "Further configure the `TimePicker` that appears beneath the calendar.\n`onChange` and `value` are ignored in favor of the corresponding\ntop-level props on this component.\n\nPassing any defined value to this prop (even `{}`) will cause the\n`TimePicker` to appear.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePickerProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L82",
          "inheritedFrom": "IDatePickerBaseProps.timePickerProps",
          "type": "ITimePickerProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>The precision of time selection that accompanies the calendar. Passing a\n<code>TimePrecision</code> value (or providing <code>timePickerProps</code>) shows a\n<code>TimePicker</code> below the calendar. Time is preserved across date changes.</p>\n<p>This is shorthand for <code>timePickerProps.precision</code> and is a quick way to\nenable time selection.</p>\n"
            ],
            "contentsRaw": "The precision of time selection that accompanies the calendar. Passing a\n`TimePrecision` value (or providing `timePickerProps`) shows a\n`TimePicker` below the calendar. Time is preserved across date changes.\n\nThis is shorthand for `timePickerProps.precision` and is a quick way to\nenable time selection.",
            "metadata": {}
          },
          "fileName": "../datetime/src/datePickerCore.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timePrecision",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/datePickerCore.tsx#L72",
          "inheritedFrom": "IDatePickerBaseProps.timePrecision",
          "type": "TimePrecision"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently selected date range.\nIf the prop is strictly <code>undefined</code>, the component acts in an uncontrolled manner.\nIf this prop is anything else, the component acts in a controlled manner.\nTo display an empty value in the input fields in a controlled manner, pass <code>[null, null]</code>.\nTo display an invalid date error in either input field, pass <code>new Date(undefined)</code>\nfor the appropriate date in the value prop.</p>\n"
            ],
            "contentsRaw": "The currently selected date range.\nIf the prop is strictly `undefined`, the component acts in an uncontrolled manner.\nIf this prop is anything else, the component acts in a controlled manner.\nTo display an empty value in the input fields in a controlled manner, pass `[null, null]`.\nTo display an invalid date error in either input field, pass `new Date(undefined)`\nfor the appropriate date in the value prop.",
            "metadata": {}
          },
          "fileName": "../datetime/src/dateRangeInput.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/dateRangeInput.tsx#L152",
          "type": "DateRange"
        }
      ]
    },
    "IBannerProps": {
      "fileName": "../docs-theme/src/components/banner.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IBannerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/banner.tsx#L11",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Link URL.</p>\n"
            ],
            "contentsRaw": "Link URL.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/banner.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "href",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/banner.tsx#L13",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Intent color of banner.</p>\n"
            ],
            "contentsRaw": "Intent color of banner.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/banner.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "intent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/banner.tsx#L19",
          "defaultValue": "Intent.PRIMARY",
          "type": "Intent"
        }
      ]
    },
    "IBaseExampleProps": {
      "fileName": "../docs-theme/src/components/baseExample.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IBaseExampleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/baseExample.tsx#L13",
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/baseExample.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/baseExample.tsx#L14",
          "type": "string"
        },
        {
          "fileName": "../docs-theme/src/components/baseExample.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "themeName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/baseExample.tsx#L15",
          "type": "string"
        }
      ]
    },
    "IDocumentationContext": {
      "documentation": {
        "contents": [
          "<p>Use React context to transparently provide helpful functions to children.\nThis is basically the pauper&#39;s Redux store connector: some central state from the root\n<code>Documentation</code> component is exposed to its children so those in the know can speak\ndirectly to their parent.</p>\n"
        ],
        "contentsRaw": "Use React context to transparently provide helpful functions to children.\nThis is basically the pauper's Redux store connector: some central state from the root\n`Documentation` component is exposed to its children so those in the know can speak\ndirectly to their parent.",
        "metadata": {}
      },
      "fileName": "../docs-theme/src/common/context.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDocumentationContext",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L41",
      "methods": [
        {
          "fileName": "../docs-theme/src/common/context.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "getDocsData",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L46",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Get the Documentalist data.\nUse the <code>hasTypescriptData</code> and <code>hasKssData</code> typeguards before accessing those plugins&#39; data.</p>\n"
                ],
                "contentsRaw": "Get the Documentalist data.\nUse the `hasTypescriptData` and `hasKssData` typeguards before accessing those plugins' data.",
                "metadata": {}
              },
              "fileName": "../docs-theme/src/common/context.ts",
              "kind": "signature",
              "name": "getDocsData",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L46",
              "parameters": [],
              "returnType": "IDocsData",
              "type": "() => IDocsData"
            }
          ]
        },
        {
          "fileName": "../docs-theme/src/common/context.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "renderBlock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L49",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Render a block of Documentalist documentation to a React node.</p>\n"
                ],
                "contentsRaw": "Render a block of Documentalist documentation to a React node.",
                "metadata": {}
              },
              "fileName": "../docs-theme/src/common/context.ts",
              "kind": "signature",
              "name": "renderBlock",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L49",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "block",
                  "type": "IBlock"
                }
              ],
              "returnType": "React.ReactNode",
              "type": "(block: IBlock) => React.ReactNode"
            }
          ]
        },
        {
          "fileName": "../docs-theme/src/common/context.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "renderType",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L52",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Render a Documentalist Typescript type string to a React node.</p>\n"
                ],
                "contentsRaw": "Render a Documentalist Typescript type string to a React node.",
                "metadata": {}
              },
              "fileName": "../docs-theme/src/common/context.ts",
              "kind": "signature",
              "name": "renderType",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L52",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "type",
                  "type": "string"
                }
              ],
              "returnType": "React.ReactNode",
              "type": "(type: string) => React.ReactNode"
            }
          ]
        },
        {
          "fileName": "../docs-theme/src/common/context.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "renderViewSourceLinkText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L55",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Render the text of a &quot;View source&quot; link.</p>\n"
                ],
                "contentsRaw": "Render the text of a \"View source\" link.",
                "metadata": {}
              },
              "fileName": "../docs-theme/src/common/context.ts",
              "kind": "signature",
              "name": "renderViewSourceLinkText",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L55",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "entry",
                  "type": "ITsDocBase"
                }
              ],
              "returnType": "React.ReactNode",
              "type": "(entry: ITsDocBase) => React.ReactNode"
            }
          ]
        },
        {
          "fileName": "../docs-theme/src/common/context.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "method",
          "name": "showApiDocs",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L58",
          "signatures": [
            {
              "documentation": {
                "contents": [
                  "<p>Open the API browser to the given member name.</p>\n"
                ],
                "contentsRaw": "Open the API browser to the given member name.",
                "metadata": {}
              },
              "fileName": "../docs-theme/src/common/context.ts",
              "kind": "signature",
              "name": "showApiDocs",
              "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L58",
              "parameters": [
                {
                  "flags": {
                    "isOptional": false,
                    "isRest": false
                  },
                  "kind": "parameter",
                  "name": "name",
                  "type": "string"
                }
              ],
              "returnType": "void",
              "type": "(name: string) => void"
            }
          ]
        }
      ],
      "properties": []
    },
    "IKeyEventMap": {
      "fileName": "../docs-theme/src/common/utils.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IKeyEventMap",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/utils.ts#L35",
      "indexSignature": {
        "documentation": {
          "contents": [
            "<p>map keycodes to specific event handlers</p>\n"
          ],
          "contentsRaw": "map keycodes to specific event handlers",
          "metadata": {}
        },
        "fileName": "../docs-theme/src/common/utils.ts",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/utils.ts#L37",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "keyCode",
            "type": "number"
          }
        ],
        "returnType": "React.KeyboardEventHandler<HTMLElement>",
        "type": "{ [keyCode: number]: React.KeyboardEventHandler<HTMLElement> }"
      },
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>event handler invoked on all events</p>\n"
            ],
            "contentsRaw": "event handler invoked on all events",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/common/utils.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "all",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/utils.ts#L37",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        }
      ]
    },
    "IExampleProps": {
      "fileName": "../docs-theme/src/components/example.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IExampleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L11",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Container for arbitary data passed to each example from the parent\napplication. This prop is ignored by the <code>&lt;Example&gt;</code> component; it is\navailable for your example implementations to access by providing a <code>&lt;T&gt;</code>\ntype to this interface. Pass actual <code>data</code> when defining your example map\nfor the <code>ReactExampleTagRenderer</code>.</p>\n<p>A container like this is necessary because unknown props on the\n<code>&lt;Example&gt;</code> component are passed to its underlying DOM element, so adding\nyour own props will result in React &quot;unknown prop&quot; warnings.</p>\n"
            ],
            "contentsRaw": "Container for arbitary data passed to each example from the parent\napplication. This prop is ignored by the `<Example>` component; it is\navailable for your example implementations to access by providing a `<T>`\ntype to this interface. Pass actual `data` when defining your example map\nfor the `ReactExampleTagRenderer`.\n\nA container like this is necessary because unknown props on the\n`<Example>` component are passed to its underlying DOM element, so adding\nyour own props will result in React \"unknown prop\" warnings.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "data",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L29",
          "type": "T"
        },
        {
          "documentation": {
            "contents": [
              "<p>Identifier of this example.\nThis will appear as the <code>data-example-id</code> attribute on the DOM element.</p>\n"
            ],
            "contentsRaw": "Identifier of this example.\nThis will appear as the `data-example-id` attribute on the DOM element.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L16",
          "type": "string"
        }
      ]
    },
    "IDocsExampleProps": {
      "documentation": {
        "contents": [
          "<p>Props supported by the <code>Example</code> component.\nAdditional props will be spread to the root <code>&lt;div&gt;</code> element.</p>\n"
        ],
        "contentsRaw": "Props supported by the `Example` component.\nAdditional props will be spread to the root `<div>` element.",
        "metadata": {}
      },
      "fileName": "../docs-theme/src/components/example.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDocsExampleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L36",
      "extends": [
        "IExampleProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Container for arbitary data passed to each example from the parent\napplication. This prop is ignored by the <code>&lt;Example&gt;</code> component; it is\navailable for your example implementations to access by providing a <code>&lt;T&gt;</code>\ntype to this interface. Pass actual <code>data</code> when defining your example map\nfor the <code>ReactExampleTagRenderer</code>.</p>\n<p>A container like this is necessary because unknown props on the\n<code>&lt;Example&gt;</code> component are passed to its underlying DOM element, so adding\nyour own props will result in React &quot;unknown prop&quot; warnings.</p>\n"
            ],
            "contentsRaw": "Container for arbitary data passed to each example from the parent\napplication. This prop is ignored by the `<Example>` component; it is\navailable for your example implementations to access by providing a `<T>`\ntype to this interface. Pass actual `data` when defining your example map\nfor the `ReactExampleTagRenderer`.\n\nA container like this is necessary because unknown props on the\n`<Example>` component are passed to its underlying DOM element, so adding\nyour own props will result in React \"unknown prop\" warnings.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "data",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L29",
          "inheritedFrom": "IExampleProps.data",
          "type": "T"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether <code>forceUpdate()</code> should be invoked after the first render to\nensure correct DOM sizing.</p>\n"
            ],
            "contentsRaw": "Whether `forceUpdate()` should be invoked after the first render to\nensure correct DOM sizing.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "forceUpdate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L65",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML markup for the example, which will be directly injected into the\nexample container using <code>dangerouslySetInnerHTML</code>.</p>\n<p>This prop is mutually exclusive with and takes priority over <code>children</code>.</p>\n"
            ],
            "contentsRaw": "HTML markup for the example, which will be directly injected into the\nexample container using `dangerouslySetInnerHTML`.\n\nThis prop is mutually exclusive with and takes priority over `children`.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "html",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L58",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Identifier of this example.\nThis will appear as the <code>data-example-id</code> attribute on the DOM element.</p>\n"
            ],
            "contentsRaw": "Identifier of this example.\nThis will appear as the `data-example-id` attribute on the DOM element.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L16",
          "inheritedFrom": "IExampleProps.id",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Options for the example, which will typically appear in a narrow column\nto the right of the example.</p>\n"
            ],
            "contentsRaw": "Options for the example, which will typically appear in a narrow column\nto the right of the example.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "options",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L41",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether options should appear in a full-width row below the example\ncontainer. By default, options appear in a single column to the right of\nthe example. If this prop is enabled, then the options container becomes\na flex row; group options into columns by wrapping them in a <code>&lt;div&gt;</code>.</p>\n"
            ],
            "contentsRaw": "Whether options should appear in a full-width row below the example\ncontainer. By default, options appear in a single column to the right of\nthe example. If this prop is enabled, then the options container becomes\na flex row; group options into columns by wrapping them in a `<div>`.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/example.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showOptionsBelowExample",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/example.tsx#L50",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "IDocsMap": {
      "fileName": "../docs-theme/src/tags/reactDocs.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDocsMap",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/reactDocs.tsx#L10",
      "indexSignature": {
        "fileName": "../docs-theme/src/tags/reactDocs.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/reactDocs.tsx#L10",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "name",
            "type": "string"
          }
        ],
        "returnType": "ComponentClass<{}>",
        "type": "{ [name: string]: ComponentClass<{}> }"
      },
      "methods": [],
      "properties": []
    },
    "IExample": {
      "fileName": "../docs-theme/src/tags/reactExample.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IExample",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/reactExample.tsx#L12",
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/tags/reactExample.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "render",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/reactExample.tsx#L14",
          "type": "(props: IExampleProps) => Element | undefined"
        },
        {
          "fileName": "../docs-theme/src/tags/reactExample.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "sourceUrl",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/reactExample.tsx#L13",
          "type": "string"
        }
      ]
    },
    "IExampleMap": {
      "fileName": "../docs-theme/src/tags/reactExample.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IExampleMap",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/reactExample.tsx#L19",
      "indexSignature": {
        "fileName": "../docs-theme/src/tags/reactExample.tsx",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/reactExample.tsx#L19",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "componentName",
            "type": "string"
          }
        ],
        "returnType": "IExample",
        "type": "{ [componentName: string]: IExample }"
      },
      "methods": [],
      "properties": []
    },
    "IModifierTableProps": {
      "fileName": "../docs-theme/src/components/modifierTable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IModifierTableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/modifierTable.tsx#L11",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Message to display when children is empty.</p>\n"
            ],
            "contentsRaw": "Message to display when children is empty.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/modifierTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "emptyMessage",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/modifierTable.tsx#L13",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Title of the first column, describing the type of each row in the table.</p>\n"
            ],
            "contentsRaw": "Title of the first column, describing the type of each row in the table.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/modifierTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/modifierTable.tsx#L16",
          "type": "string"
        }
      ]
    },
    "IEnumTableProps": {
      "fileName": "../docs-theme/src/components/typescript/enumTable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IEnumTableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/enumTable.tsx#L18",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/typescript/enumTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "data",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/enumTable.tsx#L19",
          "type": "ITsEnum"
        }
      ]
    },
    "IInterfaceTableProps": {
      "fileName": "../docs-theme/src/components/typescript/interfaceTable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IInterfaceTableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/interfaceTable.tsx#L26",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/typescript/interfaceTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "data",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/interfaceTable.tsx#L27",
          "type": "ITsClass | ITsInterface"
        },
        {
          "fileName": "../docs-theme/src/components/typescript/interfaceTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/interfaceTable.tsx#L28",
          "type": "string"
        }
      ]
    },
    "ITypeAliasTableProps": {
      "fileName": "../docs-theme/src/components/typescript/typeAliasTable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITypeAliasTableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/typeAliasTable.tsx#L14",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/typescript/typeAliasTable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "data",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/typeAliasTable.tsx#L15",
          "type": "ITsTypeAlias"
        }
      ]
    },
    "ITagRendererMap": {
      "fileName": "../docs-theme/src/tags/index.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITagRendererMap",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/index.ts#L9",
      "indexSignature": {
        "fileName": "../docs-theme/src/tags/index.ts",
        "kind": "signature",
        "name": "__index",
        "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/tags/index.ts#L9",
        "parameters": [
          {
            "flags": {
              "isOptional": false,
              "isRest": false
            },
            "kind": "parameter",
            "name": "tagName",
            "type": "string"
          }
        ],
        "returnType": "React.ComponentType<ITag> | undefined",
        "type": "{ [tagName: string]: React.ComponentType<ITag> | undefined }"
      },
      "methods": [],
      "properties": []
    },
    "INavButtonProps": {
      "fileName": "../docs-theme/src/components/navButton.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavButtonProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navButton.tsx#L11",
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/navButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "hotkey",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navButton.tsx#L13",
          "type": "string"
        },
        {
          "fileName": "../docs-theme/src/components/navButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "icon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navButton.tsx#L12",
          "type": "IconName"
        },
        {
          "fileName": "../docs-theme/src/components/navButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navButton.tsx#L15",
          "type": "() => void"
        },
        {
          "fileName": "../docs-theme/src/components/navButton.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "text",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navButton.tsx#L14",
          "type": "string"
        }
      ]
    },
    "INavigatorProps": {
      "fileName": "../docs-theme/src/components/navigator.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavigatorProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L16",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether navigator is open.</p>\n"
            ],
            "contentsRaw": "Whether navigator is open.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navigator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L18",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback to determine if a given item should be excluded.</p>\n"
            ],
            "contentsRaw": "Callback to determine if a given item should be excluded.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navigator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemExclude",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L24",
          "type": "(node: IPageNode | IHeadingNode) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>All potentially navigable items.</p>\n"
            ],
            "contentsRaw": "All potentially navigable items.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navigator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L21",
          "type": "Array<IPageNode | IHeadingNode>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the navigator is closed. Navigation is performed by\nupdating browser <code>location</code> directly.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the navigator is closed. Navigation is performed by\nupdating browser `location` directly.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navigator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L30",
          "type": "() => void"
        }
      ]
    },
    "INavigationSection": {
      "fileName": "../docs-theme/src/components/navigator.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavigationSection",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L33",
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/navigator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "path",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L34",
          "type": "string[]"
        },
        {
          "fileName": "../docs-theme/src/components/navigator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "route",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L35",
          "type": "string"
        },
        {
          "fileName": "../docs-theme/src/components/navigator.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "title",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navigator.tsx#L36",
          "type": "string"
        }
      ]
    },
    "INavMenuItemProps": {
      "fileName": "../docs-theme/src/components/navMenuItem.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavMenuItemProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenuItem.tsx#L12",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>CSS classes to apply to the root element, for proper appearance in the tree.</p>\n"
            ],
            "contentsRaw": "CSS classes to apply to the root element, for proper appearance in the tree.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenuItem.tsx#L14",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Link URL.</p>\n"
            ],
            "contentsRaw": "Link URL.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "href",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenuItem.tsx#L17",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this item is the active section (currently being viewed)</p>\n"
            ],
            "contentsRaw": "Whether this item is the active section (currently being viewed)",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isActive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenuItem.tsx#L20",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this section is expanded (it or a child is being viewed)</p>\n"
            ],
            "contentsRaw": "Whether this section is expanded (it or a child is being viewed)",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isExpanded",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenuItem.tsx#L23",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Click handler for item, to navigate to URL.</p>\n"
            ],
            "contentsRaw": "Click handler for item, to navigate to URL.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenuItem.tsx#L26",
          "type": "() => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The section for this menu item, either a page or a heading node.</p>\n"
            ],
            "contentsRaw": "The section for this menu item, either a page or a heading node.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/navMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "section",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenuItem.tsx#L29",
          "type": "IPageNode | IHeadingNode"
        }
      ]
    },
    "INavMenuProps": {
      "fileName": "../docs-theme/src/components/navMenu.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "INavMenuProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenu.tsx#L14",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/navMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activePageId",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenu.tsx#L15",
          "type": "string"
        },
        {
          "fileName": "../docs-theme/src/components/navMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeSectionId",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenu.tsx#L16",
          "type": "string"
        },
        {
          "fileName": "../docs-theme/src/components/navMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenu.tsx#L19",
          "type": "Array<IPageNode | IHeadingNode>"
        },
        {
          "fileName": "../docs-theme/src/components/navMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "level",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenu.tsx#L17",
          "type": "number"
        },
        {
          "fileName": "../docs-theme/src/components/navMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onItemClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenu.tsx#L18",
          "type": "(reference: string) => void"
        },
        {
          "fileName": "../docs-theme/src/components/navMenu.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderNavMenuItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/navMenu.tsx#L20",
          "type": "(props: INavMenuItemProps) => Element"
        }
      ]
    },
    "IPageProps": {
      "fileName": "../docs-theme/src/components/page.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IPageProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/page.tsx#L14",
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/page.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "page",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/page.tsx#L15",
          "type": "IPageData"
        },
        {
          "fileName": "../docs-theme/src/components/page.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderActions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/page.tsx#L16",
          "type": "(page: IPageData) => React.ReactNode"
        },
        {
          "fileName": "../docs-theme/src/components/page.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagRenderers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/page.tsx#L17",
          "type": "ITagRendererMap"
        }
      ]
    },
    "IApiLinkProps": {
      "fileName": "../docs-theme/src/components/typescript/apiLink.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IApiLinkProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/apiLink.tsx#L11",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../docs-theme/src/components/typescript/apiLink.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/apiLink.tsx#L12",
          "type": "never"
        },
        {
          "fileName": "../docs-theme/src/components/typescript/apiLink.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/apiLink.tsx#L13",
          "type": "string"
        }
      ]
    },
    "IDocumentationProps": {
      "fileName": "../docs-theme/src/components/documentation.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDocumentationProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L25",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked whenever the component props or state change (specifically,\ncalled in <code>componentDidMount</code> and <code>componentDidUpdate</code>).\nUse it to run non-React code on the newly rendered sections.</p>\n"
            ],
            "contentsRaw": "Callback invoked whenever the component props or state change (specifically,\ncalled in `componentDidMount` and `componentDidUpdate`).\nUse it to run non-React code on the newly rendered sections.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onComponentUpdate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L68",
          "type": "(pageId: string) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An element to place above the documentation, along the top of the viewport.\nFor best results, use a <code>Banner</code> from this package.</p>\n"
            ],
            "contentsRaw": "An element to place above the documentation, along the top of the viewport.\nFor best results, use a `Banner` from this package.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "banner",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L30",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>All the docs data from Documentalist.\nThis theme requires the Markdown plugin, and optionally supports Typescript and KSS data.</p>\n"
            ],
            "contentsRaw": "All the docs data from Documentalist.\nThis theme requires the Markdown plugin, and optionally supports Typescript and KSS data.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "docs",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L41",
          "type": "IDocsData"
        },
        {
          "documentation": {
            "contents": [
              "<p>Elements to render on the bottom of the sidebar, below the nav menu.\nThis typically contains copyright information.</p>\n"
            ],
            "contentsRaw": "Elements to render on the bottom of the sidebar, below the nav menu.\nThis typically contains copyright information.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "footer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L47",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Elements to render on the top of the sidebar, above the search box.\nThis typically contains logo, title and navigation links.\nUse <code>.docs-nav-title</code> on an element for proper padding relative to other sidebar elements.</p>\n"
            ],
            "contentsRaw": "Elements to render on the top of the sidebar, above the search box.\nThis typically contains logo, title and navigation links.\nUse `.docs-nav-title` on an element for proper padding relative to other sidebar elements.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "header",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L54",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to determine if given nav node should <em>not</em> be\nsearchable in the navigator. Returning <code>true</code> will exclude the item from\nthe navigator search results.</p>\n"
            ],
            "contentsRaw": "Callback invoked to determine if given nav node should *not* be\nsearchable in the navigator. Returning `true` will exclude the item from\nthe navigator search results.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "navigatorExclude",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L61",
          "type": "(node: IPageNode | IHeadingNode) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Default page to render in the absence of a hash route.</p>\n"
            ],
            "contentsRaw": "Default page to render in the absence of a hash route.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultPageId",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L35",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render the clickable nav menu items. (Nested menu structure is handled by the library.)\nThe default implementation renders a <code>NavMenuItem</code> element, which is exported from this package.</p>\n"
            ],
            "contentsRaw": "Callback invoked to render the clickable nav menu items. (Nested menu structure is handled by the library.)\nThe default implementation renders a `NavMenuItem` element, which is exported from this package.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderNavMenuItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L81",
          "type": "(props: INavMenuItemProps) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render actions for a documentation page.\nActions appear in an element in the upper-right corner of the page.</p>\n"
            ],
            "contentsRaw": "Callback invoked to render actions for a documentation page.\nActions appear in an element in the upper-right corner of the page.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderPageActions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L87",
          "type": "(page: IPageData) => React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked to render &quot;View source&quot; links in Typescript interfaces.\nThe <code>href</code> of the link will be <code>entry.sourceUrl</code>.</p>\n"
            ],
            "contentsRaw": "Callback invoked to render \"View source\" links in Typescript interfaces.\nThe `href` of the link will be `entry.sourceUrl`.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderViewSourceLinkText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L75",
          "defaultValue": "\"View source\"",
          "type": "(entry: ITsDocBase) => React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>HTML element to use as the scroll parent. By default <code>document.documentElement</code> is assumed to be the scroll container.</p>\n"
            ],
            "contentsRaw": "HTML element to use as the scroll parent. By default `document.documentElement` is assumed to be the scroll container.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollParent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L93",
          "defaultValue": "document.documentElement",
          "type": "HTMLElement"
        },
        {
          "documentation": {
            "contents": [
              "<p>Tag renderer functions. Unknown tags will log console errors.</p>\n"
            ],
            "contentsRaw": "Tag renderer functions. Unknown tags will log console errors.",
            "metadata": {}
          },
          "fileName": "../docs-theme/src/components/documentation.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagRenderers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/documentation.tsx#L96",
          "type": "ITagRendererMap"
        }
      ]
    },
    "IItemListRendererProps": {
      "documentation": {
        "contents": [
          "<p>An object describing how to render the list of items.\nAn <code>itemListRenderer</code> receives this object as its sole argument.</p>\n"
        ],
        "contentsRaw": "An object describing how to render the list of items.\nAn `itemListRenderer` receives this object as its sole argument.",
        "metadata": {}
      },
      "fileName": "../select/src/common/itemListRenderer.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IItemListRendererProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L11",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item (for keyboard interactions).</p>\n"
            ],
            "contentsRaw": "The currently focused item (for keyboard interactions).",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemListRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L13",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Array of items filtered by <code>itemListPredicate</code> or <code>itemPredicate</code>.\nSee <code>items</code> for the full list of items.</p>\n<p>Use <code>renderFilteredItems()</code> utility function from this library to\nmap each item in this array through <code>renderItem</code>, with support for\noptional <code>noResults</code> and <code>initialContent</code> states.</p>\n"
            ],
            "contentsRaw": "Array of items filtered by `itemListPredicate` or `itemPredicate`.\nSee `items` for the full list of items.\n\nUse `renderFilteredItems()` utility function from this library to\nmap each item in this array through `renderItem`, with support for\noptional `noResults` and `initialContent` states.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemListRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "filteredItems",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L23",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Array of all items in the list.\nSee <code>filteredItems</code> for a filtered array based on <code>query</code> and predicate props.</p>\n"
            ],
            "contentsRaw": "Array of all items in the list.\nSee `filteredItems` for a filtered array based on `query` and predicate props.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemListRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L29",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>A ref handler that should be attached to the parent HTML element of the menu items.\nThis is required for the active item to scroll into view automatically.</p>\n"
            ],
            "contentsRaw": "A ref handler that should be attached to the parent HTML element of the menu items.\nThis is required for the active item to scroll into view automatically.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemListRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemsParentRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L40",
          "type": "(ref: HTMLElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The current query string.</p>\n"
            ],
            "contentsRaw": "The current query string.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemListRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L34",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Call this function to render an item.\nThis retrieves the modifiers for the item and delegates actual rendering\nto the owner component&#39;s <code>itemRenderer</code> prop.</p>\n"
            ],
            "contentsRaw": "Call this function to render an item.\nThis retrieves the modifiers for the item and delegates actual rendering\nto the owner component's `itemRenderer` prop.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemListRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L47",
          "type": "(item: T, index: number) => Element | null"
        }
      ]
    },
    "IItemModifiers": {
      "fileName": "../select/src/common/itemRenderer.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IItemModifiers",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L9",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether this is the &quot;active&quot; (focused) item, meaning keyboard interactions will act upon it.</p>\n"
            ],
            "contentsRaw": "Whether this is the \"active\" (focused) item, meaning keyboard interactions will act upon it.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "active",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L11",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this item is disabled and should ignore interactions.</p>\n"
            ],
            "contentsRaw": "Whether this item is disabled and should ignore interactions.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L14",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this item matches the predicate. A typical renderer could hide <code>false</code> values.</p>\n"
            ],
            "contentsRaw": "Whether this item matches the predicate. A typical renderer could hide `false` values.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "matchesPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L17",
          "type": "boolean"
        }
      ]
    },
    "IItemRendererProps": {
      "documentation": {
        "contents": [
          "<p>An object describing how to render a particular item.\nAn <code>itemRenderer</code> receives the item as its first argument, and this object as its second argument.</p>\n"
        ],
        "contentsRaw": "An object describing how to render a particular item.\nAn `itemRenderer` receives the item as its first argument, and this object as its second argument.",
        "metadata": {}
      },
      "fileName": "../select/src/common/itemRenderer.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IItemRendererProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L24",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Click event handler to select this item.</p>\n"
            ],
            "contentsRaw": "Click event handler to select this item.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L26",
          "type": "MouseEventHandler<HTMLElement>"
        },
        {
          "fileName": "../select/src/common/itemRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "index",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L28",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Modifiers that describe how to render this item, such as <code>active</code> or <code>disabled</code>.</p>\n"
            ],
            "contentsRaw": "Modifiers that describe how to render this item, such as `active` or `disabled`.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "modifiers",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L31",
          "type": "IItemModifiers"
        },
        {
          "documentation": {
            "contents": [
              "<p>The current query string used to filter the items.</p>\n"
            ],
            "contentsRaw": "The current query string used to filter the items.",
            "metadata": {}
          },
          "fileName": "../select/src/common/itemRenderer.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L34",
          "type": "string"
        }
      ]
    },
    "IListItemsProps": {
      "documentation": {
        "contents": [
          "<p>Reusable generic props for a component that operates on a filterable, selectable list of <code>items</code>.</p>\n"
        ],
        "contentsRaw": "Reusable generic props for a component that operates on a filterable, selectable list of `items`.",
        "metadata": {}
      },
      "fileName": "../select/src/common/listItemsProps.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IListItemsProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L13",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "noResults",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L81",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item for keyboard interactions, or <code>null</code> to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component&#39;s state). Use <code>onActiveItemChange</code>\nto listen for updates.</p>\n"
            ],
            "contentsRaw": "The currently focused item for keyboard interactions, or `null` to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component's state). Use `onActiveItemChange`\nto listen for updates.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L20",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.</p>\n"
            ],
            "contentsRaw": "Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L30",
          "type": "keyof T | (item: T, index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of entire <code>items</code> array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)</p>\n<p>If <code>itemPredicate</code> is also defined, this prop takes priority and the other will be ignored.</p>\n"
            ],
            "contentsRaw": "Customize querying of entire `items` array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)\n\nIf `itemPredicate` is also defined, this prop takes priority and the other will be ignored.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L39",
          "type": "ItemListPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for the contents of the dropdown.</p>\n<p>The default implementation invokes <code>itemRenderer</code> for each item that passes the predicate\nand wraps them all in a <code>Menu</code> element. If the query is empty then <code>initialContent</code> is returned,\nand if there are no items that match the predicate then <code>noResults</code> is returned.</p>\n"
            ],
            "contentsRaw": "Custom renderer for the contents of the dropdown.\n\nThe default implementation invokes `itemRenderer` for each item that passes the predicate\nand wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\nand if there are no items that match the predicate then `noResults` is returned.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L64",
          "type": "ItemListRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of individual items. Return <code>true</code> to keep the item, <code>false</code> to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use <code>itemListPredicate</code> to operate once on the entire array.</p>\n<p>This prop is ignored if <code>itemListPredicate</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Customize querying of individual items. Return `true` to keep the item, `false` to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use `itemListPredicate` to operate once on the entire array.\n\nThis prop is ignored if `itemListPredicate` is also defined.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L48",
          "type": "ItemPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an <code>onClick</code> event handler that\nshould be attached to the returned element.</p>\n"
            ],
            "contentsRaw": "Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an `onClick` event handler that\nshould be attached to the returned element.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L55",
          "type": "ItemRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Array of items in the list.</p>\n"
            ],
            "contentsRaw": "Array of items in the list.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L23",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when query is empty.\nIf omitted, all items will be rendered (or result of <code>itemListPredicate</code> with empty query).\nIf explicit <code>null</code>, nothing will be rendered when query is empty.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when query is empty.\nIf omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\nIf explicit `null`, nothing will be rendered when query is empty.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialContent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L73",
          "type": "React.ReactNode | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.</p>\n"
            ],
            "contentsRaw": "Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActiveItemChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L88",
          "type": "(activeItem: T | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when an item from the list is selected,\ntypically by clicking or pressing <code>enter</code> key.</p>\n"
            ],
            "contentsRaw": "Callback invoked when an item from the list is selected,\ntypically by clicking or pressing `enter` key.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onItemSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L94",
          "type": "(item: T, event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the query string changes.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the query string changes.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onQueryChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L99",
          "type": "(query: string, event?: ChangeEvent<HTMLInputElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Query string passed to <code>itemListPredicate</code> or <code>itemPredicate</code> to filter items.\nThis value is controlled: its state must be managed externally by attaching an <code>onChange</code>\nhandler to the relevant element in your <code>renderer</code> implementation.</p>\n"
            ],
            "contentsRaw": "Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\nThis value is controlled: its state must be managed externally by attaching an `onChange`\nhandler to the relevant element in your `renderer` implementation.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L130",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>every\ntime the query changes</em> (via prop or by user input).</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _every\ntime the query changes_ (via prop or by user input).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnQuery",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L106",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>when\nan item is selected</em>. The query will also be reset to the empty string.</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _when\nan item is selected_. The query will also be reset to the empty string.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L113",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>activeItem</code> is controlled, whether the active item should <em>always</em>\nbe scrolled into view when the prop changes. If <code>false</code>, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n<code>activeItem</code> prop is omitted (uncontrolled behavior).</p>\n"
            ],
            "contentsRaw": "When `activeItem` is controlled, whether the active item should _always_\nbe scrolled into view when the prop changes. If `false`, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n`activeItem` prop is omitted (uncontrolled behavior).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollToActiveItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L123",
          "defaultValue": "true",
          "type": "boolean"
        }
      ]
    },
    "IQueryListProps": {
      "fileName": "../select/src/components/query-list/queryList.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IQueryListProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L12",
      "extends": [
        "IListItemsProps<T>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.</p>\n"
            ],
            "contentsRaw": "Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActiveItemChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L88",
          "inheritedFrom": "IListItemsProps.onActiveItemChange",
          "type": "(activeItem: T | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item for keyboard interactions, or <code>null</code> to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component&#39;s state). Use <code>onActiveItemChange</code>\nto listen for updates.</p>\n"
            ],
            "contentsRaw": "The currently focused item for keyboard interactions, or `null` to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component's state). Use `onActiveItemChange`\nto listen for updates.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L20",
          "inheritedFrom": "IListItemsProps.activeItem",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.</p>\n"
            ],
            "contentsRaw": "Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L30",
          "inheritedFrom": "IListItemsProps.itemDisabled",
          "type": "keyof T | (item: T, index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of entire <code>items</code> array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)</p>\n<p>If <code>itemPredicate</code> is also defined, this prop takes priority and the other will be ignored.</p>\n"
            ],
            "contentsRaw": "Customize querying of entire `items` array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)\n\nIf `itemPredicate` is also defined, this prop takes priority and the other will be ignored.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L39",
          "inheritedFrom": "IListItemsProps.itemListPredicate",
          "type": "ItemListPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for the contents of the dropdown.</p>\n<p>The default implementation invokes <code>itemRenderer</code> for each item that passes the predicate\nand wraps them all in a <code>Menu</code> element. If the query is empty then <code>initialContent</code> is returned,\nand if there are no items that match the predicate then <code>noResults</code> is returned.</p>\n"
            ],
            "contentsRaw": "Custom renderer for the contents of the dropdown.\n\nThe default implementation invokes `itemRenderer` for each item that passes the predicate\nand wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\nand if there are no items that match the predicate then `noResults` is returned.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L64",
          "inheritedFrom": "IListItemsProps.itemListRenderer",
          "type": "ItemListRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of individual items. Return <code>true</code> to keep the item, <code>false</code> to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use <code>itemListPredicate</code> to operate once on the entire array.</p>\n<p>This prop is ignored if <code>itemListPredicate</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Customize querying of individual items. Return `true` to keep the item, `false` to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use `itemListPredicate` to operate once on the entire array.\n\nThis prop is ignored if `itemListPredicate` is also defined.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L48",
          "inheritedFrom": "IListItemsProps.itemPredicate",
          "type": "ItemPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an <code>onClick</code> event handler that\nshould be attached to the returned element.</p>\n"
            ],
            "contentsRaw": "Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an `onClick` event handler that\nshould be attached to the returned element.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L55",
          "inheritedFrom": "IListItemsProps.itemRenderer",
          "type": "ItemRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Array of items in the list.</p>\n"
            ],
            "contentsRaw": "Array of items in the list.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L23",
          "inheritedFrom": "IListItemsProps.items",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "noResults",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L81",
          "inheritedFrom": "IListItemsProps.noResults",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when query is empty.\nIf omitted, all items will be rendered (or result of <code>itemListPredicate</code> with empty query).\nIf explicit <code>null</code>, nothing will be rendered when query is empty.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when query is empty.\nIf omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\nIf explicit `null`, nothing will be rendered when query is empty.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialContent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L73",
          "inheritedFrom": "IListItemsProps.initialContent",
          "type": "React.ReactNode | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when an item from the list is selected,\ntypically by clicking or pressing <code>enter</code> key.</p>\n"
            ],
            "contentsRaw": "Callback invoked when an item from the list is selected,\ntypically by clicking or pressing `enter` key.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onItemSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L94",
          "inheritedFrom": "IListItemsProps.onItemSelect",
          "type": "(item: T, event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when user presses a key, after processing <code>QueryList</code>&#39;s own key events\n(up/down to navigate active item). This callback is passed to <code>renderer</code> and (along with\n<code>onKeyUp</code>) can be attached to arbitrary content elements to support keyboard selection.</p>\n"
            ],
            "contentsRaw": "Callback invoked when user presses a key, after processing `QueryList`'s own key events\n(up/down to navigate active item). This callback is passed to `renderer` and (along with\n`onKeyUp`) can be attached to arbitrary content elements to support keyboard selection.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L18",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when user releases a key, after processing <code>QueryList</code>&#39;s own key events\n(enter to select active item). This callback is passed to <code>renderer</code> and (along with\n<code>onKeyDown</code>) can be attached to arbitrary content elements to support keyboard selection.</p>\n"
            ],
            "contentsRaw": "Callback invoked when user releases a key, after processing `QueryList`'s own key events\n(enter to select active item). This callback is passed to `renderer` and (along with\n`onKeyDown`) can be attached to arbitrary content elements to support keyboard selection.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyUp",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L25",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the query string changes.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the query string changes.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onQueryChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L99",
          "inheritedFrom": "IListItemsProps.onQueryChange",
          "type": "(query: string, event?: ChangeEvent<HTMLInputElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Query string passed to <code>itemListPredicate</code> or <code>itemPredicate</code> to filter items.\nThis value is controlled: its state must be managed externally by attaching an <code>onChange</code>\nhandler to the relevant element in your <code>renderer</code> implementation.</p>\n"
            ],
            "contentsRaw": "Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\nThis value is controlled: its state must be managed externally by attaching an `onChange`\nhandler to the relevant element in your `renderer` implementation.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L130",
          "inheritedFrom": "IListItemsProps.query",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize rendering of the component.\nReceives an object with props that should be applied to elements as necessary.</p>\n"
            ],
            "contentsRaw": "Customize rendering of the component.\nReceives an object with props that should be applied to elements as necessary.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L31",
          "type": "(listProps: IQueryListRendererProps<T>) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>every\ntime the query changes</em> (via prop or by user input).</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _every\ntime the query changes_ (via prop or by user input).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnQuery",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L106",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.resetOnQuery",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>when\nan item is selected</em>. The query will also be reset to the empty string.</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _when\nan item is selected_. The query will also be reset to the empty string.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L113",
          "defaultValue": "false",
          "inheritedFrom": "IListItemsProps.resetOnSelect",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>activeItem</code> is controlled, whether the active item should <em>always</em>\nbe scrolled into view when the prop changes. If <code>false</code>, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n<code>activeItem</code> prop is omitted (uncontrolled behavior).</p>\n"
            ],
            "contentsRaw": "When `activeItem` is controlled, whether the active item should _always_\nbe scrolled into view when the prop changes. If `false`, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n`activeItem` prop is omitted (uncontrolled behavior).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollToActiveItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L123",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.scrollToActiveItem",
          "type": "boolean"
        }
      ]
    },
    "IQueryListRendererProps": {
      "documentation": {
        "contents": [
          "<p>An object describing how to render a <code>QueryList</code>.\nA <code>QueryList</code> <code>renderer</code> receives this object as its sole argument.</p>\n"
        ],
        "contentsRaw": "An object describing how to render a `QueryList`.\nA `QueryList` `renderer` receives this object as its sole argument.",
        "metadata": {}
      },
      "fileName": "../select/src/components/query-list/queryList.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IQueryListRendererProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L38",
      "extends": [
        "IQueryListState<T>",
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item (for keyboard interactions).</p>\n"
            ],
            "contentsRaw": "The currently focused item (for keyboard interactions).",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L69",
          "inheritedFrom": "IQueryListState.activeItem",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>The original <code>items</code> array filtered by <code>itemListPredicate</code> or <code>itemPredicate</code>.</p>\n"
            ],
            "contentsRaw": "The original `items` array filtered by `itemListPredicate` or `itemPredicate`.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "filteredItems",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L72",
          "inheritedFrom": "IQueryListState.filteredItems",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Selection handler that should be invoked when a new item has been chosen,\nperhaps because the user clicked it.</p>\n"
            ],
            "contentsRaw": "Selection handler that should be invoked when a new item has been chosen,\nperhaps because the user clicked it.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleItemSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L43",
          "type": "(item: T, event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Keyboard handler for up/down arrow keys to shift the active item.\nAttach this handler to any element that should support this interaction.</p>\n"
            ],
            "contentsRaw": "Keyboard handler for up/down arrow keys to shift the active item.\nAttach this handler to any element that should support this interaction.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L49",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Keyboard handler for enter key to select the active item.\nAttach this handler to any element that should support this interaction.</p>\n"
            ],
            "contentsRaw": "Keyboard handler for enter key to select the active item.\nAttach this handler to any element that should support this interaction.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleKeyUp",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L55",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Change handler for query string. Attach this to an input element to allow\n<code>QueryList</code> to control the query.</p>\n"
            ],
            "contentsRaw": "Change handler for query string. Attach this to an input element to allow\n`QueryList` to control the query.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleQueryChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L61",
          "type": "React.ChangeEventHandler<HTMLInputElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Rendered elements returned from <code>itemListRenderer</code> prop.</p>\n"
            ],
            "contentsRaw": "Rendered elements returned from `itemListRenderer` prop.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemList",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L64",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>The current query string.</p>\n"
            ],
            "contentsRaw": "The current query string.",
            "metadata": {}
          },
          "fileName": "../select/src/components/query-list/queryList.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/query-list/queryList.tsx#L75",
          "inheritedFrom": "IQueryListState.query",
          "type": "string"
        }
      ]
    },
    "IOmnibarProps": {
      "fileName": "../select/src/components/omnibar/omnibar.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IOmnibarProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/omnibar/omnibar.tsx#L23",
      "extends": [
        "IListItemsProps<T>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "noResults",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L81",
          "inheritedFrom": "IListItemsProps.noResults",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item for keyboard interactions, or <code>null</code> to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component&#39;s state). Use <code>onActiveItemChange</code>\nto listen for updates.</p>\n"
            ],
            "contentsRaw": "The currently focused item for keyboard interactions, or `null` to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component's state). Use `onActiveItemChange`\nto listen for updates.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L20",
          "inheritedFrom": "IListItemsProps.activeItem",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to the query <code>InputGroup</code>. Use <code>query</code> and\n<code>onQueryChange</code> instead of <code>inputProps.value</code> and <code>inputProps.onChange</code>\nto control this input.</p>\n"
            ],
            "contentsRaw": "Props to spread to the query `InputGroup`. Use `query` and\n`onQueryChange` instead of `inputProps.value` and `inputProps.onChange`\nto control this input.",
            "metadata": {}
          },
          "fileName": "../select/src/components/omnibar/omnibar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/omnibar/omnibar.tsx#L29",
          "type": "IInputGroupProps & HTMLInputProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Toggles the visibility of the omnibar.\nThis prop is required because the component is controlled.</p>\n"
            ],
            "contentsRaw": "Toggles the visibility of the omnibar.\nThis prop is required because the component is controlled.",
            "metadata": {}
          },
          "fileName": "../select/src/components/omnibar/omnibar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isOpen",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/omnibar/omnibar.tsx#L35",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.</p>\n"
            ],
            "contentsRaw": "Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L30",
          "inheritedFrom": "IListItemsProps.itemDisabled",
          "type": "keyof T | (item: T, index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of entire <code>items</code> array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)</p>\n<p>If <code>itemPredicate</code> is also defined, this prop takes priority and the other will be ignored.</p>\n"
            ],
            "contentsRaw": "Customize querying of entire `items` array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)\n\nIf `itemPredicate` is also defined, this prop takes priority and the other will be ignored.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L39",
          "inheritedFrom": "IListItemsProps.itemListPredicate",
          "type": "ItemListPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for the contents of the dropdown.</p>\n<p>The default implementation invokes <code>itemRenderer</code> for each item that passes the predicate\nand wraps them all in a <code>Menu</code> element. If the query is empty then <code>initialContent</code> is returned,\nand if there are no items that match the predicate then <code>noResults</code> is returned.</p>\n"
            ],
            "contentsRaw": "Custom renderer for the contents of the dropdown.\n\nThe default implementation invokes `itemRenderer` for each item that passes the predicate\nand wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\nand if there are no items that match the predicate then `noResults` is returned.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L64",
          "inheritedFrom": "IListItemsProps.itemListRenderer",
          "type": "ItemListRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of individual items. Return <code>true</code> to keep the item, <code>false</code> to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use <code>itemListPredicate</code> to operate once on the entire array.</p>\n<p>This prop is ignored if <code>itemListPredicate</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Customize querying of individual items. Return `true` to keep the item, `false` to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use `itemListPredicate` to operate once on the entire array.\n\nThis prop is ignored if `itemListPredicate` is also defined.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L48",
          "inheritedFrom": "IListItemsProps.itemPredicate",
          "type": "ItemPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an <code>onClick</code> event handler that\nshould be attached to the returned element.</p>\n"
            ],
            "contentsRaw": "Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an `onClick` event handler that\nshould be attached to the returned element.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L55",
          "inheritedFrom": "IListItemsProps.itemRenderer",
          "type": "ItemRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Array of items in the list.</p>\n"
            ],
            "contentsRaw": "Array of items in the list.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L23",
          "inheritedFrom": "IListItemsProps.items",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when query is empty.\nIf omitted, all items will be rendered (or result of <code>itemListPredicate</code> with empty query).\nIf explicit <code>null</code>, nothing will be rendered when query is empty.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when query is empty.\nIf omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\nIf explicit `null`, nothing will be rendered when query is empty.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialContent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L73",
          "inheritedFrom": "IListItemsProps.initialContent",
          "type": "React.ReactNode | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.</p>\n"
            ],
            "contentsRaw": "Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActiveItemChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L88",
          "inheritedFrom": "IListItemsProps.onActiveItemChange",
          "type": "(activeItem: T | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is invoked when user interaction causes the omnibar to\nclose, such as clicking on the overlay or pressing the <code>esc</code> key (if\nenabled). Receives the event from the user&#39;s interaction, if there was an\nevent (generally either a mouse or key event).</p>\n<p>Note that due to controlled usage, this component will not actually close\nitself until the <code>isOpen</code> prop becomes <code>false</code>.\n.</p>\n"
            ],
            "contentsRaw": "A callback that is invoked when user interaction causes the omnibar to\nclose, such as clicking on the overlay or pressing the `esc` key (if\nenabled). Receives the event from the user's interaction, if there was an\nevent (generally either a mouse or key event).\n\nNote that due to controlled usage, this component will not actually close\nitself until the `isOpen` prop becomes `false`.\n.",
            "metadata": {}
          },
          "fileName": "../select/src/components/omnibar/omnibar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/omnibar/omnibar.tsx#L47",
          "type": "(event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when an item from the list is selected,\ntypically by clicking or pressing <code>enter</code> key.</p>\n"
            ],
            "contentsRaw": "Callback invoked when an item from the list is selected,\ntypically by clicking or pressing `enter` key.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onItemSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L94",
          "inheritedFrom": "IListItemsProps.onItemSelect",
          "type": "(item: T, event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the query string changes.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the query string changes.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onQueryChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L99",
          "inheritedFrom": "IListItemsProps.onQueryChange",
          "type": "(query: string, event?: ChangeEvent<HTMLInputElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>Overlay</code>.</p>\n"
            ],
            "contentsRaw": "Props to spread to `Overlay`.",
            "metadata": {}
          },
          "fileName": "../select/src/components/omnibar/omnibar.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "overlayProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/omnibar/omnibar.tsx#L50",
          "type": "Partial<IOverlayProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Query string passed to <code>itemListPredicate</code> or <code>itemPredicate</code> to filter items.\nThis value is controlled: its state must be managed externally by attaching an <code>onChange</code>\nhandler to the relevant element in your <code>renderer</code> implementation.</p>\n"
            ],
            "contentsRaw": "Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\nThis value is controlled: its state must be managed externally by attaching an `onChange`\nhandler to the relevant element in your `renderer` implementation.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L130",
          "inheritedFrom": "IListItemsProps.query",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>every\ntime the query changes</em> (via prop or by user input).</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _every\ntime the query changes_ (via prop or by user input).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnQuery",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L106",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.resetOnQuery",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>when\nan item is selected</em>. The query will also be reset to the empty string.</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _when\nan item is selected_. The query will also be reset to the empty string.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L113",
          "defaultValue": "false",
          "inheritedFrom": "IListItemsProps.resetOnSelect",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>activeItem</code> is controlled, whether the active item should <em>always</em>\nbe scrolled into view when the prop changes. If <code>false</code>, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n<code>activeItem</code> prop is omitted (uncontrolled behavior).</p>\n"
            ],
            "contentsRaw": "When `activeItem` is controlled, whether the active item should _always_\nbe scrolled into view when the prop changes. If `false`, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n`activeItem` prop is omitted (uncontrolled behavior).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollToActiveItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L123",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.scrollToActiveItem",
          "type": "boolean"
        }
      ]
    },
    "IMultiSelectProps": {
      "fileName": "../select/src/components/select/multiSelect.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IMultiSelectProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/multiSelect.tsx#L22",
      "extends": [
        "IListItemsProps<T>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the query string changes.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the query string changes.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onQueryChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L99",
          "inheritedFrom": "IListItemsProps.onQueryChange",
          "type": "(query: string, event?: ChangeEvent<HTMLInputElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item for keyboard interactions, or <code>null</code> to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component&#39;s state). Use <code>onActiveItemChange</code>\nto listen for updates.</p>\n"
            ],
            "contentsRaw": "The currently focused item for keyboard interactions, or `null` to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component's state). Use `onActiveItemChange`\nto listen for updates.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L20",
          "inheritedFrom": "IListItemsProps.activeItem",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.</p>\n"
            ],
            "contentsRaw": "Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L30",
          "inheritedFrom": "IListItemsProps.itemDisabled",
          "type": "keyof T | (item: T, index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of entire <code>items</code> array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)</p>\n<p>If <code>itemPredicate</code> is also defined, this prop takes priority and the other will be ignored.</p>\n"
            ],
            "contentsRaw": "Customize querying of entire `items` array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)\n\nIf `itemPredicate` is also defined, this prop takes priority and the other will be ignored.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L39",
          "inheritedFrom": "IListItemsProps.itemListPredicate",
          "type": "ItemListPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for the contents of the dropdown.</p>\n<p>The default implementation invokes <code>itemRenderer</code> for each item that passes the predicate\nand wraps them all in a <code>Menu</code> element. If the query is empty then <code>initialContent</code> is returned,\nand if there are no items that match the predicate then <code>noResults</code> is returned.</p>\n"
            ],
            "contentsRaw": "Custom renderer for the contents of the dropdown.\n\nThe default implementation invokes `itemRenderer` for each item that passes the predicate\nand wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\nand if there are no items that match the predicate then `noResults` is returned.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L64",
          "inheritedFrom": "IListItemsProps.itemListRenderer",
          "type": "ItemListRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of individual items. Return <code>true</code> to keep the item, <code>false</code> to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use <code>itemListPredicate</code> to operate once on the entire array.</p>\n<p>This prop is ignored if <code>itemListPredicate</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Customize querying of individual items. Return `true` to keep the item, `false` to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use `itemListPredicate` to operate once on the entire array.\n\nThis prop is ignored if `itemListPredicate` is also defined.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L48",
          "inheritedFrom": "IListItemsProps.itemPredicate",
          "type": "ItemPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an <code>onClick</code> event handler that\nshould be attached to the returned element.</p>\n"
            ],
            "contentsRaw": "Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an `onClick` event handler that\nshould be attached to the returned element.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L55",
          "inheritedFrom": "IListItemsProps.itemRenderer",
          "type": "ItemRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Array of items in the list.</p>\n"
            ],
            "contentsRaw": "Array of items in the list.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L23",
          "inheritedFrom": "IListItemsProps.items",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "noResults",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L81",
          "inheritedFrom": "IListItemsProps.noResults",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.</p>\n"
            ],
            "contentsRaw": "Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActiveItemChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L88",
          "inheritedFrom": "IListItemsProps.onActiveItemChange",
          "type": "(activeItem: T | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when an item from the list is selected,\ntypically by clicking or pressing <code>enter</code> key.</p>\n"
            ],
            "contentsRaw": "Callback invoked when an item from the list is selected,\ntypically by clicking or pressing `enter` key.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onItemSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L94",
          "inheritedFrom": "IListItemsProps.onItemSelect",
          "type": "(item: T, event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when query is empty.\nIf omitted, all items will be rendered (or result of <code>itemListPredicate</code> with empty query).\nIf explicit <code>null</code>, nothing will be rendered when query is empty.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when query is empty.\nIf omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\nIf explicit `null`, nothing will be rendered when query is empty.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialContent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L73",
          "inheritedFrom": "IListItemsProps.initialContent",
          "type": "React.ReactNode | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover opens on key down or when <code>TagInput</code> is focused.</p>\n"
            ],
            "contentsRaw": "Whether the popover opens on key down or when `TagInput` is focused.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/multiSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "openOnKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/multiSelect.tsx#L30",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Input placeholder text. Shorthand for <code>tagInputProps.placeholder</code>.</p>\n"
            ],
            "contentsRaw": "Input placeholder text. Shorthand for `tagInputProps.placeholder`.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/multiSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/multiSelect.tsx#L36",
          "defaultValue": "\"Search...\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>Popover</code>. Note that <code>content</code> cannot be changed.</p>\n"
            ],
            "contentsRaw": "Props to spread to `Popover`. Note that `content` cannot be changed.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/multiSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/multiSelect.tsx#L39",
          "type": "Partial<IPopoverProps> & any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Query string passed to <code>itemListPredicate</code> or <code>itemPredicate</code> to filter items.\nThis value is controlled: its state must be managed externally by attaching an <code>onChange</code>\nhandler to the relevant element in your <code>renderer</code> implementation.</p>\n"
            ],
            "contentsRaw": "Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\nThis value is controlled: its state must be managed externally by attaching an `onChange`\nhandler to the relevant element in your `renderer` implementation.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L130",
          "inheritedFrom": "IListItemsProps.query",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>every\ntime the query changes</em> (via prop or by user input).</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _every\ntime the query changes_ (via prop or by user input).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnQuery",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L106",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.resetOnQuery",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>when\nan item is selected</em>. The query will also be reset to the empty string.</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _when\nan item is selected_. The query will also be reset to the empty string.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L113",
          "defaultValue": "false",
          "inheritedFrom": "IListItemsProps.resetOnSelect",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>activeItem</code> is controlled, whether the active item should <em>always</em>\nbe scrolled into view when the prop changes. If <code>false</code>, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n<code>activeItem</code> prop is omitted (uncontrolled behavior).</p>\n"
            ],
            "contentsRaw": "When `activeItem` is controlled, whether the active item should _always_\nbe scrolled into view when the prop changes. If `false`, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n`activeItem` prop is omitted (uncontrolled behavior).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollToActiveItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L123",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.scrollToActiveItem",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Controlled selected values.</p>\n"
            ],
            "contentsRaw": "Controlled selected values.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/multiSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedItems",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/multiSelect.tsx#L24",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>TagInput</code>. Use <code>query</code> and <code>onQueryChange</code> to control the input.</p>\n"
            ],
            "contentsRaw": "Props to spread to `TagInput`. Use `query` and `onQueryChange` to control the input.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/multiSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagInputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/multiSelect.tsx#L42",
          "type": "Partial<ITagInputProps> & any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer to transform an item into tag content.</p>\n"
            ],
            "contentsRaw": "Custom renderer to transform an item into tag content.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/multiSelect.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tagRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/multiSelect.tsx#L45",
          "type": "(item: T) => React.ReactNode"
        }
      ]
    },
    "ISelectProps": {
      "fileName": "../select/src/components/select/select.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ISelectProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/select.tsx#L25",
      "extends": [
        "IListItemsProps<T>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Array of items in the list.</p>\n"
            ],
            "contentsRaw": "Array of items in the list.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L23",
          "inheritedFrom": "IListItemsProps.items",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item for keyboard interactions, or <code>null</code> to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component&#39;s state). Use <code>onActiveItemChange</code>\nto listen for updates.</p>\n"
            ],
            "contentsRaw": "The currently focused item for keyboard interactions, or `null` to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component's state). Use `onActiveItemChange`\nto listen for updates.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L20",
          "inheritedFrom": "IListItemsProps.activeItem",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the dropdown list can be filtered.\nDisabling this option will remove the <code>InputGroup</code> and ignore <code>inputProps</code>.</p>\n"
            ],
            "contentsRaw": "Whether the dropdown list can be filtered.\nDisabling this option will remove the `InputGroup` and ignore `inputProps`.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/select.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "filterable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/select.tsx#L31",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when query is empty.\nIf omitted, all items will be rendered (or result of <code>itemListPredicate</code> with empty query).\nIf explicit <code>null</code>, nothing will be rendered when query is empty.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when query is empty.\nIf omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\nIf explicit `null`, nothing will be rendered when query is empty.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialContent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L73",
          "inheritedFrom": "IListItemsProps.initialContent",
          "type": "React.ReactNode | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to the query <code>InputGroup</code>. Use <code>query</code> and\n<code>onQueryChange</code> instead of <code>inputProps.value</code> and <code>inputProps.onChange</code>\nto control this input.</p>\n"
            ],
            "contentsRaw": "Props to spread to the query `InputGroup`. Use `query` and\n`onQueryChange` instead of `inputProps.value` and `inputProps.onChange`\nto control this input.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/select.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/select.tsx#L45",
          "type": "IInputGroupProps & HTMLInputProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.</p>\n"
            ],
            "contentsRaw": "Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L30",
          "inheritedFrom": "IListItemsProps.itemDisabled",
          "type": "keyof T | (item: T, index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of entire <code>items</code> array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)</p>\n<p>If <code>itemPredicate</code> is also defined, this prop takes priority and the other will be ignored.</p>\n"
            ],
            "contentsRaw": "Customize querying of entire `items` array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)\n\nIf `itemPredicate` is also defined, this prop takes priority and the other will be ignored.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L39",
          "inheritedFrom": "IListItemsProps.itemListPredicate",
          "type": "ItemListPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for the contents of the dropdown.</p>\n<p>The default implementation invokes <code>itemRenderer</code> for each item that passes the predicate\nand wraps them all in a <code>Menu</code> element. If the query is empty then <code>initialContent</code> is returned,\nand if there are no items that match the predicate then <code>noResults</code> is returned.</p>\n"
            ],
            "contentsRaw": "Custom renderer for the contents of the dropdown.\n\nThe default implementation invokes `itemRenderer` for each item that passes the predicate\nand wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\nand if there are no items that match the predicate then `noResults` is returned.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L64",
          "inheritedFrom": "IListItemsProps.itemListRenderer",
          "type": "ItemListRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of individual items. Return <code>true</code> to keep the item, <code>false</code> to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use <code>itemListPredicate</code> to operate once on the entire array.</p>\n<p>This prop is ignored if <code>itemListPredicate</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Customize querying of individual items. Return `true` to keep the item, `false` to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use `itemListPredicate` to operate once on the entire array.\n\nThis prop is ignored if `itemListPredicate` is also defined.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L48",
          "inheritedFrom": "IListItemsProps.itemPredicate",
          "type": "ItemPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an <code>onClick</code> event handler that\nshould be attached to the returned element.</p>\n"
            ],
            "contentsRaw": "Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an `onClick` event handler that\nshould be attached to the returned element.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L55",
          "inheritedFrom": "IListItemsProps.itemRenderer",
          "type": "ItemRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the component is non-interactive.\nNote that you&#39;ll also need to disable the component&#39;s children, if appropriate.</p>\n"
            ],
            "contentsRaw": "Whether the component is non-interactive.\nNote that you'll also need to disable the component's children, if appropriate.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/select.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/select.tsx#L38",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "noResults",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L81",
          "inheritedFrom": "IListItemsProps.noResults",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.</p>\n"
            ],
            "contentsRaw": "Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActiveItemChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L88",
          "inheritedFrom": "IListItemsProps.onActiveItemChange",
          "type": "(activeItem: T | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when an item from the list is selected,\ntypically by clicking or pressing <code>enter</code> key.</p>\n"
            ],
            "contentsRaw": "Callback invoked when an item from the list is selected,\ntypically by clicking or pressing `enter` key.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onItemSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L94",
          "inheritedFrom": "IListItemsProps.onItemSelect",
          "type": "(item: T, event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the query string changes.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the query string changes.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onQueryChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L99",
          "inheritedFrom": "IListItemsProps.onQueryChange",
          "type": "(query: string, event?: ChangeEvent<HTMLInputElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>Popover</code>. Note that <code>content</code> cannot be changed.</p>\n"
            ],
            "contentsRaw": "Props to spread to `Popover`. Note that `content` cannot be changed.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/select.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/select.tsx#L48",
          "type": "Partial<IPopoverProps> & any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Query string passed to <code>itemListPredicate</code> or <code>itemPredicate</code> to filter items.\nThis value is controlled: its state must be managed externally by attaching an <code>onChange</code>\nhandler to the relevant element in your <code>renderer</code> implementation.</p>\n"
            ],
            "contentsRaw": "Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\nThis value is controlled: its state must be managed externally by attaching an `onChange`\nhandler to the relevant element in your `renderer` implementation.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L130",
          "inheritedFrom": "IListItemsProps.query",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>when\nthe popover closes</em>. The query will also be reset to the empty string.</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _when\nthe popover closes_. The query will also be reset to the empty string.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/select.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnClose",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/select.tsx#L55",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>every\ntime the query changes</em> (via prop or by user input).</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _every\ntime the query changes_ (via prop or by user input).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnQuery",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L106",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.resetOnQuery",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>when\nan item is selected</em>. The query will also be reset to the empty string.</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _when\nan item is selected_. The query will also be reset to the empty string.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L113",
          "defaultValue": "false",
          "inheritedFrom": "IListItemsProps.resetOnSelect",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>activeItem</code> is controlled, whether the active item should <em>always</em>\nbe scrolled into view when the prop changes. If <code>false</code>, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n<code>activeItem</code> prop is omitted (uncontrolled behavior).</p>\n"
            ],
            "contentsRaw": "When `activeItem` is controlled, whether the active item should _always_\nbe scrolled into view when the prop changes. If `false`, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n`activeItem` prop is omitted (uncontrolled behavior).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollToActiveItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L123",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.scrollToActiveItem",
          "type": "boolean"
        }
      ]
    },
    "ISuggestProps": {
      "fileName": "../select/src/components/select/suggest.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ISuggestProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L24",
      "extends": [
        "IListItemsProps<T>"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Array of items in the list.</p>\n"
            ],
            "contentsRaw": "Array of items in the list.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "items",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L23",
          "inheritedFrom": "IListItemsProps.items",
          "type": "T[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused item for keyboard interactions, or <code>null</code> to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component&#39;s state). Use <code>onActiveItemChange</code>\nto listen for updates.</p>\n"
            ],
            "contentsRaw": "The currently focused item for keyboard interactions, or `null` to\nindicate that no item is active. If omitted, this prop will be\nuncontrolled (managed by the component's state). Use `onActiveItemChange`\nto listen for updates.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activeItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L20",
          "inheritedFrom": "IListItemsProps.activeItem",
          "type": "T | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>The uncontrolled default selected item.\nThis prop is ignored if <code>selectedItem</code> is used to control the state.</p>\n"
            ],
            "contentsRaw": "The uncontrolled default selected item.\nThis prop is ignored if `selectedItem` is used to control the state.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/suggest.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultSelectedItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L45",
          "type": "T"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when query is empty.\nIf omitted, all items will be rendered (or result of <code>itemListPredicate</code> with empty query).\nIf explicit <code>null</code>, nothing will be rendered when query is empty.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when query is empty.\nIf omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\nIf explicit `null`, nothing will be rendered when query is empty.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "initialContent",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L73",
          "inheritedFrom": "IListItemsProps.initialContent",
          "type": "React.ReactNode | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to the query <code>InputGroup</code>. To control this input, use\n<code>query</code> and <code>onQueryChange</code> instead of <code>inputProps.value</code> and\n<code>inputProps.onChange</code>.</p>\n"
            ],
            "contentsRaw": "Props to spread to the query `InputGroup`. To control this input, use\n`query` and `onQueryChange` instead of `inputProps.value` and\n`inputProps.onChange`.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/suggest.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L36",
          "type": "IInputGroupProps & HTMLInputProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer to transform an item into a string for the input value.</p>\n"
            ],
            "contentsRaw": "Custom renderer to transform an item into a string for the input value.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/suggest.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputValueRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L39",
          "type": "(item: T) => string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.</p>\n"
            ],
            "contentsRaw": "Determine if the given item is disabled. Provide a callback function, or\nsimply provide the name of a boolean property on the item that exposes\nits disabled state.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L30",
          "inheritedFrom": "IListItemsProps.itemDisabled",
          "type": "keyof T | (item: T, index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of entire <code>items</code> array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)</p>\n<p>If <code>itemPredicate</code> is also defined, this prop takes priority and the other will be ignored.</p>\n"
            ],
            "contentsRaw": "Customize querying of entire `items` array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)\n\nIf `itemPredicate` is also defined, this prop takes priority and the other will be ignored.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L39",
          "inheritedFrom": "IListItemsProps.itemListPredicate",
          "type": "ItemListPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for the contents of the dropdown.</p>\n<p>The default implementation invokes <code>itemRenderer</code> for each item that passes the predicate\nand wraps them all in a <code>Menu</code> element. If the query is empty then <code>initialContent</code> is returned,\nand if there are no items that match the predicate then <code>noResults</code> is returned.</p>\n"
            ],
            "contentsRaw": "Custom renderer for the contents of the dropdown.\n\nThe default implementation invokes `itemRenderer` for each item that passes the predicate\nand wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\nand if there are no items that match the predicate then `noResults` is returned.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemListRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L64",
          "inheritedFrom": "IListItemsProps.itemListRenderer",
          "type": "ItemListRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Customize querying of individual items. Return <code>true</code> to keep the item, <code>false</code> to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use <code>itemListPredicate</code> to operate once on the entire array.</p>\n<p>This prop is ignored if <code>itemListPredicate</code> is also defined.</p>\n"
            ],
            "contentsRaw": "Customize querying of individual items. Return `true` to keep the item, `false` to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use `itemListPredicate` to operate once on the entire array.\n\nThis prop is ignored if `itemListPredicate` is also defined.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemPredicate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L48",
          "inheritedFrom": "IListItemsProps.itemPredicate",
          "type": "ItemPredicate<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an <code>onClick</code> event handler that\nshould be attached to the returned element.</p>\n"
            ],
            "contentsRaw": "Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\nthis item is active (selected by keyboard arrows) and an `onClick` event handler that\nshould be attached to the returned element.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "itemRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L55",
          "inheritedFrom": "IListItemsProps.itemRenderer",
          "type": "ItemRenderer<T>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover should close after selecting an item.</p>\n"
            ],
            "contentsRaw": "Whether the popover should close after selecting an item.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/suggest.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "closeOnSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L29",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.</p>\n<p>This prop is ignored if a custom <code>itemListRenderer</code> is supplied.</p>\n"
            ],
            "contentsRaw": "React content to render when filtering items returns zero results.\nIf omitted, nothing will be rendered in this case.\n\nThis prop is ignored if a custom `itemListRenderer` is supplied.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "noResults",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L81",
          "inheritedFrom": "IListItemsProps.noResults",
          "type": "React.ReactNode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.</p>\n"
            ],
            "contentsRaw": "Invoked when user interaction should change the active item: arrow keys move it up/down\nin the list, selecting an item makes it active, and changing the query may reset it to\nthe first item in the list if it no longer matches the filter.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActiveItemChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L88",
          "inheritedFrom": "IListItemsProps.onActiveItemChange",
          "type": "(activeItem: T | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when an item from the list is selected,\ntypically by clicking or pressing <code>enter</code> key.</p>\n"
            ],
            "contentsRaw": "Callback invoked when an item from the list is selected,\ntypically by clicking or pressing `enter` key.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onItemSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L94",
          "inheritedFrom": "IListItemsProps.onItemSelect",
          "type": "(item: T, event?: SyntheticEvent<HTMLElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the query string changes.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the query string changes.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onQueryChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L99",
          "inheritedFrom": "IListItemsProps.onQueryChange",
          "type": "(query: string, event?: ChangeEvent<HTMLInputElement>) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the popover opens on key down or when the input is focused.</p>\n"
            ],
            "contentsRaw": "Whether the popover opens on key down or when the input is focused.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/suggest.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "openOnKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L58",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>Popover</code>. Note that <code>content</code> cannot be changed.</p>\n"
            ],
            "contentsRaw": "Props to spread to `Popover`. Note that `content` cannot be changed.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/suggest.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L61",
          "type": "Partial<IPopoverProps> & any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Query string passed to <code>itemListPredicate</code> or <code>itemPredicate</code> to filter items.\nThis value is controlled: its state must be managed externally by attaching an <code>onChange</code>\nhandler to the relevant element in your <code>renderer</code> implementation.</p>\n"
            ],
            "contentsRaw": "Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\nThis value is controlled: its state must be managed externally by attaching an `onChange`\nhandler to the relevant element in your `renderer` implementation.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "query",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L130",
          "inheritedFrom": "IListItemsProps.query",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>every\ntime the query changes</em> (via prop or by user input).</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _every\ntime the query changes_ (via prop or by user input).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnQuery",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L106",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.resetOnQuery",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the active item should be reset to the first matching item <em>when\nan item is selected</em>. The query will also be reset to the empty string.</p>\n"
            ],
            "contentsRaw": "Whether the active item should be reset to the first matching item _when\nan item is selected_. The query will also be reset to the empty string.",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resetOnSelect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L113",
          "defaultValue": "false",
          "inheritedFrom": "IListItemsProps.resetOnSelect",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When <code>activeItem</code> is controlled, whether the active item should <em>always</em>\nbe scrolled into view when the prop changes. If <code>false</code>, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n<code>activeItem</code> prop is omitted (uncontrolled behavior).</p>\n"
            ],
            "contentsRaw": "When `activeItem` is controlled, whether the active item should _always_\nbe scrolled into view when the prop changes. If `false`, only changes\nthat result from built-in interactions (clicking, querying, or using\narrow keys) will scroll the active item into view. Ignored if the\n`activeItem` prop is omitted (uncontrolled behavior).",
            "metadata": {}
          },
          "fileName": "../select/src/common/listItemsProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollToActiveItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/listItemsProps.ts#L123",
          "defaultValue": "true",
          "inheritedFrom": "IListItemsProps.scrollToActiveItem",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently selected item, or <code>null</code> to indicate that no item is selected.\nIf omitted, this prop will be uncontrolled (managed by the component&#39;s state).\nUse <code>onItemSelect</code> to listen for updates.</p>\n"
            ],
            "contentsRaw": "The currently selected item, or `null` to indicate that no item is selected.\nIf omitted, this prop will be uncontrolled (managed by the component's state).\nUse `onItemSelect` to listen for updates.",
            "metadata": {}
          },
          "fileName": "../select/src/components/select/suggest.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedItem",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/components/select/suggest.tsx#L52",
          "type": "T | null"
        }
      ]
    },
    "ILoadableContentProps": {
      "fileName": "../table/src/common/loadableContent.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ILoadableContentProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/loadableContent.tsx#L11",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If true, render a skeleton. Otherwise render the single, non-string child passed to this\ncomponent.</p>\n"
            ],
            "contentsRaw": "If true, render a skeleton. Otherwise render the single, non-string child passed to this\ncomponent.",
            "metadata": {}
          },
          "fileName": "../table/src/common/loadableContent.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/loadableContent.tsx#L16",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, show a skeleton of random width (25-75% cell width) when rendering the loading state.</p>\n"
            ],
            "contentsRaw": "If true, show a skeleton of random width (25-75% cell width) when rendering the loading state.",
            "metadata": {}
          },
          "fileName": "../table/src/common/loadableContent.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "variableLength",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/loadableContent.tsx#L22",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "ICellCoordinates": {
      "fileName": "../table/src/common/cell.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICellCoordinates",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/cell.ts#L7",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/cell.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "col",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/cell.ts#L8",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/cell.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "row",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/cell.ts#L9",
          "type": "number"
        }
      ]
    },
    "IFocusedCellCoordinates": {
      "fileName": "../table/src/common/cell.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IFocusedCellCoordinates",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/cell.ts#L12",
      "extends": [
        "ICellCoordinates"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/cell.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "col",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/cell.ts#L8",
          "inheritedFrom": "ICellCoordinates.col",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/cell.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusSelectionIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/cell.ts#L13",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/cell.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "row",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/cell.ts#L9",
          "inheritedFrom": "ICellCoordinates.row",
          "type": "number"
        }
      ]
    },
    "IStyledRegionGroup": {
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IStyledRegionGroup",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L72",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "className",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L73",
          "type": "string"
        },
        {
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "regions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L74",
          "type": "IRegion[]"
        }
      ]
    },
    "IRegion": {
      "documentation": {
        "contents": [
          {
            "tag": "see",
            "value": "Regions.getRegionCardinality for more about the format of this object."
          }
        ],
        "contentsRaw": "@see Regions.getRegionCardinality for more about the format of this object.",
        "metadata": {}
      },
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRegion",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L90",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The first and last column indices in the region, inclusive and\nzero-indexed. If <code>cols</code> is <code>null</code>, then all columns are understood to be\nincluded in the region.</p>\n"
            ],
            "contentsRaw": "The first and last column indices in the region, inclusive and\nzero-indexed. If `cols` is `null`, then all columns are understood to be\nincluded in the region.",
            "metadata": {}
          },
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cols",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L103",
          "type": "ICellInterval | null"
        },
        {
          "documentation": {
            "contents": [
              "<p>The first and last row indices in the region, inclusive and zero-indexed.\nIf <code>rows</code> is <code>null</code>, then all rows are understood to be included in the\nregion.</p>\n"
            ],
            "contentsRaw": "The first and last row indices in the region, inclusive and zero-indexed.\nIf `rows` is `null`, then all rows are understood to be included in the\nregion.",
            "metadata": {}
          },
          "fileName": "../table/src/regions.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rows",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L96",
          "type": "ICellInterval | null"
        }
      ]
    },
    "IRowIndices": {
      "fileName": "../table/src/common/grid.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRowIndices",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L18",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L20",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L19",
          "type": "number"
        }
      ]
    },
    "IColumnIndices": {
      "fileName": "../table/src/common/grid.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IColumnIndices",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L23",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L25",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L24",
          "type": "number"
        }
      ]
    },
    "ILocator": {
      "fileName": "../table/src/locator.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ILocator",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/locator.ts#L12",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Locates a cell&#39;s row and column index given the client X\ncoordinate. Returns -1 if the coordinate is not over a table cell.</p>\n"
            ],
            "contentsRaw": "Locates a cell's row and column index given the client X\ncoordinate. Returns -1 if the coordinate is not over a table cell.",
            "metadata": {}
          },
          "fileName": "../table/src/locator.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "convertPointToCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/locator.ts#L45",
          "type": "(clientX: number, clientY: number) => "
        },
        {
          "documentation": {
            "contents": [
              "<p>Locates a column&#39;s index given the client X coordinate. Returns -1 if\nthe coordinate is not over a column.\nIf <code>useMidpoint</code> is <code>true</code>, returns the index of the column whose left\nedge is closest, splitting on the midpoint of each column.</p>\n"
            ],
            "contentsRaw": "Locates a column's index given the client X coordinate. Returns -1 if\nthe coordinate is not over a column.\nIf `useMidpoint` is `true`, returns the index of the column whose left\nedge is closest, splitting on the midpoint of each column.",
            "metadata": {}
          },
          "fileName": "../table/src/locator.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "convertPointToColumn",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/locator.ts#L31",
          "type": "(clientX: number, useMidpoint?: boolean) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Locates a row&#39;s index given the client Y coordinate. Returns -1 if\nthe coordinate is not over a row.\nIf <code>useMidpoint</code> is <code>true</code>, returns the index of the row whose top\nedge is closest, splitting on the midpoint of each row.</p>\n"
            ],
            "contentsRaw": "Locates a row's index given the client Y coordinate. Returns -1 if\nthe coordinate is not over a row.\nIf `useMidpoint` is `true`, returns the index of the row whose top\nedge is closest, splitting on the midpoint of each row.",
            "metadata": {}
          },
          "fileName": "../table/src/locator.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "convertPointToRow",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/locator.ts#L39",
          "type": "(clientY: number, useMidpoint?: boolean) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns the height of the tallest cell in a given column -- specifically,\ntallest as in how tall the cell would have to be to display all the content in it</p>\n"
            ],
            "contentsRaw": "Returns the height of the tallest cell in a given column -- specifically,\ntallest as in how tall the cell would have to be to display all the content in it",
            "metadata": {}
          },
          "fileName": "../table/src/locator.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getTallestVisibleCellInColumn",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/locator.ts#L23",
          "type": "(columnIndex: number) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns the width that a column must be to contain all the content of\nits cells without truncating or wrapping.</p>\n"
            ],
            "contentsRaw": "Returns the width that a column must be to contain all the content of\nits cells without truncating or wrapping.",
            "metadata": {}
          },
          "fileName": "../table/src/locator.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getWidestVisibleCellInColumn",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/locator.ts#L17",
          "type": "(columnIndex: number) => number"
        }
      ]
    },
    "ITrucatedFormateMeasureByApproximateOptions": {
      "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITrucatedFormateMeasureByApproximateOptions",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L29",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Approximate character width (in pixels), used to determine whether to display the popover in approx truncation mode.\nThe default value should work for normal table styles,\nbut should be changed as necessary if the fonts or styles are changed significantly.</p>\n"
            ],
            "contentsRaw": "Approximate character width (in pixels), used to determine whether to display the popover in approx truncation mode.\nThe default value should work for normal table styles,\nbut should be changed as necessary if the fonts or styles are changed significantly.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "approximateCharWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L36",
          "defaultValue": "8",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Approximate line height (in pixels), used to determine whether to display the popover in approx truncation mode.\nThe default value should work for normal table styles, but should be changed if the fonts or styles are changed significantly.</p>\n"
            ],
            "contentsRaw": "Approximate line height (in pixels), used to determine whether to display the popover in approx truncation mode.\nThe default value should work for normal table styles, but should be changed if the fonts or styles are changed significantly.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "approximateLineHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L43",
          "defaultValue": "18",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Total horizonal cell padding (both sides), used to determine whether to display the popover in approx truncation mode.\nThe default value should work for normal table styles,\nbut should be changed as necessary if the fonts or styles are changed significantly.</p>\n"
            ],
            "contentsRaw": "Total horizonal cell padding (both sides), used to determine whether to display the popover in approx truncation mode.\nThe default value should work for normal table styles,\nbut should be changed as necessary if the fonts or styles are changed significantly.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cellHorizontalPadding",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L51",
          "defaultValue": "20",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of buffer lines desired, used to determine whether to display the popover in approx truncation mode.\nBuffer lines are extra lines at the bottom of the cell that space is made for, to make sure that the cell text will fit\nafter the math calculates how many lines the text is expected to take.\nThe default value should work for normal table styles,\nbut should be changed as necessary if the fonts or styles are changed significantly.</p>\n"
            ],
            "contentsRaw": "Number of buffer lines desired, used to determine whether to display the popover in approx truncation mode.\nBuffer lines are extra lines at the bottom of the cell that space is made for, to make sure that the cell text will fit\nafter the math calculates how many lines the text is expected to take.\nThe default value should work for normal table styles,\nbut should be changed as necessary if the fonts or styles are changed significantly.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numBufferLines",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L61",
          "defaultValue": "0",
          "type": "number"
        }
      ]
    },
    "ITruncatedFormatProps": {
      "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITruncatedFormatProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L64",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L65",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Should the component keep track of the truncation state of the string content. If true, the\nvalue of <code>truncateLength</code> is ignored. When combined with a <code>showPopover</code> value of\n<code>WHEN_TRUNCATED</code>, popovers will only render when necessary.</p>\n"
            ],
            "contentsRaw": "Should the component keep track of the truncation state of the string content. If true, the\nvalue of `truncateLength` is ignored. When combined with a `showPopover` value of\n`WHEN_TRUNCATED`, popovers will only render when necessary.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "detectTruncation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L73",
          "defaultValue": "false;",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Values to use for character width, line height, cell padding, and buffer lines desired, when using approximate truncation.\nThese values are used to guess at the size of the text and determine if the popover should be drawn. They should work well\nenough for default table styles, but may need to be overridden for more accuracy if the default styles or font size, etc\nare changed.</p>\n"
            ],
            "contentsRaw": "Values to use for character width, line height, cell padding, and buffer lines desired, when using approximate truncation.\nThese values are used to guess at the size of the text and determine if the popover should be drawn. They should work well\nenough for default table styles, but may need to be overridden for more accuracy if the default styles or font size, etc\nare changed.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "measureByApproxOptions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L81",
          "type": "ITrucatedFormateMeasureByApproximateOptions"
        },
        {
          "documentation": {
            "contents": [
              "<p>Height of the parent cell. Used by shouldComponentUpdate only</p>\n"
            ],
            "contentsRaw": "Height of the parent cell. Used by shouldComponentUpdate only",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parentCellHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L86",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Width of the parent cell. Used by shouldComponentUpdate only</p>\n"
            ],
            "contentsRaw": "Width of the parent cell. Used by shouldComponentUpdate only",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parentCellWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L91",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Sets the popover content style to <code>white-space: pre</code> if <code>true</code> or\n<code>white-space: normal</code> if <code>false</code>.</p>\n"
            ],
            "contentsRaw": "Sets the popover content style to `white-space: pre` if `true` or\n`white-space: normal` if `false`.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preformatted",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L98",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Configures when the popover is shown with the <code>TruncatedPopoverMode</code> enum.</p>\n<p>The enum values are:</p>\n<ul>\n<li><code>ALWAYS</code>: show the popover.</li>\n<li><code>NEVER</code>: don&#39;t show the popover.</li>\n<li><code>WHEN_TRUNCATED</code>: show the popover only when the text is truncated (default).</li>\n<li><code>WHEN_TRUNCATED_APPROX</code>: show the popover only when the text is trunctated, but use\na formula to calculate this based on text length, which is faster but less accurate.</li>\n</ul>\n"
            ],
            "contentsRaw": "Configures when the popover is shown with the `TruncatedPopoverMode` enum.\n\nThe enum values are:\n- `ALWAYS`: show the popover.\n- `NEVER`: don't show the popover.\n- `WHEN_TRUNCATED`: show the popover only when the text is truncated (default).\n- `WHEN_TRUNCATED_APPROX`: show the popover only when the text is trunctated, but use\n  a formula to calculate this based on text length, which is faster but less accurate.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showPopover",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L111",
          "defaultValue": "WHEN_TRUNCATED",
          "type": "TruncatedPopoverMode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of characters that are displayed before being truncated and appended with the\n<code>truncationSuffix</code> prop. A value of 0 will disable truncation. This prop is ignored if\n<code>detectTruncation</code> is <code>true</code>.</p>\n"
            ],
            "contentsRaw": "Number of characters that are displayed before being truncated and appended with the\n`truncationSuffix` prop. A value of 0 will disable truncation. This prop is ignored if\n`detectTruncation` is `true`.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "truncateLength",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L119",
          "defaultValue": "2000",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The string that is appended to the display string if it is truncated.</p>\n"
            ],
            "contentsRaw": "The string that is appended to the display string if it is truncated.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "truncationSuffix",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L125",
          "defaultValue": "\"...\"",
          "type": "string"
        }
      ]
    },
    "IJSONFormatProps": {
      "fileName": "../table/src/cell/formats/jsonFormat.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IJSONFormatProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/jsonFormat.tsx#L14",
      "extends": [
        "ITruncatedFormatProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Width of the parent cell. Used by shouldComponentUpdate only</p>\n"
            ],
            "contentsRaw": "Width of the parent cell. Used by shouldComponentUpdate only",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parentCellWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L91",
          "inheritedFrom": "ITruncatedFormatProps.parentCellWidth",
          "type": "number"
        },
        {
          "fileName": "../table/src/cell/formats/jsonFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/jsonFormat.tsx#L15",
          "type": "any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Values to use for character width, line height, cell padding, and buffer lines desired, when using approximate truncation.\nThese values are used to guess at the size of the text and determine if the popover should be drawn. They should work well\nenough for default table styles, but may need to be overridden for more accuracy if the default styles or font size, etc\nare changed.</p>\n"
            ],
            "contentsRaw": "Values to use for character width, line height, cell padding, and buffer lines desired, when using approximate truncation.\nThese values are used to guess at the size of the text and determine if the popover should be drawn. They should work well\nenough for default table styles, but may need to be overridden for more accuracy if the default styles or font size, etc\nare changed.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "measureByApproxOptions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L81",
          "inheritedFrom": "ITruncatedFormatProps.measureByApproxOptions",
          "type": "ITrucatedFormateMeasureByApproximateOptions"
        },
        {
          "documentation": {
            "contents": [
              "<p>By default, we omit stringifying native JavaScript strings since\n<code>JSON.stringify</code> awkwardly adds double-quotes to the display value.\nThis behavior can be turned off by setting this boolean to <code>false</code>.</p>\n"
            ],
            "contentsRaw": "By default, we omit stringifying native JavaScript strings since\n`JSON.stringify` awkwardly adds double-quotes to the display value.\nThis behavior can be turned off by setting this boolean to `false`.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/jsonFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "omitQuotesOnStrings",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/jsonFormat.tsx#L23",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Height of the parent cell. Used by shouldComponentUpdate only</p>\n"
            ],
            "contentsRaw": "Height of the parent cell. Used by shouldComponentUpdate only",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "parentCellHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L86",
          "inheritedFrom": "ITruncatedFormatProps.parentCellHeight",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Should the component keep track of the truncation state of the string content. If true, the\nvalue of <code>truncateLength</code> is ignored. When combined with a <code>showPopover</code> value of\n<code>WHEN_TRUNCATED</code>, popovers will only render when necessary.</p>\n"
            ],
            "contentsRaw": "Should the component keep track of the truncation state of the string content. If true, the\nvalue of `truncateLength` is ignored. When combined with a `showPopover` value of\n`WHEN_TRUNCATED`, popovers will only render when necessary.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "detectTruncation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L73",
          "defaultValue": "false;",
          "inheritedFrom": "ITruncatedFormatProps.detectTruncation",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Sets the popover content style to <code>white-space: pre</code> if <code>true</code> or\n<code>white-space: normal</code> if <code>false</code>.</p>\n"
            ],
            "contentsRaw": "Sets the popover content style to `white-space: pre` if `true` or\n`white-space: normal` if `false`.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preformatted",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L98",
          "defaultValue": "false",
          "inheritedFrom": "ITruncatedFormatProps.preformatted",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Configures when the popover is shown with the <code>TruncatedPopoverMode</code> enum.</p>\n<p>The enum values are:</p>\n<ul>\n<li><code>ALWAYS</code>: show the popover.</li>\n<li><code>NEVER</code>: don&#39;t show the popover.</li>\n<li><code>WHEN_TRUNCATED</code>: show the popover only when the text is truncated (default).</li>\n<li><code>WHEN_TRUNCATED_APPROX</code>: show the popover only when the text is trunctated, but use\na formula to calculate this based on text length, which is faster but less accurate.</li>\n</ul>\n"
            ],
            "contentsRaw": "Configures when the popover is shown with the `TruncatedPopoverMode` enum.\n\nThe enum values are:\n- `ALWAYS`: show the popover.\n- `NEVER`: don't show the popover.\n- `WHEN_TRUNCATED`: show the popover only when the text is truncated (default).\n- `WHEN_TRUNCATED_APPROX`: show the popover only when the text is trunctated, but use\n  a formula to calculate this based on text length, which is faster but less accurate.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showPopover",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L111",
          "defaultValue": "WHEN_TRUNCATED",
          "inheritedFrom": "ITruncatedFormatProps.showPopover",
          "type": "TruncatedPopoverMode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Optionally specify the stringify method. Default is <code>JSON.stringify</code>\nwith 2-space indentation.</p>\n"
            ],
            "contentsRaw": "Optionally specify the stringify method. Default is `JSON.stringify`\nwith 2-space indentation.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/jsonFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stringify",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/jsonFormat.tsx#L29",
          "type": "(obj: any) => string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of characters that are displayed before being truncated and appended with the\n<code>truncationSuffix</code> prop. A value of 0 will disable truncation. This prop is ignored if\n<code>detectTruncation</code> is <code>true</code>.</p>\n"
            ],
            "contentsRaw": "Number of characters that are displayed before being truncated and appended with the\n`truncationSuffix` prop. A value of 0 will disable truncation. This prop is ignored if\n`detectTruncation` is `true`.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "truncateLength",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L119",
          "defaultValue": "2000",
          "inheritedFrom": "ITruncatedFormatProps.truncateLength",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The string that is appended to the display string if it is truncated.</p>\n"
            ],
            "contentsRaw": "The string that is appended to the display string if it is truncated.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/formats/truncatedFormat.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "truncationSuffix",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/formats/truncatedFormat.tsx#L125",
          "defaultValue": "\"...\"",
          "inheritedFrom": "ITruncatedFormatProps.truncationSuffix",
          "type": "string"
        }
      ]
    },
    "ICellProps": {
      "fileName": "../table/src/cell/cell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICellProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L22",
      "extends": [
        "any",
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the cell is focused and a key is released.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the cell is focused and a key is released.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyUp",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L85",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A ref handle to capture the outer div of this cell. Used internally.</p>\n"
            ],
            "contentsRaw": "A ref handle to capture the outer div of this cell. Used internally.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cellRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L95",
          "type": "(ref: HTMLElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the cell will be rendered above overlay layers to enable mouse\ninteractions within the cell.</p>\n"
            ],
            "contentsRaw": "If `true`, the cell will be rendered above overlay layers to enable mouse\ninteractions within the cell.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L38",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "key",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L23",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional native tooltip that is displayed on hover.\nIf <code>true</code>, content will be replaced with a fixed-height skeleton.</p>\n"
            ],
            "contentsRaw": "An optional native tooltip that is displayed on hover.\nIf `true`, content will be replaced with a fixed-height skeleton.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L45",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the cell is focused and a key is pressed down.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the cell is focused and a key is pressed down.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L80",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when a character-key is pressed.</p>\n"
            ],
            "contentsRaw": "Callback invoked when a character-key is pressed.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyPress",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L90",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>The column index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.</p>\n"
            ],
            "contentsRaw": "The column index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L31",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The row index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.</p>\n"
            ],
            "contentsRaw": "The row index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L51",
          "type": "number"
        },
        {
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L25",
          "type": "CSSProperties"
        },
        {
          "documentation": {
            "contents": [
              "<p>Allows for setting a tab index on the cell, so the cell can be browser-focusable.</p>\n"
            ],
            "contentsRaw": "Allows for setting a tab index on the cell, so the cell can be browser-focusable.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tabIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L75",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional native tooltip that is displayed on hover.</p>\n"
            ],
            "contentsRaw": "An optional native tooltip that is displayed on hover.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tooltip",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L56",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the cell contents will be wrapped in a <code>div</code> with\nstyling that will prevent the content from overflowing the cell.</p>\n"
            ],
            "contentsRaw": "If `true`, the cell contents will be wrapped in a `div` with\nstyling that will prevent the content from overflowing the cell.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "truncated",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L63",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the cell contents will be wrapped in a <code>div</code> with\nstyling that will cause text to wrap, rather than displaying it on a single line.</p>\n"
            ],
            "contentsRaw": "If `true`, the cell contents will be wrapped in a `div` with\nstyling that will cause text to wrap, rather than displaying it on a single line.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "wrapText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L70",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "ICoordinateData": {
      "documentation": {
        "contents": [
          "<p>Various useful coordinate values are pre-computed for you and supplied to\nonDragMove and onDragEnd callbacks.</p>\n"
        ],
        "contentsRaw": "Various useful coordinate values are pre-computed for you and supplied to\nonDragMove and onDragEnd callbacks.",
        "metadata": {}
      },
      "fileName": "../table/src/interactions/draggable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICoordinateData",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L19",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The client coordinates where the interaction was activated.</p>\n"
            ],
            "contentsRaw": "The client coordinates where the interaction was activated.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "activation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L23",
          "type": "IClientCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The client coordinates of the current mouse event.</p>\n"
            ],
            "contentsRaw": "The client coordinates of the current mouse event.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "current",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L28",
          "type": "IClientCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The difference between current and last client coordinates.</p>\n"
            ],
            "contentsRaw": "The difference between current and last client coordinates.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "delta",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L33",
          "type": "IClientCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The client coordinates of the previous mouse event.</p>\n"
            ],
            "contentsRaw": "The client coordinates of the previous mouse event.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "last",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L38",
          "type": "IClientCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The difference between current and activation client coordinates.</p>\n"
            ],
            "contentsRaw": "The difference between current and activation client coordinates.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "offset",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L43",
          "type": "IClientCoordinates"
        }
      ]
    },
    "IDragHandler": {
      "fileName": "../table/src/interactions/draggable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDragHandler",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L46",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Called when the mouse is pressed down. Drag and click operations may\nbe cancelled at this point by returning false from this method.</p>\n"
            ],
            "contentsRaw": "Called when the mouse is pressed down. Drag and click operations may\nbe cancelled at this point by returning false from this method.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActivate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L51",
          "type": "(event: MouseEvent) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the mouse is released iff the mouse was NOT dragged after\nactivation.</p>\n<p>This will be called asynchronously if <code>onDoubleClick</code> is defined. See\nthat callback for more details.</p>\n"
            ],
            "contentsRaw": "Called when the mouse is released iff the mouse was NOT dragged after\nactivation.\n\nThis will be called asynchronously if `onDoubleClick` is defined. See\nthat callback for more details.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L73",
          "type": "(event: MouseEvent) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called iff there are two click events within the timeout\n<code>DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC</code>, which defaults to 500 msec.</p>\n<p>NOTE: Defining this callback requires that we wait to invoke the\n<code>onClick</code> callback until the timeout has expired and we are certain the\ninteraction was only a single click. If this callback is not defined,\nthe <code>onClick</code> callback will be invoked synchronously with the mouseup\nevent.</p>\n"
            ],
            "contentsRaw": "Called iff there are two click events within the timeout\n`DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC`, which defaults to 500 msec.\n\nNOTE: Defining this callback requires that we wait to invoke the\n`onClick` callback until the timeout has expired and we are certain the\ninteraction was only a single click. If this callback is not defined,\nthe `onClick` callback will be invoked synchronously with the mouseup\nevent.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDoubleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L85",
          "type": "(event: MouseEvent) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the mouse is released iff the mouse was dragged after\nactivation.</p>\n"
            ],
            "contentsRaw": "Called when the mouse is released iff the mouse was dragged after\nactivation.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDragEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L64",
          "type": "(event: MouseEvent, coords: ICoordinateData) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called every time the mouse is moved after activation and before the\nmouse is released. This method is also called on the last even when the\nmouse is released.</p>\n"
            ],
            "contentsRaw": "Called every time the mouse is moved after activation and before the\nmouse is released. This method is also called on the last even when the\nmouse is released.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDragMove",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L58",
          "type": "(event: MouseEvent, coords: ICoordinateData) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>This prevents mouse events from performing their default operation such\nas text selection.</p>\n"
            ],
            "contentsRaw": "This prevents mouse events from performing their default operation such\nas text selection.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preventDefault",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L92",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>This prevents the event from propagating up to parent elements.</p>\n"
            ],
            "contentsRaw": "This prevents the event from propagating up to parent elements.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stopPropagation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L98",
          "defaultValue": "false",
          "type": "boolean"
        }
      ]
    },
    "IDraggableProps": {
      "fileName": "../table/src/interactions/draggable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDraggableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L101",
      "extends": [
        "any",
        "IDragHandler"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Called when the mouse is pressed down. Drag and click operations may\nbe cancelled at this point by returning false from this method.</p>\n"
            ],
            "contentsRaw": "Called when the mouse is pressed down. Drag and click operations may\nbe cancelled at this point by returning false from this method.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onActivate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L51",
          "inheritedFrom": "IDragHandler.onActivate",
          "type": "(event: MouseEvent) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the mouse is released iff the mouse was NOT dragged after\nactivation.</p>\n<p>This will be called asynchronously if <code>onDoubleClick</code> is defined. See\nthat callback for more details.</p>\n"
            ],
            "contentsRaw": "Called when the mouse is released iff the mouse was NOT dragged after\nactivation.\n\nThis will be called asynchronously if `onDoubleClick` is defined. See\nthat callback for more details.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L73",
          "inheritedFrom": "IDragHandler.onClick",
          "type": "(event: MouseEvent) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called iff there are two click events within the timeout\n<code>DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC</code>, which defaults to 500 msec.</p>\n<p>NOTE: Defining this callback requires that we wait to invoke the\n<code>onClick</code> callback until the timeout has expired and we are certain the\ninteraction was only a single click. If this callback is not defined,\nthe <code>onClick</code> callback will be invoked synchronously with the mouseup\nevent.</p>\n"
            ],
            "contentsRaw": "Called iff there are two click events within the timeout\n`DragEvents.DOUBLE_CLICK_TIMEOUT_MSEC`, which defaults to 500 msec.\n\nNOTE: Defining this callback requires that we wait to invoke the\n`onClick` callback until the timeout has expired and we are certain the\ninteraction was only a single click. If this callback is not defined,\nthe `onClick` callback will be invoked synchronously with the mouseup\nevent.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDoubleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L85",
          "inheritedFrom": "IDragHandler.onDoubleClick",
          "type": "(event: MouseEvent) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called when the mouse is released iff the mouse was dragged after\nactivation.</p>\n"
            ],
            "contentsRaw": "Called when the mouse is released iff the mouse was dragged after\nactivation.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDragEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L64",
          "inheritedFrom": "IDragHandler.onDragEnd",
          "type": "(event: MouseEvent, coords: ICoordinateData) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Called every time the mouse is moved after activation and before the\nmouse is released. This method is also called on the last even when the\nmouse is released.</p>\n"
            ],
            "contentsRaw": "Called every time the mouse is moved after activation and before the\nmouse is released. This method is also called on the last even when the\nmouse is released.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDragMove",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L58",
          "inheritedFrom": "IDragHandler.onDragMove",
          "type": "(event: MouseEvent, coords: ICoordinateData) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>This prevents mouse events from performing their default operation such\nas text selection.</p>\n"
            ],
            "contentsRaw": "This prevents mouse events from performing their default operation such\nas text selection.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "preventDefault",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L92",
          "defaultValue": "true",
          "inheritedFrom": "IDragHandler.preventDefault",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>This prevents the event from propagating up to parent elements.</p>\n"
            ],
            "contentsRaw": "This prevents the event from propagating up to parent elements.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/draggable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "stopPropagation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L98",
          "defaultValue": "false",
          "inheritedFrom": "IDragHandler.stopPropagation",
          "type": "boolean"
        }
      ]
    },
    "IEditableCellProps": {
      "fileName": "../table/src/cell/editableCell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IEditableCellProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/editableCell.tsx#L22",
      "extends": [
        "ICellProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the cell is focused and a key is pressed down.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the cell is focused and a key is pressed down.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyDown",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L80",
          "inheritedFrom": "ICellProps.onKeyDown",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A ref handle to capture the outer div of this cell. Used internally.</p>\n"
            ],
            "contentsRaw": "A ref handle to capture the outer div of this cell. Used internally.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cellRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L95",
          "inheritedFrom": "ICellProps.cellRef",
          "type": "(ref: HTMLElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the cell will be rendered above overlay layers to enable mouse\ninteractions within the cell.</p>\n"
            ],
            "contentsRaw": "If `true`, the cell will be rendered above overlay layers to enable mouse\ninteractions within the cell.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "interactive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L38",
          "defaultValue": "false",
          "inheritedFrom": "ICellProps.interactive",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the given cell is the current active/focused cell.</p>\n"
            ],
            "contentsRaw": "Whether the given cell is the current active/focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/editableCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isFocused",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/editableCell.tsx#L26",
          "type": "boolean"
        },
        {
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "key",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L23",
          "inheritedFrom": "ICellProps.key",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional native tooltip that is displayed on hover.\nIf <code>true</code>, content will be replaced with a fixed-height skeleton.</p>\n"
            ],
            "contentsRaw": "An optional native tooltip that is displayed on hover.\nIf `true`, content will be replaced with a fixed-height skeleton.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L45",
          "defaultValue": "false",
          "inheritedFrom": "ICellProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A listener that is triggered if the user cancels the edit. This is\nimportant to listen to if you are doing anything with <code>onChange</code> events,\nsince you&#39;ll likely want to revert whatever changes you made. The\ncallback will also receive the row index and column index if they were\noriginally provided via props.</p>\n"
            ],
            "contentsRaw": "A listener that is triggered if the user cancels the edit. This is\nimportant to listen to if you are doing anything with `onChange` events,\nsince you'll likely want to revert whatever changes you made. The\ncallback will also receive the row index and column index if they were\noriginally provided via props.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/editableCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCancel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/editableCell.tsx#L41",
          "type": "(value: string, rowIndex?: number, columnIndex?: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A listener that is triggered as soon as the editable name is modified.\nThis can be due, for example, to keyboard input or the clipboard. The\ncallback will also receive the row index and column index if they were\noriginally provided via props.</p>\n"
            ],
            "contentsRaw": "A listener that is triggered as soon as the editable name is modified.\nThis can be due, for example, to keyboard input or the clipboard. The\ncallback will also receive the row index and column index if they were\noriginally provided via props.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/editableCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/editableCell.tsx#L49",
          "type": "(value: string, rowIndex?: number, columnIndex?: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A listener that is triggered once the editing is confirmed. This is\nusually due to the <code>return</code> (or <code>enter</code>) key press.\nThe callback will also receive the row index and column index if they\nwere originally provided via props.</p>\n"
            ],
            "contentsRaw": "A listener that is triggered once the editing is confirmed. This is\nusually due to the <code>return</code> (or <code>enter</code>) key press.\nThe callback will also receive the row index and column index if they\nwere originally provided via props.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/editableCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onConfirm",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/editableCell.tsx#L57",
          "type": "(value: string, rowIndex?: number, columnIndex?: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The column index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.</p>\n"
            ],
            "contentsRaw": "The column index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L31",
          "inheritedFrom": "ICellProps.columnIndex",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when a character-key is pressed.</p>\n"
            ],
            "contentsRaw": "Callback invoked when a character-key is pressed.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyPress",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L90",
          "inheritedFrom": "ICellProps.onKeyPress",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the cell is focused and a key is released.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the cell is focused and a key is released.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onKeyUp",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L85",
          "inheritedFrom": "ICellProps.onKeyUp",
          "type": "React.KeyboardEventHandler<HTMLElement>"
        },
        {
          "documentation": {
            "contents": [
              "<p>The row index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.</p>\n"
            ],
            "contentsRaw": "The row index of the cell. If provided, this will be passed as an argument to any callbacks\nwhen they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L51",
          "inheritedFrom": "ICellProps.rowIndex",
          "type": "number"
        },
        {
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L25",
          "inheritedFrom": "ICellProps.style",
          "type": "CSSProperties"
        },
        {
          "documentation": {
            "contents": [
              "<p>Allows for setting a tab index on the cell, so the cell can be browser-focusable.</p>\n"
            ],
            "contentsRaw": "Allows for setting a tab index on the cell, so the cell can be browser-focusable.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tabIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L75",
          "inheritedFrom": "ICellProps.tabIndex",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional native tooltip that is displayed on hover.</p>\n"
            ],
            "contentsRaw": "An optional native tooltip that is displayed on hover.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "tooltip",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L56",
          "inheritedFrom": "ICellProps.tooltip",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the cell contents will be wrapped in a <code>div</code> with\nstyling that will prevent the content from overflowing the cell.</p>\n"
            ],
            "contentsRaw": "If `true`, the cell contents will be wrapped in a `div` with\nstyling that will prevent the content from overflowing the cell.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "truncated",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L63",
          "defaultValue": "true",
          "inheritedFrom": "ICellProps.truncated",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The value displayed in the text box. Be sure to update this value when\nrendering this component after a confirmed change.</p>\n"
            ],
            "contentsRaw": "The value displayed in the text box. Be sure to update this value when\nrendering this component after a confirmed change.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/editableCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/editableCell.tsx#L32",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the cell contents will be wrapped in a <code>div</code> with\nstyling that will cause text to wrap, rather than displaying it on a single line.</p>\n"
            ],
            "contentsRaw": "If `true`, the cell contents will be wrapped in a `div` with\nstyling that will cause text to wrap, rather than displaying it on a single line.",
            "metadata": {}
          },
          "fileName": "../table/src/cell/cell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "wrapText",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L70",
          "defaultValue": "false",
          "inheritedFrom": "ICellProps.wrapText",
          "type": "boolean"
        }
      ]
    },
    "ILockableLayout": {
      "fileName": "../table/src/interactions/resizeHandle.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ILockableLayout",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L19",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onLayoutLock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L20",
          "type": "(isLayoutLocked?: boolean) => void"
        }
      ]
    },
    "IResizeHandleProps": {
      "fileName": "../table/src/interactions/resizeHandle.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IResizeHandleProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L23",
      "extends": [
        "any",
        "ILockableLayout"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user double clicks the resize handle</p>\n"
            ],
            "contentsRaw": "A callback that is called when the user double clicks the resize handle",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDoubleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L44",
          "type": "() => void"
        },
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onLayoutLock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L20",
          "inheritedFrom": "ILockableLayout.onLayoutLock",
          "type": "(isLayoutLocked?: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging the resize\nhandle.</p>\n",
              {
                "tag": "param",
                "value": "is the difference between the initial and final coordinates"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging the resize\nhandle.\n\n@param is the difference between the initial and final coordinates",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResizeEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L39",
          "type": "(offset: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging the resize\nhandle.</p>\n",
              {
                "tag": "param",
                "value": "is the difference between the initial and current coordinates"
              },
              {
                "tag": "param",
                "value": "is the difference between this and the previous offset"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging the resize\nhandle.\n\n@param is the difference between the initial and current coordinates\n@param is the difference between this and the previous offset",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResizeMove",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L31",
          "type": "(offset: number, delta: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An enum value to indicate the orientation of the resize handle.</p>\n"
            ],
            "contentsRaw": "An enum value to indicate the orientation of the resize handle.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "orientation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L49",
          "type": "Orientation"
        }
      ]
    },
    "IResizableProps": {
      "fileName": "../table/src/interactions/resizable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IResizableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L14",
      "extends": [
        "any",
        "ILockableLayout"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the resize interaction for the column.</p>\n"
            ],
            "contentsRaw": "Enables/disables the resize interaction for the column.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isResizable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L19",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The optional maximum width of the column.</p>\n"
            ],
            "contentsRaw": "The optional maximum width of the column.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L24",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The optional minimum width of the column.</p>\n"
            ],
            "contentsRaw": "The optional minimum width of the column.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L29",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user double clicks the resize handle</p>\n"
            ],
            "contentsRaw": "A callback that is called when the user double clicks the resize handle",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onDoubleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L50",
          "type": "() => void"
        },
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onLayoutLock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L20",
          "inheritedFrom": "ILockableLayout.onLayoutLock",
          "type": "(isLayoutLocked?: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging the resize\nhandle.</p>\n",
              {
                "tag": "param",
                "value": "is the final resized size"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging the resize\nhandle.\n\n@param is the final resized size",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResizeEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L45",
          "type": "(size: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging the resize\nhandle.</p>\n",
              {
                "tag": "param",
                "value": "is the resized size"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging the resize\nhandle.\n\n@param is the resized size",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSizeChanged",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L37",
          "type": "(size: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Determines how the resize handle is oriented in the resizable child.</p>\n"
            ],
            "contentsRaw": "Determines how the resize handle is oriented in the resizable child.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "orientation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L55",
          "type": "Orientation"
        },
        {
          "documentation": {
            "contents": [
              "<p>The initial dimensional size.</p>\n"
            ],
            "contentsRaw": "The initial dimensional size.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/resizable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "size",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L60",
          "type": "number"
        }
      ]
    },
    "IColumnInteractionBarContextTypes": {
      "fileName": "../table/src/common/context.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IColumnInteractionBarContextTypes",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/context.ts#L9",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/context.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableColumnInteractionBar",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/context.ts#L10",
          "type": "boolean"
        }
      ]
    },
    "IHeaderCellProps": {
      "fileName": "../table/src/headers/headerCell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHeaderCellProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L14",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.</p>\n"
            ],
            "contentsRaw": "The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "index",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L19",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, will apply the active class to the header to indicate it is\npart of an external operation.</p>\n"
            ],
            "contentsRaw": "If `true`, will apply the active class to the header to indicate it is\npart of an external operation.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isActive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L25",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the row/column <code>name</code> will be replaced with a fixed-height skeleton, and the\n<code>resizeHandle</code> will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply <code>Classes.SKELETON</code> where appropriate.</p>\n"
            ],
            "contentsRaw": "If `true`, the row/column `name` will be replaced with a fixed-height skeleton, and the\n`resizeHandle` will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply `Classes.SKELETON` where appropriate.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L33",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that returns an element, like a <code>&lt;Menu&gt;</code>, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.</p>\n"
            ],
            "contentsRaw": "A callback that returns an element, like a `<Menu>`, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "menuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L45",
          "type": "(index?: number) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name displayed in the header of the row/column.</p>\n"
            ],
            "contentsRaw": "The name displayed in the header of the row/column.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L38",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ReorderHandle</code> React component that allows users to drag-reorder the column header.</p>\n"
            ],
            "contentsRaw": "A `ReorderHandle` React component that allows users to drag-reorder the column header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reorderHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L50",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ResizeHandle</code> React component that allows users to drag-resize the header.</p>\n"
            ],
            "contentsRaw": "A `ResizeHandle` React component that allows users to drag-resize the header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resizeHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L55",
          "type": "ResizeHandle"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles for the top level element.</p>\n"
            ],
            "contentsRaw": "CSS styles for the top level element.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L60",
          "type": "CSSProperties"
        }
      ]
    },
    "IInternalHeaderCellProps": {
      "fileName": "../table/src/headers/headerCell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IInternalHeaderCellProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L63",
      "extends": [
        "IHeaderCellProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.</p>\n"
            ],
            "contentsRaw": "The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "index",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L19",
          "inheritedFrom": "IHeaderCellProps.index",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, will apply the active class to the header to indicate it is\npart of an external operation.</p>\n"
            ],
            "contentsRaw": "If `true`, will apply the active class to the header to indicate it is\npart of an external operation.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isActive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L25",
          "inheritedFrom": "IHeaderCellProps.isActive",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Specifies if the cell is reorderable.</p>\n",
              {
                "tag": "internal",
                "value": "users should pass `isReorderable` to `ColumnHeader` or `RowHeader` instead"
              }
            ],
            "contentsRaw": "Specifies if the cell is reorderable.\n\n@internal users should pass `isReorderable` to `ColumnHeader` or `RowHeader` instead",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isReorderable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L68",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Specifies if the cell is selected.</p>\n"
            ],
            "contentsRaw": "Specifies if the cell is selected.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isSelected",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L73",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the row/column <code>name</code> will be replaced with a fixed-height skeleton, and the\n<code>resizeHandle</code> will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply <code>Classes.SKELETON</code> where appropriate.</p>\n"
            ],
            "contentsRaw": "If `true`, the row/column `name` will be replaced with a fixed-height skeleton, and the\n`resizeHandle` will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply `Classes.SKELETON` where appropriate.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L33",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderCellProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that returns an element, like a <code>&lt;Menu&gt;</code>, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.</p>\n"
            ],
            "contentsRaw": "A callback that returns an element, like a `<Menu>`, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "menuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L45",
          "inheritedFrom": "IHeaderCellProps.menuRenderer",
          "type": "(index?: number) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name displayed in the header of the row/column.</p>\n"
            ],
            "contentsRaw": "The name displayed in the header of the row/column.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L38",
          "inheritedFrom": "IHeaderCellProps.name",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ReorderHandle</code> React component that allows users to drag-reorder the column header.</p>\n"
            ],
            "contentsRaw": "A `ReorderHandle` React component that allows users to drag-reorder the column header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reorderHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L50",
          "inheritedFrom": "IHeaderCellProps.reorderHandle",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ResizeHandle</code> React component that allows users to drag-resize the header.</p>\n"
            ],
            "contentsRaw": "A `ResizeHandle` React component that allows users to drag-resize the header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resizeHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L55",
          "inheritedFrom": "IHeaderCellProps.resizeHandle",
          "type": "ResizeHandle"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles for the top level element.</p>\n"
            ],
            "contentsRaw": "CSS styles for the top level element.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L60",
          "inheritedFrom": "IHeaderCellProps.style",
          "type": "CSSProperties"
        }
      ]
    },
    "IColumnNameProps": {
      "fileName": "../table/src/headers/columnHeaderCell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IColumnNameProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L25",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The name displayed in the header of the column.</p>\n"
            ],
            "contentsRaw": "The name displayed in the header of the column.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L29",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback to override the default name rendering behavior. The default\nbehavior is to simply use the <code>ColumnHeaderCell</code>s name prop.</p>\n<p>This render callback can be used, for example, to provide a\n<code>EditableName</code> component for editing column names.</p>\n<p>If you define this callback, we recommend you also set\n<code>&lt;Table enableColumnInteractionBar={true}&gt;</code> to avoid issues with menus or selection.</p>\n<p>The callback will also receive the column index if an <code>index</code> was originally\nprovided via props.</p>\n"
            ],
            "contentsRaw": "A callback to override the default name rendering behavior. The default\nbehavior is to simply use the `ColumnHeaderCell`s name prop.\n\nThis render callback can be used, for example, to provide a\n`EditableName` component for editing column names.\n\nIf you define this callback, we recommend you also set\n`<Table enableColumnInteractionBar={true}>` to avoid issues with menus or selection.\n\nThe callback will also receive the column index if an `index` was originally\nprovided via props.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "nameRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L44",
          "type": "(name: string, index?: number) => ReactElement<IProps>"
        }
      ]
    },
    "IColumnHeaderCellProps": {
      "fileName": "../table/src/headers/columnHeaderCell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IColumnHeaderCellProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L47",
      "extends": [
        "IHeaderCellProps",
        "IColumnNameProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A callback that returns an element, like a <code>&lt;Menu&gt;</code>, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.</p>\n"
            ],
            "contentsRaw": "A callback that returns an element, like a `<Menu>`, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "menuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L45",
          "inheritedFrom": "IHeaderCellProps.menuRenderer",
          "type": "(index?: number) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>Specifies if the column is reorderable.</p>\n"
            ],
            "contentsRaw": "Specifies if the column is reorderable.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableColumnReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L51",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, will apply the active class to the header to indicate it is\npart of an external operation.</p>\n"
            ],
            "contentsRaw": "If `true`, will apply the active class to the header to indicate it is\npart of an external operation.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isActive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L25",
          "inheritedFrom": "IHeaderCellProps.isActive",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Specifies if the full column is part of a selection.</p>\n"
            ],
            "contentsRaw": "Specifies if the full column is part of a selection.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isColumnSelected",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L56",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the row/column <code>name</code> will be replaced with a fixed-height skeleton, and the\n<code>resizeHandle</code> will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply <code>Classes.SKELETON</code> where appropriate.</p>\n"
            ],
            "contentsRaw": "If `true`, the row/column `name` will be replaced with a fixed-height skeleton, and the\n`resizeHandle` will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply `Classes.SKELETON` where appropriate.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L33",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderCellProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The icon name or element for the header&#39;s menu button.</p>\n"
            ],
            "contentsRaw": "The icon name or element for the header's menu button.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "menuIcon",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L62",
          "defaultValue": "\"chevron-down\"",
          "type": "IconName | Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.</p>\n"
            ],
            "contentsRaw": "The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "index",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L19",
          "inheritedFrom": "IHeaderCellProps.index",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name displayed in the header of the row/column.</p>\n"
            ],
            "contentsRaw": "The name displayed in the header of the row/column.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L38",
          "inheritedFrom": "IHeaderCellProps.name",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback to override the default name rendering behavior. The default\nbehavior is to simply use the <code>ColumnHeaderCell</code>s name prop.</p>\n<p>This render callback can be used, for example, to provide a\n<code>EditableName</code> component for editing column names.</p>\n<p>If you define this callback, we recommend you also set\n<code>&lt;Table enableColumnInteractionBar={true}&gt;</code> to avoid issues with menus or selection.</p>\n<p>The callback will also receive the column index if an <code>index</code> was originally\nprovided via props.</p>\n"
            ],
            "contentsRaw": "A callback to override the default name rendering behavior. The default\nbehavior is to simply use the `ColumnHeaderCell`s name prop.\n\nThis render callback can be used, for example, to provide a\n`EditableName` component for editing column names.\n\nIf you define this callback, we recommend you also set\n`<Table enableColumnInteractionBar={true}>` to avoid issues with menus or selection.\n\nThe callback will also receive the column index if an `index` was originally\nprovided via props.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "nameRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L44",
          "inheritedFrom": "IColumnNameProps.nameRenderer",
          "type": "(name: string, index?: number) => ReactElement<IProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ReorderHandle</code> React component that allows users to drag-reorder the column header.</p>\n"
            ],
            "contentsRaw": "A `ReorderHandle` React component that allows users to drag-reorder the column header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reorderHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L50",
          "inheritedFrom": "IHeaderCellProps.reorderHandle",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ResizeHandle</code> React component that allows users to drag-resize the header.</p>\n"
            ],
            "contentsRaw": "A `ResizeHandle` React component that allows users to drag-resize the header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resizeHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L55",
          "inheritedFrom": "IHeaderCellProps.resizeHandle",
          "type": "ResizeHandle"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles for the top level element.</p>\n"
            ],
            "contentsRaw": "CSS styles for the top level element.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L60",
          "inheritedFrom": "IHeaderCellProps.style",
          "type": "CSSProperties"
        }
      ]
    },
    "IReorderableProps": {
      "fileName": "../table/src/interactions/reorderable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IReorderableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L14",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L44",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L31",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L22",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L38",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L50",
          "defaultValue": "[]",
          "type": "IRegion[]"
        }
      ]
    },
    "IDragReorderable": {
      "fileName": "../table/src/interactions/reorderable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDragReorderable",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L53",
      "extends": [
        "IReorderableProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Whether the reordering behavior is disabled.</p>\n"
            ],
            "contentsRaw": "Whether the reordering behavior is disabled.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L58",
          "defaultValue": "false",
          "type": "boolean | (event: MouseEvent) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that determines a <code>Region</code> for the single <code>MouseEvent</code>. If\nno valid region can be found, <code>null</code> may be returned.</p>\n"
            ],
            "contentsRaw": "A callback that determines a `Region` for the single `MouseEvent`. If\nno valid region can be found, `null` may be returned.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locateClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L64",
          "type": "(event: MouseEvent) => IRegion"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that determines the index at which to show the preview guide.\nThis is equivalent to the absolute index in the old ordering where the\nreordered element will move.</p>\n"
            ],
            "contentsRaw": "A callback that determines the index at which to show the preview guide.\nThis is equivalent to the absolute index in the old ordering where the\nreordered element will move.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locateDrag",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L71",
          "type": "(event: MouseEvent, coords: ICoordinateData) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L44",
          "inheritedFrom": "IReorderableProps.onFocusedCell",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L31",
          "inheritedFrom": "IReorderableProps.onReordered",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L22",
          "inheritedFrom": "IReorderableProps.onReordering",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L38",
          "inheritedFrom": "IReorderableProps.onSelection",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L50",
          "defaultValue": "[]",
          "inheritedFrom": "IReorderableProps.selectedRegions",
          "type": "IRegion[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that converts the provided index into a region. The returned\nregion will be used to update the current selection after drag-reordering.</p>\n"
            ],
            "contentsRaw": "A callback that converts the provided index into a region. The returned\nregion will be used to update the current selection after drag-reordering.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "toRegion",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L77",
          "type": "(index1: number, index2?: number) => IRegion"
        }
      ]
    },
    "ISelectableProps": {
      "fileName": "../table/src/interactions/selectable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ISelectableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L24",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L31",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused cell.</p>\n"
            ],
            "contentsRaw": "The currently focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L36",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user focuses something, this callback is called with new\nfocused cell coordinates. This should be considered the new focused cell\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user focuses something, this callback is called with new\nfocused cell coordinates. This should be considered the new focused cell\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L43",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user selects something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user selects something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L50",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.</p>\n"
            ],
            "contentsRaw": "An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelectionEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L57",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L73",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L63",
          "defaultValue": "[]",
          "type": "IRegion[]"
        }
      ]
    },
    "IDragSelectableProps": {
      "fileName": "../table/src/interactions/selectable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IDragSelectableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L76",
      "extends": [
        "ISelectableProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A callback that determines a <code>Region</code> for the <code>MouseEvent</code> and\ncoordinate data representing a drag. If no valid region can be found,\n<code>null</code> may be returned.</p>\n"
            ],
            "contentsRaw": "A callback that determines a `Region` for the `MouseEvent` and\ncoordinate data representing a drag. If no valid region can be found,\n`null` may be returned.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locateDrag",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L99",
          "type": "(event: MouseEvent, coords: ICoordinateData, returnEndOnly?: boolean) => IRegion"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether the selection behavior is disabled.</p>\n"
            ],
            "contentsRaw": "Whether the selection behavior is disabled.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L86",
          "defaultValue": "false",
          "type": "boolean | (event: MouseEvent) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused cell.</p>\n"
            ],
            "contentsRaw": "The currently focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L36",
          "inheritedFrom": "ISelectableProps.focusedCell",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>A list of CSS selectors that should <em>not</em> trigger selection when a <code>mousedown</code> occurs inside of them.</p>\n"
            ],
            "contentsRaw": "A list of CSS selectors that should _not_ trigger selection when a `mousedown` occurs inside of them.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ignoredSelectors",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L80",
          "type": "string[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that determines a <code>Region</code> for the single <code>MouseEvent</code>. If\nno valid region can be found, <code>null</code> may be returned.</p>\n"
            ],
            "contentsRaw": "A callback that determines a `Region` for the single `MouseEvent`. If\nno valid region can be found, `null` may be returned.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locateClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L92",
          "type": "(event: MouseEvent) => IRegion"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L31",
          "defaultValue": "false",
          "inheritedFrom": "ISelectableProps.enableMultipleSelection",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user focuses something, this callback is called with new\nfocused cell coordinates. This should be considered the new focused cell\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user focuses something, this callback is called with new\nfocused cell coordinates. This should be considered the new focused cell\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L43",
          "inheritedFrom": "ISelectableProps.onFocusedCell",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user selects something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user selects something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L50",
          "inheritedFrom": "ISelectableProps.onSelection",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.</p>\n"
            ],
            "contentsRaw": "An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelectionEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L57",
          "inheritedFrom": "ISelectableProps.onSelectionEnd",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L73",
          "inheritedFrom": "ISelectableProps.selectedRegionTransform",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L63",
          "defaultValue": "[]",
          "inheritedFrom": "ISelectableProps.selectedRegions",
          "type": "IRegion[]"
        }
      ]
    },
    "IHeaderProps": {
      "fileName": "../table/src/headers/header.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IHeaderProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L26",
      "extends": [
        "ILockableLayout",
        "IReorderableProps",
        "ISelectableProps"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onLayoutLock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L20",
          "inheritedFrom": "ILockableLayout.onLayoutLock",
          "type": "(isLayoutLocked?: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L31",
          "defaultValue": "false",
          "inheritedFrom": "ISelectableProps.enableMultipleSelection",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L36",
          "type": "Grid"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the reordering interaction.</p>\n",
              {
                "tag": "internal"
              }
            ],
            "contentsRaw": "Enables/disables the reordering interaction.\n\n@internal",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isReorderable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L43",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the resize interaction.</p>\n"
            ],
            "contentsRaw": "Enables/disables the resize interaction.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isResizable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L49",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, all header cells render their loading state except for those\nwho have their <code>loading</code> prop explicitly set to false.</p>\n"
            ],
            "contentsRaw": "If true, all header cells render their loading state except for those\nwho have their `loading` prop explicitly set to false.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L61",
          "defaultValue": "false;",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Locates the row/column/cell given a mouse event.</p>\n"
            ],
            "contentsRaw": "Locates the row/column/cell given a mouse event.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L54",
          "type": "ILocator"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L44",
          "inheritedFrom": "IReorderableProps.onFocusedCell",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused cell.</p>\n"
            ],
            "contentsRaw": "The currently focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L30",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L31",
          "inheritedFrom": "IReorderableProps.onReordered",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L22",
          "inheritedFrom": "IReorderableProps.onReordering",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body&#39;s overlay layer.</p>\n"
            ],
            "contentsRaw": "This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body's overlay layer.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResizeGuide",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L68",
          "type": "(guides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L38",
          "inheritedFrom": "IReorderableProps.onSelection",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.</p>\n"
            ],
            "contentsRaw": "An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelectionEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L57",
          "inheritedFrom": "ISelectableProps.onSelectionEnd",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L73",
          "inheritedFrom": "ISelectableProps.selectedRegionTransform",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L50",
          "defaultValue": "[]",
          "inheritedFrom": "IReorderableProps.selectedRegions",
          "type": "IRegion[]"
        }
      ]
    },
    "IInternalHeaderProps": {
      "documentation": {
        "contents": [
          "<p>These are additional props passed internally from ColumnHeader and RowHeader.\nThey don&#39;t need to be exposed to the outside world.</p>\n"
        ],
        "contentsRaw": "These are additional props passed internally from ColumnHeader and RowHeader.\nThey don't need to be exposed to the outside world.",
        "metadata": {}
      },
      "fileName": "../table/src/headers/header.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IInternalHeaderProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L75",
      "extends": [
        "IHeaderProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Returns true if the specified cell (and therefore the full column/row) is selected.</p>\n"
            ],
            "contentsRaw": "Returns true if the specified cell (and therefore the full column/row) is selected.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isCellSelected",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L183",
          "type": "(index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Converts a point on the screen to a row or column index in the table grid.</p>\n"
            ],
            "contentsRaw": "Converts a point on the screen to a row or column index in the table grid.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "convertPointToIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L133",
          "type": "(clientXOrY: number, useMidpoint?: boolean) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused cell.</p>\n"
            ],
            "contentsRaw": "The currently focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L30",
          "inheritedFrom": "IHeaderProps.focusedCell",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The cardinality of a fully selected region. Should be FULL_COLUMNS for column headers and\nFULL_ROWS for row headers.</p>\n"
            ],
            "contentsRaw": "The cardinality of a fully selected region. Should be FULL_COLUMNS for column headers and\nFULL_ROWS for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "fullRegionCardinality",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L80",
          "type": "RegionCardinality"
        },
        {
          "documentation": {
            "contents": [
              "<p>Provides any extrema classes for the provided index range in the table grid.</p>\n"
            ],
            "contentsRaw": "Provides any extrema classes for the provided index range in the table grid.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getCellExtremaClasses",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L138",
          "type": "(index: number, indexEnd: number) => string[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Provides the index class for the cell. Should be Classes.columnCellIndexClass for column\nheaders or Classes.rowCellIndexClass for row headers.</p>\n"
            ],
            "contentsRaw": "Provides the index class for the cell. Should be Classes.columnCellIndexClass for column\nheaders or Classes.rowCellIndexClass for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getCellIndexClass",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L144",
          "type": "(index: number) => string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns the size of the specified header cell in pixels. Corresponds to a width for column\nheaders and a height for row headers.</p>\n"
            ],
            "contentsRaw": "Returns the size of the specified header cell in pixels. Corresponds to a width for column\nheaders and a height for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getCellSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L150",
          "type": "(index: number) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns the relevant single coordinate from the provided client coordinates. Should return\nthe x coordinate for column headers and the y coordinate for row headers.</p>\n"
            ],
            "contentsRaw": "Returns the relevant single coordinate from the provided client coordinates. Should return\nthe x coordinate for column headers and the y coordinate for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getDragCoordinate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L156",
          "type": "(clientCoords: IClientCoordinates) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that returns the CSS index class for the specified index. Should be\nClasses.columnIndexClass for column headers and Classes.rowIndexClass for row headers.</p>\n"
            ],
            "contentsRaw": "A callback that returns the CSS index class for the specified index. Should be\nClasses.columnIndexClass for column headers and Classes.rowIndexClass for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getIndexClass",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L162",
          "type": "(index: number) => string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Given a mouse event, returns the relevant client coordinate (clientX or clientY). Should be\nclientX for column headers and clientY for row headers.</p>\n"
            ],
            "contentsRaw": "Given a mouse event, returns the relevant client coordinate (clientX or clientY). Should be\nclientX for column headers and clientY for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getMouseCoordinate",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L168",
          "type": "(event: MouseEvent) => number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders a ghost cell for the provided index.</p>\n"
            ],
            "contentsRaw": "A callback that renders a ghost cell for the provided index.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "ghostCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L193",
          "type": "(index: number, extremaClasses: string[]) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L36",
          "inheritedFrom": "IHeaderProps.grid",
          "type": "Grid"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback invoked when the user double-clicks a resize handle, if resizing is enabled.</p>\n"
            ],
            "contentsRaw": "An optional callback invoked when the user double-clicks a resize handle, if resizing is enabled.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleResizeDoubleClick",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L85",
          "type": "(index: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked when a resize interaction ends, if resizing is enabled.</p>\n"
            ],
            "contentsRaw": "Invoked when a resize interaction ends, if resizing is enabled.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleResizeEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L173",
          "type": "(index: number, size: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Invoked whenever the size changes during a resize interaction, if resizing is enabled.</p>\n"
            ],
            "contentsRaw": "Invoked whenever the size changes during a resize interaction, if resizing is enabled.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleSizeChanged",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L178",
          "type": "(index: number, size: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name of the header-cell prop specifying whether the header cell is reorderable or not.</p>\n"
            ],
            "contentsRaw": "The name of the header-cell prop specifying whether the header cell is reorderable or not.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "headerCellIsReorderablePropName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L90",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name of the header-cell prop specifying whether the header cell is selected or not.</p>\n"
            ],
            "contentsRaw": "The name of the header-cell prop specifying whether the header cell is selected or not.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "headerCellIsSelectedPropName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L95",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders a regular header cell at the provided index.</p>\n"
            ],
            "contentsRaw": "A callback that renders a regular header cell at the provided index.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "headerCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L198",
          "type": "(index: number) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>The highest cell index to render.</p>\n"
            ],
            "contentsRaw": "The highest cell index to render.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "indexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L100",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The lowest cell index to render.</p>\n"
            ],
            "contentsRaw": "The lowest cell index to render.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "indexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L105",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L31",
          "defaultValue": "false",
          "inheritedFrom": "ISelectableProps.enableMultipleSelection",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns true if the specified cell is at a ghost index.</p>\n"
            ],
            "contentsRaw": "Returns true if the specified cell is at a ghost index.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isGhostIndex",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L188",
          "type": "(index: number) => boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the reordering interaction.</p>\n",
              {
                "tag": "internal"
              }
            ],
            "contentsRaw": "Enables/disables the reordering interaction.\n\n@internal",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isReorderable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L43",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderProps.isReorderable",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the resize interaction.</p>\n"
            ],
            "contentsRaw": "Enables/disables the resize interaction.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isResizable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L49",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderProps.isResizable",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, all header cells render their loading state except for those\nwho have their <code>loading</code> prop explicitly set to false.</p>\n"
            ],
            "contentsRaw": "If true, all header cells render their loading state except for those\nwho have their `loading` prop explicitly set to false.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L61",
          "defaultValue": "false;",
          "inheritedFrom": "IHeaderProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Locates the row/column/cell given a mouse event.</p>\n"
            ],
            "contentsRaw": "Locates the row/column/cell given a mouse event.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L54",
          "inheritedFrom": "IHeaderProps.locator",
          "type": "ILocator"
        },
        {
          "documentation": {
            "contents": [
              "<p>The maximum permitted size of the header in pixels. Corresponds to a width for column headers and\na height for row headers.</p>\n"
            ],
            "contentsRaw": "The maximum permitted size of the header in pixels. Corresponds to a width for column headers and\na height for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L111",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The minimum permitted size of the header in pixels. Corresponds to a width for column headers and\na height for row headers.</p>\n"
            ],
            "contentsRaw": "The minimum permitted size of the header in pixels. Corresponds to a width for column headers and\na height for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minSize",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L117",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L44",
          "inheritedFrom": "IReorderableProps.onFocusedCell",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onLayoutLock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L20",
          "inheritedFrom": "ILockableLayout.onLayoutLock",
          "type": "(isLayoutLocked?: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L31",
          "inheritedFrom": "IReorderableProps.onReordered",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L22",
          "inheritedFrom": "IReorderableProps.onReordering",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body&#39;s overlay layer.</p>\n"
            ],
            "contentsRaw": "This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body's overlay layer.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResizeGuide",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L68",
          "inheritedFrom": "IHeaderProps.onResizeGuide",
          "type": "(guides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L38",
          "inheritedFrom": "IReorderableProps.onSelection",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.</p>\n"
            ],
            "contentsRaw": "An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelectionEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L57",
          "inheritedFrom": "ISelectableProps.onSelectionEnd",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>The orientation of the resize handle. Should be VERTICAL for column headers and HORIZONTAL\nfor row headers.</p>\n"
            ],
            "contentsRaw": "The orientation of the resize handle. Should be VERTICAL for column headers and HORIZONTAL\nfor row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resizeOrientation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L123",
          "type": "Orientation"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L73",
          "inheritedFrom": "ISelectableProps.selectedRegionTransform",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L128",
          "type": "IRegion[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Converts a range to a region. This should be Regions.column for column headers and\nRegions.row for row headers.</p>\n"
            ],
            "contentsRaw": "Converts a range to a region. This should be Regions.column for column headers and\nRegions.row for row headers.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "toRegion",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L204",
          "type": "(index1: number, index2?: number) => IRegion"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that wraps the rendered cell components in additional parent elements as needed.</p>\n"
            ],
            "contentsRaw": "A callback that wraps the rendered cell components in additional parent elements as needed.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "wrapCells",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L209",
          "type": "(cells: Array<ReactElement<any>>) => Element"
        }
      ]
    },
    "IColumnWidths": {
      "fileName": "../table/src/headers/columnHeader.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IColumnWidths",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L22",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L25",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L24",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L23",
          "type": "number"
        }
      ]
    },
    "IColumnHeaderProps": {
      "fileName": "../table/src/headers/columnHeader.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IColumnHeaderProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L28",
      "extends": [
        "IHeaderProps",
        "IColumnWidths",
        "IColumnIndices"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Ref handler that receives the HTML element that should be measured to\nindicate the fluid height of the column header.</p>\n"
            ],
            "contentsRaw": "Ref handler that receives the HTML element that should be measured to\nindicate the fluid height of the column header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "measurableElementRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L41",
          "type": "(ref: HTMLElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A IColumnHeaderRenderer that, for each <code>&lt;Column&gt;</code>, will delegate to:</p>\n<ol>\n<li>The <code>columnHeaderCellRenderer</code> method from the <code>&lt;Column&gt;</code></li>\n<li>A <code>&lt;ColumnHeaderCell&gt;</code> using the <code>name</code> prop from the <code>&lt;Column&gt;</code></li>\n<li>A <code>&lt;ColumnHeaderCell&gt;</code> with a <code>name</code> generated from <code>Utils.toBase26Alpha</code></li>\n</ol>\n"
            ],
            "contentsRaw": "A IColumnHeaderRenderer that, for each `<Column>`, will delegate to:\n1. The `columnHeaderCellRenderer` method from the `<Column>`\n2. A `<ColumnHeaderCell>` using the `name` prop from the `<Column>`\n3. A `<ColumnHeaderCell>` with a `name` generated from `Utils.toBase26Alpha`",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L35",
          "type": "IColumnHeaderRenderer"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L24",
          "inheritedFrom": "IColumnIndices.columnIndexStart",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L25",
          "inheritedFrom": "IColumnWidths.defaultColumnWidth",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L31",
          "defaultValue": "false",
          "inheritedFrom": "ISelectableProps.enableMultipleSelection",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused cell.</p>\n"
            ],
            "contentsRaw": "The currently focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L30",
          "inheritedFrom": "IHeaderProps.focusedCell",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L36",
          "inheritedFrom": "IHeaderProps.grid",
          "type": "Grid"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the reordering interaction.</p>\n",
              {
                "tag": "internal"
              }
            ],
            "contentsRaw": "Enables/disables the reordering interaction.\n\n@internal",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isReorderable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L43",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderProps.isReorderable",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the resize interaction.</p>\n"
            ],
            "contentsRaw": "Enables/disables the resize interaction.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isResizable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L49",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderProps.isResizable",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, all header cells render their loading state except for those\nwho have their <code>loading</code> prop explicitly set to false.</p>\n"
            ],
            "contentsRaw": "If true, all header cells render their loading state except for those\nwho have their `loading` prop explicitly set to false.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L61",
          "defaultValue": "false;",
          "inheritedFrom": "IHeaderProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Locates the row/column/cell given a mouse event.</p>\n"
            ],
            "contentsRaw": "Locates the row/column/cell given a mouse event.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L54",
          "inheritedFrom": "IHeaderProps.locator",
          "type": "ILocator"
        },
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L24",
          "inheritedFrom": "IColumnWidths.maxColumnWidth",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L25",
          "inheritedFrom": "IColumnIndices.columnIndexEnd",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L23",
          "inheritedFrom": "IColumnWidths.minColumnWidth",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback invoked when user is done resizing the column</p>\n"
            ],
            "contentsRaw": "A callback invoked when user is done resizing the column",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onColumnWidthChanged",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L46",
          "type": "IIndexedResizeCallback"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L44",
          "inheritedFrom": "IReorderableProps.onFocusedCell",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onLayoutLock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L20",
          "inheritedFrom": "ILockableLayout.onLayoutLock",
          "type": "(isLayoutLocked?: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L31",
          "inheritedFrom": "IReorderableProps.onReordered",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L22",
          "inheritedFrom": "IReorderableProps.onReordering",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body&#39;s overlay layer.</p>\n"
            ],
            "contentsRaw": "This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body's overlay layer.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResizeGuide",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L68",
          "inheritedFrom": "IHeaderProps.onResizeGuide",
          "type": "(guides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L38",
          "inheritedFrom": "IReorderableProps.onSelection",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.</p>\n"
            ],
            "contentsRaw": "An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelectionEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L57",
          "inheritedFrom": "ISelectableProps.onSelectionEnd",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L73",
          "inheritedFrom": "ISelectableProps.selectedRegionTransform",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L50",
          "defaultValue": "[]",
          "inheritedFrom": "IReorderableProps.selectedRegions",
          "type": "IRegion[]"
        }
      ]
    },
    "IColumnProps": {
      "fileName": "../table/src/column.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IColumnProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/column.tsx#L14",
      "extends": [
        "IColumnNameProps",
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>An instance of <code>ICellRenderer</code>, a function that takes a row and column\nindex, and returns a <code>Cell</code> React element.</p>\n"
            ],
            "contentsRaw": "An instance of `ICellRenderer`, a function that takes a row and column\nindex, and returns a `Cell` React element.",
            "metadata": {}
          },
          "fileName": "../table/src/column.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/column.tsx#L38",
          "type": "ICellRenderer"
        },
        {
          "documentation": {
            "contents": [
              "<p>An instance of <code>IColumnHeaderRenderer</code>, a function that takes a column\nindex and returns a <code>ColumnHeaderCell</code> React element.</p>\n"
            ],
            "contentsRaw": "An instance of `IColumnHeaderRenderer`, a function that takes a column\nindex and returns a `ColumnHeaderCell` React element.",
            "metadata": {}
          },
          "fileName": "../table/src/column.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnHeaderCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/column.tsx#L44",
          "type": "IColumnHeaderRenderer"
        },
        {
          "documentation": {
            "contents": [
              "<p>A unique ID, similar to React&#39;s <code>key</code>. This is used, for example, to\nmaintain the width of a column between re-ordering and rendering. If no\nIDs are provided, widths will be persisted across renders using a\ncolumn&#39;s index only. Columns widths can also be persisted outside the\n<code>Table</code> component, then passed in with the <code>columnWidths</code> prop.</p>\n"
            ],
            "contentsRaw": "A unique ID, similar to React's `key`. This is used, for example, to\nmaintain the width of a column between re-ordering and rendering. If no\nIDs are provided, widths will be persisted across renders using a\ncolumn's index only. Columns widths can also be persisted outside the\n`Table` component, then passed in with the `columnWidths` prop.",
            "metadata": {}
          },
          "fileName": "../table/src/column.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "id",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/column.tsx#L22",
          "type": "string | number"
        },
        {
          "documentation": {
            "contents": [
              "<p>Set this prop to specify whether to render the loading state of the\ncolumn header and cells in this column. Column-level <code>loadingOptions</code>\noverride <code>Table</code>-level <code>loadingOptions</code>. For example, if you set\n<code>loadingOptions=[ TableLoadingOption.CELLS ]</code> on <code>Table</code> and\n<code>loadingOptions=[ ColumnLoadingOption.HEADER ]</code> on a <code>Column</code>, the cells\nin that column will <em>not</em> show their loading state.</p>\n"
            ],
            "contentsRaw": "Set this prop to specify whether to render the loading state of the\ncolumn header and cells in this column. Column-level `loadingOptions`\noverride `Table`-level `loadingOptions`. For example, if you set\n`loadingOptions=[ TableLoadingOption.CELLS ]` on `Table` and\n`loadingOptions=[ ColumnLoadingOption.HEADER ]` on a `Column`, the cells\nin that column will _not_ show their loading state.",
            "metadata": {}
          },
          "fileName": "../table/src/column.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loadingOptions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/column.tsx#L32",
          "type": "ColumnLoadingOption[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name displayed in the header of the column.</p>\n"
            ],
            "contentsRaw": "The name displayed in the header of the column.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L29",
          "inheritedFrom": "IColumnNameProps.name",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback to override the default name rendering behavior. The default\nbehavior is to simply use the <code>ColumnHeaderCell</code>s name prop.</p>\n<p>This render callback can be used, for example, to provide a\n<code>EditableName</code> component for editing column names.</p>\n<p>If you define this callback, we recommend you also set\n<code>&lt;Table enableColumnInteractionBar={true}&gt;</code> to avoid issues with menus or selection.</p>\n<p>The callback will also receive the column index if an <code>index</code> was originally\nprovided via props.</p>\n"
            ],
            "contentsRaw": "A callback to override the default name rendering behavior. The default\nbehavior is to simply use the `ColumnHeaderCell`s name prop.\n\nThis render callback can be used, for example, to provide a\n`EditableName` component for editing column names.\n\nIf you define this callback, we recommend you also set\n`<Table enableColumnInteractionBar={true}>` to avoid issues with menus or selection.\n\nThe callback will also receive the column index if an `index` was originally\nprovided via props.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/columnHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "nameRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeaderCell.tsx#L44",
          "inheritedFrom": "IColumnNameProps.nameRenderer",
          "type": "(name: string, index?: number) => ReactElement<IProps>"
        }
      ]
    },
    "IMenuContext": {
      "fileName": "../table/src/interactions/menus/menuContext.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IMenuContext",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/menuContext.ts#L11",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Returns an array of <code>IRegion</code>s that represent the user-intended context\nof this menu. If the mouse click was on a selection, the array will\ncontain all selected regions. Otherwise it will have one <code>IRegion</code> that\nrepresents the clicked cell (the same <code>IRegion</code> from <code>getTarget</code>).</p>\n"
            ],
            "contentsRaw": "Returns an array of `IRegion`s that represent the user-intended context\nof this menu. If the mouse click was on a selection, the array will\ncontain all selected regions. Otherwise it will have one `IRegion` that\nrepresents the clicked cell (the same `IRegion` from `getTarget`).",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/menus/menuContext.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/menuContext.ts#L18",
          "type": "() => IRegion[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns the list of selected <code>IRegion</code> in the table, regardless of\nwhere the users clicked to launch the context menu. For the user-\nintended regions for this context, use <code>getRegions</code> instead.</p>\n"
            ],
            "contentsRaw": "Returns the list of selected `IRegion` in the table, regardless of\nwhere the users clicked to launch the context menu. For the user-\nintended regions for this context, use `getRegions` instead.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/menus/menuContext.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getSelectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/menuContext.ts#L25",
          "type": "() => IRegion[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns a region containing the single cell that was clicked to launch\nthis context menu.</p>\n"
            ],
            "contentsRaw": "Returns a region containing the single cell that was clicked to launch\nthis context menu.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/menus/menuContext.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getTarget",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/menuContext.ts#L31",
          "type": "() => IRegion"
        },
        {
          "documentation": {
            "contents": [
              "<p>Returns an array containing all of the unique, potentially non-\ncontiguous, cells contained in all the regions from <code>getRegions</code>. The\ncell coordinates are sorted by rows then columns.</p>\n"
            ],
            "contentsRaw": "Returns an array containing all of the unique, potentially non-\ncontiguous, cells contained in all the regions from `getRegions`. The\ncell coordinates are sorted by rows then columns.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/menus/menuContext.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getUniqueCells",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/menuContext.ts#L38",
          "type": "() => ICellCoordinate[]"
        }
      ]
    },
    "ICopyCellsMenuItemProps": {
      "fileName": "../table/src/interactions/menus/copyCellsMenuItem.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ICopyCellsMenuItemProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/copyCellsMenuItem.tsx#L14",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The <code>IMenuContext</code> that launched the menu.</p>\n"
            ],
            "contentsRaw": "The `IMenuContext` that launched the menu.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/menus/copyCellsMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "context",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/copyCellsMenuItem.tsx#L18",
          "type": "IMenuContext"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that returns the data for a specific cell. This need not\nmatch the value displayed in the <code>&lt;Cell&gt;</code> component. The value will be\ninvisibly added as <code>textContent</code> into the DOM before copying.</p>\n"
            ],
            "contentsRaw": "A callback that returns the data for a specific cell. This need not\nmatch the value displayed in the `<Cell>` component. The value will be\ninvisibly added as `textContent` into the DOM before copying.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/menus/copyCellsMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getCellData",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/copyCellsMenuItem.tsx#L25",
          "type": "(row: number, col: number) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>If you want to do something after the copy or if you want to notify the\nuser if a copy fails, you may provide this optional callback.</p>\n<p>Due to browser limitations, the copy can fail. This usually occurs if\nthe selection is too large, like 20,000+ cells. The copy will also fail\nif the browser does not support the copy method (see\n<code>Clipboard.isCopySupported</code>).</p>\n"
            ],
            "contentsRaw": "If you want to do something after the copy or if you want to notify the\nuser if a copy fails, you may provide this optional callback.\n\nDue to browser limitations, the copy can fail. This usually occurs if\nthe selection is too large, like 20,000+ cells. The copy will also fail\nif the browser does not support the copy method (see\n`Clipboard.isCopySupported`).",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/menus/copyCellsMenuItem.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCopy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/copyCellsMenuItem.tsx#L36",
          "type": "(success: boolean) => void"
        }
      ]
    },
    "IRowHeaderCellProps": {
      "fileName": "../table/src/headers/rowHeaderCell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRowHeaderCellProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeaderCell.tsx#L15",
      "extends": [
        "IHeaderCellProps",
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Specifies if the row is reorderable.</p>\n"
            ],
            "contentsRaw": "Specifies if the row is reorderable.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/rowHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableRowReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeaderCell.tsx#L19",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.</p>\n"
            ],
            "contentsRaw": "The index of the cell in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "index",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L19",
          "inheritedFrom": "IHeaderCellProps.index",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, will apply the active class to the header to indicate it is\npart of an external operation.</p>\n"
            ],
            "contentsRaw": "If `true`, will apply the active class to the header to indicate it is\npart of an external operation.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isActive",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L25",
          "inheritedFrom": "IHeaderCellProps.isActive",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Specifies whether the full row is part of a selection.</p>\n"
            ],
            "contentsRaw": "Specifies whether the full row is part of a selection.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/rowHeaderCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isRowSelected",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeaderCell.tsx#L24",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, the row/column <code>name</code> will be replaced with a fixed-height skeleton, and the\n<code>resizeHandle</code> will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply <code>Classes.SKELETON</code> where appropriate.</p>\n"
            ],
            "contentsRaw": "If `true`, the row/column `name` will be replaced with a fixed-height skeleton, and the\n`resizeHandle` will not be rendered. If passing in additional children to this component, you\nwill also want to conditionally apply `Classes.SKELETON` where appropriate.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L33",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderCellProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that returns an element, like a <code>&lt;Menu&gt;</code>, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.</p>\n"
            ],
            "contentsRaw": "A callback that returns an element, like a `<Menu>`, which is displayed by right-clicking\nanywhere in the header. The callback will receive the cell index if it was provided via\nprops.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "menuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L45",
          "inheritedFrom": "IHeaderCellProps.menuRenderer",
          "type": "(index?: number) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name displayed in the header of the row/column.</p>\n"
            ],
            "contentsRaw": "The name displayed in the header of the row/column.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L38",
          "inheritedFrom": "IHeaderCellProps.name",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ReorderHandle</code> React component that allows users to drag-reorder the column header.</p>\n"
            ],
            "contentsRaw": "A `ReorderHandle` React component that allows users to drag-reorder the column header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "reorderHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L50",
          "inheritedFrom": "IHeaderCellProps.reorderHandle",
          "type": "Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>ResizeHandle</code> React component that allows users to drag-resize the header.</p>\n"
            ],
            "contentsRaw": "A `ResizeHandle` React component that allows users to drag-resize the header.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "resizeHandle",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L55",
          "inheritedFrom": "IHeaderCellProps.resizeHandle",
          "type": "ResizeHandle"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles for the top level element.</p>\n"
            ],
            "contentsRaw": "CSS styles for the top level element.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/headerCell.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/headerCell.tsx#L60",
          "inheritedFrom": "IHeaderCellProps.style",
          "type": "CSSProperties"
        }
      ]
    },
    "IEditableNameProps": {
      "fileName": "../table/src/headers/editableName.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IEditableNameProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/editableName.tsx#L12",
      "extends": [
        "any",
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The index of the name in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.</p>\n"
            ],
            "contentsRaw": "The index of the name in the header. If provided, this will be passed as an argument to any\ncallbacks when they are invoked.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/editableName.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "index",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/editableName.tsx#L42",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The name displayed in the text box. Be sure to update this value when\nrendering this component after a confirmed change.</p>\n"
            ],
            "contentsRaw": "The name displayed in the text box. Be sure to update this value when\nrendering this component after a confirmed change.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/editableName.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "name",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/editableName.tsx#L17",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>A listener that is triggered if the user cancels the edit. This is\nimportant to listen to if you are doing anything with <code>onChange</code> events,\nsince you&#39;ll likely want to revert whatever changes you made.</p>\n"
            ],
            "contentsRaw": "A listener that is triggered if the user cancels the edit. This is\nimportant to listen to if you are doing anything with `onChange` events,\nsince you'll likely want to revert whatever changes you made.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/editableName.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCancel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/editableName.tsx#L24",
          "type": "(value: string) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A listener that is triggered as soon as the editable name is modified.\nThis can be due, for example, to keyboard input or the clipboard.</p>\n"
            ],
            "contentsRaw": "A listener that is triggered as soon as the editable name is modified.\nThis can be due, for example, to keyboard input or the clipboard.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/editableName.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/editableName.tsx#L30",
          "type": "(value: string) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A listener that is triggered once the editing is confirmed. This is\nusually due to the <code>return</code> (or <code>enter</code>) key press.</p>\n"
            ],
            "contentsRaw": "A listener that is triggered once the editing is confirmed. This is\nusually due to the `return` (or `enter`) key press.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/editableName.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onConfirm",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/editableName.tsx#L36",
          "type": "(value: string) => void"
        }
      ]
    },
    "IMovementDelta": {
      "fileName": "../table/src/common/movementDelta.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IMovementDelta",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/movementDelta.ts#L7",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The number of columns by which to move.</p>\n"
            ],
            "contentsRaw": "The number of columns by which to move.",
            "metadata": {}
          },
          "fileName": "../table/src/common/movementDelta.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cols",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/movementDelta.ts#L12",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of rows by which to move.</p>\n"
            ],
            "contentsRaw": "The number of rows by which to move.",
            "metadata": {}
          },
          "fileName": "../table/src/common/movementDelta.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rows",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/movementDelta.ts#L9",
          "type": "number"
        }
      ]
    },
    "IRowHeights": {
      "fileName": "../table/src/headers/rowHeader.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRowHeights",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L21",
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L24",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L23",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L22",
          "type": "number"
        }
      ]
    },
    "IRowHeaderProps": {
      "fileName": "../table/src/headers/rowHeader.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRowHeaderProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L27",
      "extends": [
        "IHeaderProps",
        "IRowHeights",
        "IRowIndices"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/interactions/resizeHandle.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onLayoutLock",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizeHandle.tsx#L20",
          "inheritedFrom": "ILockableLayout.onLayoutLock",
          "type": "(isLayoutLocked?: boolean) => void"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L24",
          "inheritedFrom": "IRowHeights.defaultRowHeight",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused cell.</p>\n"
            ],
            "contentsRaw": "The currently focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L30",
          "inheritedFrom": "IHeaderProps.focusedCell",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L36",
          "inheritedFrom": "IHeaderProps.grid",
          "type": "Grid"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the reordering interaction.</p>\n",
              {
                "tag": "internal"
              }
            ],
            "contentsRaw": "Enables/disables the reordering interaction.\n\n@internal",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isReorderable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L43",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderProps.isReorderable",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Enables/disables the resize interaction.</p>\n"
            ],
            "contentsRaw": "Enables/disables the resize interaction.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isResizable",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L49",
          "defaultValue": "false",
          "inheritedFrom": "IHeaderProps.isResizable",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, all header cells render their loading state except for those\nwho have their <code>loading</code> prop explicitly set to false.</p>\n"
            ],
            "contentsRaw": "If true, all header cells render their loading state except for those\nwho have their `loading` prop explicitly set to false.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L61",
          "defaultValue": "false;",
          "inheritedFrom": "IHeaderProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Locates the row/column/cell given a mouse event.</p>\n"
            ],
            "contentsRaw": "Locates the row/column/cell given a mouse event.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L54",
          "inheritedFrom": "IHeaderProps.locator",
          "type": "ILocator"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L23",
          "inheritedFrom": "IRowHeights.maxRowHeight",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L22",
          "inheritedFrom": "IRowHeights.minRowHeight",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with the new\nfocus cell for the newly selected set of regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L44",
          "inheritedFrom": "IReorderableProps.onFocusedCell",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L31",
          "defaultValue": "false",
          "inheritedFrom": "ISelectableProps.enableMultipleSelection",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called when the user is done dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called when the user is done dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L31",
          "inheritedFrom": "IReorderableProps.onReordered",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that is called while the user is dragging to reorder.</p>\n",
              {
                "tag": "param",
                "value": "the original index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the new index of the element or set of elements"
              },
              {
                "tag": "param",
                "value": "the number of contiguous elements that were moved"
              }
            ],
            "contentsRaw": "A callback that is called while the user is dragging to reorder.\n\n@param the original index of the element or set of elements\n@param the new index of the element or set of elements\n@param the number of contiguous elements that were moved",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L22",
          "inheritedFrom": "IReorderableProps.onReordering",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body&#39;s overlay layer.</p>\n"
            ],
            "contentsRaw": "This callback is called while the user is resizing a header cell. The guides\narray contains pixel offsets for where to display the resize guides in\nthe table body's overlay layer.",
            "metadata": {}
          },
          "fileName": "../table/src/headers/header.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onResizeGuide",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L68",
          "inheritedFrom": "IHeaderProps.onResizeGuide",
          "type": "(guides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback invoked when user is done resizing the column</p>\n"
            ],
            "contentsRaw": "A callback invoked when user is done resizing the column",
            "metadata": {}
          },
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onRowHeightChanged",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L31",
          "type": "IIndexedResizeCallback"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user reorders something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user reorders something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L38",
          "inheritedFrom": "IReorderableProps.onSelection",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.</p>\n"
            ],
            "contentsRaw": "An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelectionEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L57",
          "inheritedFrom": "ISelectableProps.onSelectionEnd",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Renders the cell for each row header</p>\n"
            ],
            "contentsRaw": "Renders the cell for each row header",
            "metadata": {}
          },
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowHeaderCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L36",
          "type": "IRowHeaderRenderer"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L20",
          "inheritedFrom": "IRowIndices.rowIndexEnd",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L19",
          "inheritedFrom": "IRowIndices.rowIndexStart",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L73",
          "inheritedFrom": "ISelectableProps.selectedRegionTransform",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/reorderable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/reorderable.tsx#L50",
          "defaultValue": "[]",
          "inheritedFrom": "IReorderableProps.selectedRegions",
          "type": "IRegion[]"
        }
      ]
    },
    "IGuideLayerProps": {
      "fileName": "../table/src/layers/guides.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IGuideLayerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/layers/guides.tsx#L13",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The top-offset location of the horizontal guides</p>\n"
            ],
            "contentsRaw": "The top-offset location of the horizontal guides",
            "metadata": {}
          },
          "fileName": "../table/src/layers/guides.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "horizontalGuides",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/layers/guides.tsx#L22",
          "type": "number[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The left-offset location of the vertical guides</p>\n"
            ],
            "contentsRaw": "The left-offset location of the vertical guides",
            "metadata": {}
          },
          "fileName": "../table/src/layers/guides.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "verticalGuides",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/layers/guides.tsx#L17",
          "type": "number[]"
        }
      ]
    },
    "ITableQuadrantProps": {
      "fileName": "../table/src/quadrants/tableQuadrant.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITableQuadrantProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L38",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>An optional callback invoked when the quadrant is scrolled via the scrollbar OR the trackpad/mouse wheel.\nThis callback really only makes sense for the MAIN quadrant, because that&#39;s the only quadrant whose\nscrollbar is visible. Other quadrants should simply provide an <code>onWheel</code> callback.</p>\n"
            ],
            "contentsRaw": "An optional callback invoked when the quadrant is scrolled via the scrollbar OR the trackpad/mouse wheel.\nThis callback really only makes sense for the MAIN quadrant, because that's the only quadrant whose\nscrollbar is visible. Other quadrants should simply provide an `onWheel` callback.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onScroll",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L62",
          "type": "React.EventHandler<UIEvent<HTMLDivElement>>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the quadrant&#39;s body-wrapping element. Will need to be\nprovided only for the MAIN quadrant, because that quadrant contains the main table body.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the quadrant's body-wrapping element. Will need to be\nprovided only for the MAIN quadrant, because that quadrant contains the main table body.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "bodyRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L43",
          "type": "(ref: HTMLElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders either all of or just the frozen section of the column header.</p>\n"
            ],
            "contentsRaw": "A callback that renders either all of or just the frozen section of the column header.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnHeaderCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L90",
          "type": "(showFrozenColumnsOnly?: boolean) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, hides the row headers and settings menu.</p>\n"
            ],
            "contentsRaw": "If `false`, hides the row headers and settings menu.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableRowHeader",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L55",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L49",
          "type": "Grid"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders the table menu (the rectangle in the top-left corner).</p>\n"
            ],
            "contentsRaw": "A callback that renders the table menu (the rectangle in the top-left corner).",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "menuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L85",
          "type": "() => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders either all of or just frozen sections of the table body.</p>\n"
            ],
            "contentsRaw": "A callback that renders either all of or just frozen sections of the table body.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "bodyRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L100",
          "type": "(quadrantType?: QuadrantType, showFrozenRowsOnly?: boolean, showFrozenColumnsOnly?: boolean) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback invoked when the quadrant is scrolled via the trackpad/mouse wheel. This\ncallback should be provided for all quadrant types except MAIN, which should provide the more\ngeneric <code>onScroll</code> callback.</p>\n"
            ],
            "contentsRaw": "An optional callback invoked when the quadrant is scrolled via the trackpad/mouse wheel. This\ncallback should be provided for all quadrant types except MAIN, which should provide the more\ngeneric `onScroll` callback.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onWheel",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L69",
          "type": "React.EventHandler<WheelEvent<HTMLDivElement>>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the quadrant&#39;s outermost element.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the quadrant's outermost element.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "quadrantRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L74",
          "type": "(ref: HTMLElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>The quadrant type. Informs the values of the parameters that will be passed to the\n<code>render...</code> callbacks, assuming an expected stacking order of the four quadrants.</p>\n"
            ],
            "contentsRaw": "The quadrant type. Informs the values of the parameters that will be passed to the\n`render...` callbacks, assuming an expected stacking order of the four quadrants.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "quadrantType",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L80",
          "type": "QuadrantType"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders either all of or just the frozen section of the row header.</p>\n"
            ],
            "contentsRaw": "A callback that renders either all of or just the frozen section of the row header.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowHeaderCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L95",
          "type": "(showFrozenRowsOnly?: boolean) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the quadrant&#39;s scroll-container element.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the quadrant's scroll-container element.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollContainerRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L109",
          "type": "(ref: HTMLElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>CSS styles to apply to the quadrant&#39;s outermost element.</p>\n"
            ],
            "contentsRaw": "CSS styles to apply to the quadrant's outermost element.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrant.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrant.tsx#L114",
          "type": "CSSProperties"
        }
      ]
    },
    "IRegionLayerProps": {
      "fileName": "../table/src/layers/regions.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IRegionLayerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/layers/regions.tsx#L16",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The array of CSS styles to apply to each region. The ith style object in this array will be\napplied to the ith region in <code>regions</code>.</p>\n"
            ],
            "contentsRaw": "The array of CSS styles to apply to each region. The ith style object in this array will be\napplied to the ith region in `regions`.",
            "metadata": {}
          },
          "fileName": "../table/src/layers/regions.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "regionStyles",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/layers/regions.tsx#L26",
          "type": "CSSProperties[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The array of regions to render.</p>\n"
            ],
            "contentsRaw": "The array of regions to render.",
            "metadata": {}
          },
          "fileName": "../table/src/layers/regions.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "regions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/layers/regions.tsx#L20",
          "type": "IRegion[]"
        }
      ]
    },
    "ITableQuadrantStackProps": {
      "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITableQuadrantStackProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L30",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>A list of <code>TableLoadingOption</code>. Loading cells may have different sizes\nfrom potentially custom cells in the header or body, so we need to know\nwhen the loading states change in order to synchronize quadrant sizes\nproperly.</p>\n<p>REQUIRES QUADRANT RESYNC</p>\n"
            ],
            "contentsRaw": "A list of `TableLoadingOption`. Loading cells may have different sizes\nfrom potentially custom cells in the header or body, so we need to know\nwhen the loading states change in order to synchronize quadrant sizes\nproperly.\n\nREQUIRES QUADRANT RESYNC",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loadingOptions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L98",
          "type": "TableLoadingOption[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the main quadrant&#39;s table-body element.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the main quadrant's table-body element.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "bodyRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L34",
          "type": "(ref: HTMLElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders either all of or just the frozen section of the column header.</p>\n"
            ],
            "contentsRaw": "A callback that renders either all of or just the frozen section of the column header.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnHeaderCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L155",
          "type": "(refHandler: (ref: HTMLElement) => void, resizeHandler: (verticalGuides: number[]) => void, reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void, showFrozenColumnsOnly?: boolean) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the main quadrant&#39;s column-header container.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the main quadrant's column-header container.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnHeaderRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L39",
          "type": "(ref: HTMLElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, adds an interaction bar on top of all column header cells, and\nmoves interaction triggers into it. Affects the layout of the table, so\nwe need to know when this changes in order to synchronize quadrant sizes\nproperly.</p>\n<p>This value defaults to <code>undefined</code> so that, by default, it won&#39;t override\nthe <code>enableColumnInteractionBar</code> values that you might have provided directly to\neach <code>&lt;ColumnHeaderCell&gt;</code>.</p>\n<p>REQUIRES QUADRANT RESYNC</p>\n"
            ],
            "contentsRaw": "If `true`, adds an interaction bar on top of all column header cells, and\nmoves interaction triggers into it. Affects the layout of the table, so\nwe need to know when this changes in order to synchronize quadrant sizes\nproperly.\n\nThis value defaults to `undefined` so that, by default, it won't override\nthe `enableColumnInteractionBar` values that you might have provided directly to\neach `<ColumnHeaderCell>`.\n\nREQUIRES QUADRANT RESYNC",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableColumnInteractionBar",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L218",
          "defaultValue": "undefined",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, hides the row headers and settings menu. Affects the layout\nof the table, so we need to know when this changes in order to\nsynchronize quadrant sizes properly.</p>\n<p>REQUIRES QUADRANT RESYNC</p>\n"
            ],
            "contentsRaw": "If `false`, hides the row headers and settings menu. Affects the layout\nof the table, so we need to know when this changes in order to\nsynchronize quadrant sizes properly.\n\nREQUIRES QUADRANT RESYNC",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableRowHeader",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L82",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L45",
          "type": "Grid"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback for reacting to column-resize events.</p>\n"
            ],
            "contentsRaw": "An optional callback for reacting to column-resize events.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleColumnResizeGuide",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L50",
          "type": "(verticalGuides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback for reacting to column-reordering events.</p>\n"
            ],
            "contentsRaw": "An optional callback for reacting to column-reordering events.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleColumnsReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L55",
          "type": "(verticalGuides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback for reacting to row-resize events.</p>\n"
            ],
            "contentsRaw": "An optional callback for reacting to row-resize events.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleRowResizeGuide",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L60",
          "type": "(horizontalGuides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback for reacting to column-reordering events.</p>\n"
            ],
            "contentsRaw": "An optional callback for reacting to column-reordering events.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "handleRowsReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L65",
          "type": "(horizontalGuides: number[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether horizontal scrolling is currently disabled.</p>\n"
            ],
            "contentsRaw": "Whether horizontal scrolling is currently disabled.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isHorizontalScrollDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L71",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether vertical scrolling is currently disabled.</p>\n"
            ],
            "contentsRaw": "Whether vertical scrolling is currently disabled.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "isVerticalScrollDisabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L88",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders either all of or just frozen sections of the table body.</p>\n"
            ],
            "contentsRaw": "A callback that renders either all of or just frozen sections of the table body.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "bodyRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L146",
          "type": "(quadrantType: QuadrantType, showFrozenRowsOnly?: boolean, showFrozenColumnsOnly?: boolean) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders the table menu (the rectangle in the top-left corner).</p>\n"
            ],
            "contentsRaw": "A callback that renders the table menu (the rectangle in the top-left corner).",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "menuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L165",
          "type": "(refHandler: (ref: HTMLElement) => void) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of columns. Affects the layout of the table, so we need to\nknow when this changes in order to synchronize quadrant sizes properly.</p>\n<p>REQUIRES QUADRANT RESYNC</p>\n"
            ],
            "contentsRaw": "The number of columns. Affects the layout of the table, so we need to\nknow when this changes in order to synchronize quadrant sizes properly.\n\nREQUIRES QUADRANT RESYNC",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numColumns",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L106",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of frozen columns. Affects the layout of the table, so we need\nto know when this changes in order to synchronize quadrant sizes\nproperly.</p>\n<p>REQUIRES QUADRANT RESYNC</p>\n"
            ],
            "contentsRaw": "The number of frozen columns. Affects the layout of the table, so we need\nto know when this changes in order to synchronize quadrant sizes\nproperly.\n\nREQUIRES QUADRANT RESYNC",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numFrozenColumns",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L115",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of frozen rows. Affects the layout of the table, so we need to\nknow when this changes in order to synchronize quadrant sizes properly.</p>\n<p>REQUIRES QUADRANT RESYNC</p>\n"
            ],
            "contentsRaw": "The number of frozen rows. Affects the layout of the table, so we need to\nknow when this changes in order to synchronize quadrant sizes properly.\n\nREQUIRES QUADRANT RESYNC",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numFrozenRows",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L123",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of rows. Affects the layout of the table, so we need to know\nwhen this changes in order to synchronize quadrant sizes properly.</p>\n<p>REQUIRES QUADRANT RESYNC</p>\n"
            ],
            "contentsRaw": "The number of rows. Affects the layout of the table, so we need to know\nwhen this changes in order to synchronize quadrant sizes properly.\n\nREQUIRES QUADRANT RESYNC",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numRows",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L131",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback invoked the quadrants are scrolled.</p>\n"
            ],
            "contentsRaw": "An optional callback invoked the quadrants are scrolled.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onScroll",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L136",
          "type": "React.EventHandler<SyntheticEvent<HTMLElement>>"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the main-quadrant element.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the main-quadrant element.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "quadrantRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L141",
          "type": "(ref: HTMLElement | null) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that renders either all of or just the frozen section of the row header.</p>\n"
            ],
            "contentsRaw": "A callback that renders either all of or just the frozen section of the row header.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowHeaderCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L170",
          "type": "(refHandler: (ref: HTMLElement) => void, resizeHandler: (verticalGuides: number[]) => void, reorderingHandler: (oldIndex: number, newIndex: number, length: number) => void, showFrozenRowsOnly?: boolean) => Element"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the main quadrant&#39;s row-header container.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the main quadrant's row-header container.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowHeaderRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L180",
          "type": "(ref: HTMLElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback that receives a <code>ref</code> to the main quadrant&#39;s scroll-container element.</p>\n"
            ],
            "contentsRaw": "A callback that receives a `ref` to the main quadrant's scroll-container element.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "scrollContainerRef",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L185",
          "type": "(ref: HTMLElement | null) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether &quot;scroll&quot; and &quot;wheel&quot; events should be throttled using\nrequestAnimationFrame. Disabling this can be useful for unit testing,\nbecause tests can then be synchronous.</p>\n"
            ],
            "contentsRaw": "Whether \"scroll\" and \"wheel\" events should be throttled using\nrequestAnimationFrame. Disabling this can be useful for unit testing,\nbecause tests can then be synchronous.",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "throttleScrolling",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L193",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The amount of time in milliseconds the component should wait before\nsynchronizing quadrant sizes and offsets after the user has stopped\nscrolling. If this value is negative, the updates will happen\nsynchronously (this is helpful for unit testing).</p>\n"
            ],
            "contentsRaw": "The amount of time in milliseconds the component should wait before\nsynchronizing quadrant sizes and offsets after the user has stopped\nscrolling. If this value is negative, the updates will happen\nsynchronously (this is helpful for unit testing).",
            "metadata": {}
          },
          "fileName": "../table/src/quadrants/tableQuadrantStack.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "viewSyncDelay",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStack.tsx#L202",
          "defaultValue": "500",
          "type": "number"
        }
      ]
    },
    "IContextMenuTargetWrapper": {
      "fileName": "../table/src/common/contextMenuTargetWrapper.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IContextMenuTargetWrapper",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/contextMenuTargetWrapper.tsx#L10",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/common/contextMenuTargetWrapper.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderContextMenu",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/contextMenuTargetWrapper.tsx#L11",
          "type": "(e: MouseEvent<HTMLElement>) => Element"
        },
        {
          "fileName": "../table/src/common/contextMenuTargetWrapper.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "style",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/contextMenuTargetWrapper.tsx#L12",
          "type": "CSSProperties"
        }
      ]
    },
    "ITableBodyCellsProps": {
      "fileName": "../table/src/tableBodyCells.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITableBodyCellsProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L19",
      "extends": [
        "IRowIndices",
        "IColumnIndices",
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>If true, all <code>Cell</code>s render their loading state except for those who have\ntheir <code>loading</code> prop explicitly set to false.</p>\n"
            ],
            "contentsRaw": "If true, all `Cell`s render their loading state except for those who have\ntheir `loading` prop explicitly set to false.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L40",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>A cell renderer for the cells in the body.</p>\n"
            ],
            "contentsRaw": "A cell renderer for the cells in the body.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L23",
          "type": "ICellRenderer"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L24",
          "inheritedFrom": "IColumnIndices.columnIndexStart",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The coordinates of the currently focused cell, for setting the &quot;isFocused&quot; prop on cells.</p>\n"
            ],
            "contentsRaw": "The coordinates of the currently focused cell, for setting the \"isFocused\" prop on cells.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L28",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L34",
          "type": "Grid"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L25",
          "inheritedFrom": "IColumnIndices.columnIndexEnd",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback invoked when all cells in view have completely rendered.</p>\n"
            ],
            "contentsRaw": "An optional callback invoked when all cells in view have completely rendered.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCompleteRender",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L45",
          "type": "() => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Dictates how cells should be rendered. This component doesn&#39;t support\n<code>RenderMode.BATCH_ON_UPDATE</code>, because there are actually multiple updates\nthat need to happen at higher levels before the table is considered fully\n&quot;mounted&quot;; thus, we let higher components tell us when to switch modes.</p>\n"
            ],
            "contentsRaw": "Dictates how cells should be rendered. This component doesn't support\n`RenderMode.BATCH_ON_UPDATE`, because there are actually multiple updates\nthat need to happen at higher levels before the table is considered fully\n\"mounted\"; thus, we let higher components tell us when to switch modes.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderMode",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L54",
          "defaultValue": "RenderMode.BATCH",
          "type": "RenderMode.BATCH | RenderMode.NONE"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L20",
          "inheritedFrom": "IRowIndices.rowIndexEnd",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L19",
          "inheritedFrom": "IRowIndices.rowIndexStart",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The <code>Rect</code> bounds of the visible viewport with respect to its parent\nscrollable pane. While not directly used by the component, this prop is\nnecessary for shouldComponentUpdate logic to run properly.</p>\n"
            ],
            "contentsRaw": "The `Rect` bounds of the visible viewport with respect to its parent\nscrollable pane. While not directly used by the component, this prop is\nnecessary for shouldComponentUpdate logic to run properly.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "viewportRect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L61",
          "type": "Rect"
        }
      ]
    },
    "ITableBodyProps": {
      "fileName": "../table/src/tableBody.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITableBodyProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBody.tsx#L22",
      "extends": [
        "ISelectableProps",
        "ITableBodyCellsProps"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>The number of rows to freeze to the top of the table, counting from the topmost row.</p>\n"
            ],
            "contentsRaw": "The number of rows to freeze to the top of the table, counting from the topmost row.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBody.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numFrozenRows",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBody.tsx#L43",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback for displaying a context menu when right-clicking\non the table body. The callback is supplied with an <code>IMenuContext</code>\ncontaining the <code>IRegion</code>s of interest.</p>\n"
            ],
            "contentsRaw": "An optional callback for displaying a context menu when right-clicking\non the table body. The callback is supplied with an `IMenuContext`\ncontaining the `IRegion`s of interest.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBody.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "bodyContextMenuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBody.tsx#L28",
          "type": "IContextMenuRenderer"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L25",
          "inheritedFrom": "IColumnIndices.columnIndexEnd",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L24",
          "inheritedFrom": "IColumnIndices.columnIndexStart",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L31",
          "defaultValue": "false",
          "inheritedFrom": "ISelectableProps.enableMultipleSelection",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently focused cell.</p>\n"
            ],
            "contentsRaw": "The currently focused cell.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L36",
          "inheritedFrom": "ISelectableProps.focusedCell",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>The grid computes sizes of cells, rows, or columns from the\nconfigurable <code>columnWidths</code> and <code>rowHeights</code>.</p>\n"
            ],
            "contentsRaw": "The grid computes sizes of cells, rows, or columns from the\nconfigurable `columnWidths` and `rowHeights`.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "grid",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L34",
          "inheritedFrom": "ITableBodyCellsProps.grid",
          "type": "Grid"
        },
        {
          "documentation": {
            "contents": [
              "<p>If true, all <code>Cell</code>s render their loading state except for those who have\ntheir <code>loading</code> prop explicitly set to false.</p>\n"
            ],
            "contentsRaw": "If true, all `Cell`s render their loading state except for those who have\ntheir `loading` prop explicitly set to false.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loading",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L40",
          "inheritedFrom": "ITableBodyCellsProps.loading",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Locates the row/column/cell given a mouse event.</p>\n"
            ],
            "contentsRaw": "Locates the row/column/cell given a mouse event.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBody.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "locator",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBody.tsx#L33",
          "type": "ILocator"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of columns to freeze to the left side of the table, counting from the leftmost column.</p>\n"
            ],
            "contentsRaw": "The number of columns to freeze to the left side of the table, counting from the leftmost column.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBody.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numFrozenColumns",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBody.tsx#L38",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>A cell renderer for the cells in the body.</p>\n"
            ],
            "contentsRaw": "A cell renderer for the cells in the body.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "cellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L23",
          "inheritedFrom": "ITableBodyCellsProps.cellRenderer",
          "type": "ICellRenderer"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback invoked when all cells in view have completely rendered.</p>\n"
            ],
            "contentsRaw": "An optional callback invoked when all cells in view have completely rendered.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCompleteRender",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L45",
          "inheritedFrom": "ITableBodyCellsProps.onCompleteRender",
          "type": "() => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user focuses something, this callback is called with new\nfocused cell coordinates. This should be considered the new focused cell\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user focuses something, this callback is called with new\nfocused cell coordinates. This should be considered the new focused cell\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L43",
          "inheritedFrom": "ISelectableProps.onFocusedCell",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>When the user selects something, this callback is called with a new\narray of <code>Region</code>s. This array should be considered the new selection\nstate for the entire table.</p>\n"
            ],
            "contentsRaw": "When the user selects something, this callback is called with a new\narray of `Region`s. This array should be considered the new selection\nstate for the entire table.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L50",
          "inheritedFrom": "ISelectableProps.onSelection",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.</p>\n"
            ],
            "contentsRaw": "An additional convenience callback invoked when the user releases the\nmouse from either a click or a drag, indicating that the selection\ninteraction has ended.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelectionEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L57",
          "inheritedFrom": "ISelectableProps.onSelectionEnd",
          "type": "(regions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Dictates how cells should be rendered. This component doesn&#39;t support\n<code>RenderMode.BATCH_ON_UPDATE</code>, because there are actually multiple updates\nthat need to happen at higher levels before the table is considered fully\n&quot;mounted&quot;; thus, we let higher components tell us when to switch modes.</p>\n"
            ],
            "contentsRaw": "Dictates how cells should be rendered. This component doesn't support\n`RenderMode.BATCH_ON_UPDATE`, because there are actually multiple updates\nthat need to happen at higher levels before the table is considered fully\n\"mounted\"; thus, we let higher components tell us when to switch modes.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderMode",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L54",
          "defaultValue": "RenderMode.BATCH",
          "inheritedFrom": "ITableBodyCellsProps.renderMode",
          "type": "RenderMode.BATCH | RenderMode.NONE"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexEnd",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L20",
          "inheritedFrom": "IRowIndices.rowIndexEnd",
          "type": "number"
        },
        {
          "fileName": "../table/src/common/grid.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowIndexStart",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L19",
          "inheritedFrom": "IRowIndices.rowIndexStart",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L73",
          "inheritedFrom": "ISelectableProps.selectedRegionTransform",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>An array containing the table&#39;s selection Regions.</p>\n"
            ],
            "contentsRaw": "An array containing the table's selection Regions.",
            "metadata": {}
          },
          "fileName": "../table/src/interactions/selectable.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L63",
          "defaultValue": "[]",
          "inheritedFrom": "ISelectableProps.selectedRegions",
          "type": "IRegion[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>The <code>Rect</code> bounds of the visible viewport with respect to its parent\nscrollable pane. While not directly used by the component, this prop is\nnecessary for shouldComponentUpdate logic to run properly.</p>\n"
            ],
            "contentsRaw": "The `Rect` bounds of the visible viewport with respect to its parent\nscrollable pane. While not directly used by the component, this prop is\nnecessary for shouldComponentUpdate logic to run properly.",
            "metadata": {}
          },
          "fileName": "../table/src/tableBodyCells.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "viewportRect",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/tableBodyCells.tsx#L61",
          "inheritedFrom": "ITableBodyCellsProps.viewportRect",
          "type": "Rect"
        }
      ]
    },
    "IResizeRowsByApproximateHeightOptions": {
      "fileName": "../table/src/table.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "IResizeRowsByApproximateHeightOptions",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L57",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Approximate width (in pixels) of an average character of text.</p>\n"
            ],
            "contentsRaw": "Approximate width (in pixels) of an average character of text.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getApproximateCharWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L61",
          "type": "number | ICellMapper<number>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Approximate height (in pixels) of an average line of text.</p>\n"
            ],
            "contentsRaw": "Approximate height (in pixels) of an average line of text.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getApproximateLineHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L66",
          "type": "number | ICellMapper<number>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Sum of horizontal paddings (in pixels) from the left <strong>and</strong> right sides\nof the cell.</p>\n"
            ],
            "contentsRaw": "Sum of horizontal paddings (in pixels) from the left __and__ right sides\nof the cell.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getCellHorizontalPadding",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L72",
          "type": "number | ICellMapper<number>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Number of extra lines to add in case the calculation is imperfect.</p>\n"
            ],
            "contentsRaw": "Number of extra lines to add in case the calculation is imperfect.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getNumBufferLines",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L77",
          "type": "number | ICellMapper<number>"
        }
      ]
    },
    "ITableProps": {
      "fileName": "../table/src/table.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITableProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L87",
      "extends": [
        "any",
        "IRowHeights",
        "IColumnWidths"
      ],
      "methods": [],
      "properties": [
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L23",
          "inheritedFrom": "IColumnWidths.minColumnWidth",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback for displaying a context menu when right-clicking\non the table body. The callback is supplied with an array of\n<code>IRegion</code>s. If the mouse click was on a selection, the array will\ncontain all selected regions. Otherwise it will have one <code>IRegion</code> that\nrepresents the clicked cell.</p>\n"
            ],
            "contentsRaw": "An optional callback for displaying a context menu when right-clicking\non the table body. The callback is supplied with an array of\n`IRegion`s. If the mouse click was on a selection, the array will\ncontain all selected regions. Otherwise it will have one `IRegion` that\nrepresents the clicked cell.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "bodyContextMenuRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L109",
          "type": "IContextMenuRenderer"
        },
        {
          "documentation": {
            "contents": [
              "<p>A sparse number array with a length equal to the number of columns. Any\nnon-null value will be used to set the width of the column at the same\nindex. Note that if you want to update these values when the user\ndrag-resizes a column, you may define a callback for <code>onColumnWidthChanged</code>.</p>\n"
            ],
            "contentsRaw": "A sparse number array with a length equal to the number of columns. Any\nnon-null value will be used to set the width of the column at the same\nindex. Note that if you want to update these values when the user\ndrag-resizes a column, you may define a callback for `onColumnWidthChanged`.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "columnWidths",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L100",
          "type": "Array<number | null | undefined>"
        },
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L25",
          "inheritedFrom": "IColumnWidths.defaultColumnWidth",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "defaultRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L24",
          "inheritedFrom": "IRowHeights.defaultRowHeight",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, adds an interaction bar on top of all column header cells, and\nmoves interaction triggers into it.</p>\n"
            ],
            "contentsRaw": "If `true`, adds an interaction bar on top of all column header cells, and\nmoves interaction triggers into it.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableColumnInteractionBar",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L116",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, disables reordering of columns.</p>\n"
            ],
            "contentsRaw": "If `false`, disables reordering of columns.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableColumnReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L122",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, disables resizing of columns.</p>\n"
            ],
            "contentsRaw": "If `false`, disables resizing of columns.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableColumnResizing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L128",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, there will be a single &quot;focused&quot; cell at all times,\nwhich can be used to interact with the table as though it is a\nspreadsheet. When false, no such cell will exist.</p>\n"
            ],
            "contentsRaw": "If `true`, there will be a single \"focused\" cell at all times,\nwhich can be used to interact with the table as though it is a\nspreadsheet. When false, no such cell will exist.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L136",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, empty space in the table container will be filled with empty\ncells instead of a blank background.</p>\n"
            ],
            "contentsRaw": "If `true`, empty space in the table container will be filled with empty\ncells instead of a blank background.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableGhostCells",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L143",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, only a single region of a single column/row/cell may be\nselected at one time. Using <code>ctrl</code> or <code>meta</code> key will have no effect,\nand a mouse drag will select the current column/row/cell only.</p>\n"
            ],
            "contentsRaw": "If `false`, only a single region of a single column/row/cell may be\nselected at one time. Using `ctrl` or `meta` key will have no effect,\nand a mouse drag will select the current column/row/cell only.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableMultipleSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L151",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, hides the row headers and settings menu.</p>\n"
            ],
            "contentsRaw": "If `false`, hides the row headers and settings menu.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableRowHeader",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L157",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, disables reordering of rows.</p>\n"
            ],
            "contentsRaw": "If `false`, disables reordering of rows.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableRowReordering",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L163",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>false</code>, disables resizing of rows.</p>\n"
            ],
            "contentsRaw": "If `false`, disables resizing of rows.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "enableRowResizing",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L169",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If defined, will set the focused cell state. This changes\nthe focused cell to controlled mode, meaning you are in charge of\nsetting the focus in response to events in the <code>onFocusedCell</code> callback.</p>\n"
            ],
            "contentsRaw": "If defined, will set the focused cell state. This changes\nthe focused cell to controlled mode, meaning you are in charge of\nsetting the focus in response to events in the `onFocusedCell` callback.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "focusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L176",
          "type": "IFocusedCellCoordinates"
        },
        {
          "documentation": {
            "contents": [
              "<p>If <code>true</code>, selection state changes will cause the component to re-render.\nIf <code>false</code>, selection state is ignored when deciding to re-render.</p>\n"
            ],
            "contentsRaw": "If `true`, selection state changes will cause the component to re-render.\nIf `false`, selection state is ignored when deciding to re-render.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "forceRerenderOnSelectionChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L183",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>If defined, this callback will be invoked for each cell when the user\nattempts to copy a selection via <code>mod+c</code>. The returned data will be copied\nto the clipboard and need not match the display value of the <code>&lt;Cell&gt;</code>.\nThe data will be invisibly added as <code>textContent</code> into the DOM before\ncopying. If not defined, keyboard copying via <code>mod+c</code> will be disabled.</p>\n"
            ],
            "contentsRaw": "If defined, this callback will be invoked for each cell when the user\nattempts to copy a selection via `mod+c`. The returned data will be copied\nto the clipboard and need not match the display value of the `<Cell>`.\nThe data will be invisibly added as `textContent` into the DOM before\ncopying. If not defined, keyboard copying via `mod+c` will be disabled.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "getCellClipboardData",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L192",
          "type": "(row: number, col: number) => any"
        },
        {
          "documentation": {
            "contents": [
              "<p>A list of <code>TableLoadingOption</code>. Set this prop to specify whether to\nrender the loading state for the column header, row header, and body\nsections of the table.</p>\n"
            ],
            "contentsRaw": "A list of `TableLoadingOption`. Set this prop to specify whether to\nrender the loading state for the column header, row header, and body\nsections of the table.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "loadingOptions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L199",
          "type": "TableLoadingOption[]"
        },
        {
          "fileName": "../table/src/headers/columnHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxColumnWidth",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L24",
          "inheritedFrom": "IColumnWidths.maxColumnWidth",
          "type": "number"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "maxRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L23",
          "inheritedFrom": "IRowHeights.maxRowHeight",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The children of a <code>Table</code> component, which must be React elements\nthat use <code>IColumnProps</code>.</p>\n"
            ],
            "contentsRaw": "The children of a `Table` component, which must be React elements\nthat use `IColumnProps`.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L92",
          "type": "ReactElement<IColumnProps> | Array<ReactElement<IColumnProps>>"
        },
        {
          "fileName": "../table/src/headers/rowHeader.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "minRowHeight",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L22",
          "inheritedFrom": "IRowHeights.minRowHeight",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of columns to freeze to the left side of the table, counting\nfrom the leftmost column.</p>\n"
            ],
            "contentsRaw": "The number of columns to freeze to the left side of the table, counting\nfrom the leftmost column.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numFrozenColumns",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L206",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of rows to freeze to the top of the table, counting from the\ntopmost row.</p>\n"
            ],
            "contentsRaw": "The number of rows to freeze to the top of the table, counting from the\ntopmost row.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numFrozenRows",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L213",
          "defaultValue": "0",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>The number of rows in the table.</p>\n"
            ],
            "contentsRaw": "The number of rows in the table.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "numRows",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L218",
          "type": "number"
        },
        {
          "documentation": {
            "contents": [
              "<p>If resizing is enabled, this callback will be invoked when the user\nfinishes drag-resizing a column.</p>\n"
            ],
            "contentsRaw": "If resizing is enabled, this callback will be invoked when the user\nfinishes drag-resizing a column.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onColumnWidthChanged",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L230",
          "type": "IIndexedResizeCallback"
        },
        {
          "documentation": {
            "contents": [
              "<p>If reordering is enabled, this callback will be invoked when the user finishes\ndrag-reordering one or more columns.</p>\n"
            ],
            "contentsRaw": "If reordering is enabled, this callback will be invoked when the user finishes\ndrag-reordering one or more columns.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onColumnsReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L224",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional callback invoked when all cells in view have completely rendered.\nWill be invoked on initial mount and whenever cells update (e.g., on scroll).</p>\n"
            ],
            "contentsRaw": "An optional callback invoked when all cells in view have completely rendered.\nWill be invoked on initial mount and whenever cells update (e.g., on scroll).",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCompleteRender",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L236",
          "type": "() => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If you want to do something after the copy or if you want to notify the\nuser if a copy fails, you may provide this optional callback.</p>\n<p>Due to browser limitations, the copy can fail. This usually occurs if\nthe selection is too large, like 20,000+ cells. The copy will also fail\nif the browser does not support the copy method (see\n<code>Clipboard.isCopySupported</code>).</p>\n"
            ],
            "contentsRaw": "If you want to do something after the copy or if you want to notify the\nuser if a copy fails, you may provide this optional callback.\n\nDue to browser limitations, the copy can fail. This usually occurs if\nthe selection is too large, like 20,000+ cells. The copy will also fail\nif the browser does not support the copy method (see\n`Clipboard.isCopySupported`).",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onCopy",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L247",
          "type": "(success: boolean) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback called when the focus is changed in the table.</p>\n"
            ],
            "contentsRaw": "A callback called when the focus is changed in the table.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onFocusedCell",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L252",
          "type": "(focusedCell: IFocusedCellCoordinates) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>If resizing is enabled, this callback will be invoked when the user\nfinishes drag-resizing a row.</p>\n"
            ],
            "contentsRaw": "If resizing is enabled, this callback will be invoked when the user\nfinishes drag-resizing a row.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onRowHeightChanged",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L258",
          "type": "IIndexedResizeCallback"
        },
        {
          "documentation": {
            "contents": [
              "<p>If reordering is enabled, this callback will be invoked when the user finishes\ndrag-reordering one or more rows.</p>\n"
            ],
            "contentsRaw": "If reordering is enabled, this callback will be invoked when the user finishes\ndrag-reordering one or more rows.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onRowsReordered",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L264",
          "type": "(oldIndex: number, newIndex: number, length: number) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback called when the selection is changed in the table.</p>\n"
            ],
            "contentsRaw": "A callback called when the selection is changed in the table.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onSelection",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L269",
          "type": "(selectedRegions: IRegion[]) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>A callback called when the visible cell indices change in the table.</p>\n"
            ],
            "contentsRaw": "A callback called when the visible cell indices change in the table.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onVisibleCellsChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L274",
          "type": "(rowIndices: IRowIndices, columnIndices: IColumnIndices) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Dictates how cells should be rendered. Supported modes are:</p>\n<ul>\n<li><code>RenderMode.BATCH</code>: renders cells in batches to improve performance</li>\n<li><code>RenderMode.BATCH_ON_UPDATE</code>: renders cells synchronously on mount and\nin batches on update</li>\n<li><code>RenderMode.NONE</code>: renders cells synchronously all at once</li>\n</ul>\n"
            ],
            "contentsRaw": "Dictates how cells should be rendered. Supported modes are:\n- `RenderMode.BATCH`: renders cells in batches to improve performance\n- `RenderMode.BATCH_ON_UPDATE`: renders cells synchronously on mount and\n  in batches on update\n- `RenderMode.NONE`: renders cells synchronously all at once",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "renderMode",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L284",
          "defaultValue": "RenderMode.BATCH_ON_UPDATE",
          "type": "RenderMode"
        },
        {
          "documentation": {
            "contents": [
              "<p>Render each row&#39;s header cell.</p>\n"
            ],
            "contentsRaw": "Render each row's header cell.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowHeaderCellRenderer",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L289",
          "type": "IRowHeaderRenderer"
        },
        {
          "documentation": {
            "contents": [
              "<p>A sparse number array with a length equal to the number of rows. Any\nnon-null value will be used to set the height of the row at the same\nindex. Note that if you want to update these values when the user\ndrag-resizes a row, you may define a callback for <code>onRowHeightChanged</code>.</p>\n"
            ],
            "contentsRaw": "A sparse number array with a length equal to the number of rows. Any\nnon-null value will be used to set the height of the row at the same\nindex. Note that if you want to update these values when the user\ndrag-resizes a row, you may define a callback for `onRowHeightChanged`.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "rowHeights",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L297",
          "type": "Array<number | null | undefined>"
        },
        {
          "documentation": {
            "contents": [
              "<p>An optional transform function that will be applied to the located\n<code>Region</code>.</p>\n<p>This allows you to, for example, convert cell <code>Region</code>s into row\n<code>Region</code>s while maintaining the existing multi-select and meta-click\nfunctionality.</p>\n"
            ],
            "contentsRaw": "An optional transform function that will be applied to the located\n`Region`.\n\nThis allows you to, for example, convert cell `Region`s into row\n`Region`s while maintaining the existing multi-select and meta-click\nfunctionality.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegionTransform",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L320",
          "type": "ISelectedRegionTransform"
        },
        {
          "documentation": {
            "contents": [
              "<p>If defined, will set the selected regions in the cells. If defined, this\nchanges table selection to controlled mode, meaning you in charge of\nsetting the selections in response to events in the <code>onSelection</code>\ncallback.</p>\n<p>Note that the <code>selectionModes</code> prop controls which types of events are\ntriggered to the <code>onSelection</code> callback, but does not restrict what\nselection you can pass to the <code>selectedRegions</code> prop. Therefore you can,\nfor example, convert cell clicks into row selections.</p>\n"
            ],
            "contentsRaw": "If defined, will set the selected regions in the cells. If defined, this\nchanges table selection to controlled mode, meaning you in charge of\nsetting the selections in response to events in the `onSelection`\ncallback.\n\nNote that the `selectionModes` prop controls which types of events are\ntriggered to the `onSelection` callback, but does not restrict what\nselection you can pass to the `selectedRegions` prop. Therefore you can,\nfor example, convert cell clicks into row selections.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectedRegions",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L310",
          "type": "IRegion[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>A <code>SelectionModes</code> enum value indicating the selection mode. You may\nequivalently provide an array of <code>RegionCardinality</code> enum values for\nprecise configuration.</p>\n<p>The <code>SelectionModes</code> enum values are:</p>\n<ul>\n<li><code>ALL</code></li>\n<li><code>NONE</code></li>\n<li><code>COLUMNS_AND_CELLS</code></li>\n<li><code>COLUMNS_ONLY</code></li>\n<li><code>ROWS_AND_CELLS</code></li>\n<li><code>ROWS_ONLY</code></li>\n</ul>\n<p>The <code>RegionCardinality</code> enum values are:</p>\n<ul>\n<li><code>FULL_COLUMNS</code></li>\n<li><code>FULL_ROWS</code></li>\n<li><code>FULL_TABLE</code></li>\n<li><code>CELLS</code></li>\n</ul>\n"
            ],
            "contentsRaw": "A `SelectionModes` enum value indicating the selection mode. You may\nequivalently provide an array of `RegionCardinality` enum values for\nprecise configuration.\n\nThe `SelectionModes` enum values are:\n- `ALL`\n- `NONE`\n- `COLUMNS_AND_CELLS`\n- `COLUMNS_ONLY`\n- `ROWS_AND_CELLS`\n- `ROWS_ONLY`\n\nThe `RegionCardinality` enum values are:\n- `FULL_COLUMNS`\n- `FULL_ROWS`\n- `FULL_TABLE`\n- `CELLS`",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "selectionModes",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L343",
          "defaultValue": "SelectionModes.ALL",
          "type": "RegionCardinality[]"
        },
        {
          "documentation": {
            "contents": [
              "<p>Styled region groups are rendered as overlays above the table and are\nmarked with their own <code>className</code> for custom styling.</p>\n"
            ],
            "contentsRaw": "Styled region groups are rendered as overlays above the table and are\nmarked with their own `className` for custom styling.",
            "metadata": {}
          },
          "fileName": "../table/src/table.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "styledRegionGroups",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/table.tsx#L349",
          "type": "IStyledRegionGroup[]"
        }
      ]
    },
    "ITimezoneMetadata": {
      "fileName": "../timezone/src/components/timezone-picker/timezoneMetadata.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITimezoneMetadata",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneMetadata.ts#L12",
      "methods": [],
      "properties": [
        {
          "fileName": "../timezone/src/components/timezone-picker/timezoneMetadata.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "abbreviation",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneMetadata.ts#L14",
          "type": "string | undefined"
        },
        {
          "fileName": "../timezone/src/components/timezone-picker/timezoneMetadata.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "offset",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneMetadata.ts#L15",
          "type": "number"
        },
        {
          "fileName": "../timezone/src/components/timezone-picker/timezoneMetadata.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "offsetAsString",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneMetadata.ts#L16",
          "type": "string"
        },
        {
          "fileName": "../timezone/src/components/timezone-picker/timezoneMetadata.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "population",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneMetadata.ts#L17",
          "type": "number | undefined"
        },
        {
          "fileName": "../timezone/src/components/timezone-picker/timezoneMetadata.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timezone",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneMetadata.ts#L13",
          "type": "string"
        }
      ]
    },
    "ITimezoneItem": {
      "documentation": {
        "contents": [
          "<p>Timezone-specific QueryList item</p>\n"
        ],
        "contentsRaw": "Timezone-specific QueryList item",
        "metadata": {}
      },
      "fileName": "../timezone/src/components/timezone-picker/timezoneItems.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITimezoneItem",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneItems.ts#L12",
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Optional icon for the timezone.</p>\n"
            ],
            "contentsRaw": "Optional icon for the timezone.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezoneItems.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "iconName",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneItems.ts#L23",
          "type": "IconName"
        },
        {
          "documentation": {
            "contents": [
              "<p>Key to be used as the rendered react key.</p>\n"
            ],
            "contentsRaw": "Key to be used as the rendered react key.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezoneItems.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "key",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneItems.ts#L14",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Label for the timezone.</p>\n"
            ],
            "contentsRaw": "Label for the timezone.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezoneItems.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "label",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneItems.ts#L20",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text for the timezone.</p>\n"
            ],
            "contentsRaw": "Text for the timezone.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezoneItems.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "text",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneItems.ts#L17",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>The actual timezone.</p>\n"
            ],
            "contentsRaw": "The actual timezone.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezoneItems.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "timezone",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezoneItems.ts#L26",
          "type": "string"
        }
      ]
    },
    "ITimezonePickerProps": {
      "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "interface",
      "name": "ITimezonePickerProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L30",
      "extends": [
        "any"
      ],
      "methods": [],
      "properties": [
        {
          "documentation": {
            "contents": [
              "<p>Callback invoked when the user selects a timezone.</p>\n"
            ],
            "contentsRaw": "Callback invoked when the user selects a timezone.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "onChange",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L40",
          "type": "(timezone: string) => void"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to the target <code>Button</code>.</p>\n"
            ],
            "contentsRaw": "Props to spread to the target `Button`.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "buttonProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L80",
          "type": "Partial<IButtonProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>The date to use when formatting timezone offsets.\nAn offset date is necessary to account for DST, but typically the default value of <code>now</code> will be sufficient.</p>\n"
            ],
            "contentsRaw": "The date to use when formatting timezone offsets.\nAn offset date is necessary to account for DST, but typically the default value of `now` will be sufficient.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "date",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L53",
          "defaultValue": "now",
          "type": "Date"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether this component is non-interactive.</p>\n"
            ],
            "contentsRaw": "Whether this component is non-interactive.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "disabled",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L59",
          "defaultValue": "false",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to the filter <code>InputGroup</code>.\nAll props are supported except <code>ref</code> (use <code>inputRef</code> instead).\nIf you want to control the filter input, you can pass <code>value</code> and <code>onChange</code> here\nto override <code>Select</code>&#39;s own behavior.</p>\n"
            ],
            "contentsRaw": "Props to spread to the filter `InputGroup`.\nAll props are supported except `ref` (use `inputRef` instead).\nIf you want to control the filter input, you can pass `value` and `onChange` here\nto override `Select`'s own behavior.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "inputProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L88",
          "type": "IInputGroupProps & HTMLInputProps"
        },
        {
          "documentation": {
            "contents": [
              "<p>This component does not support children.\nUse <code>value</code>, <code>valueDisplayFormat</code> and <code>buttonProps</code> to customize the button child.</p>\n"
            ],
            "contentsRaw": "This component does not support children.\nUse `value`, `valueDisplayFormat` and `buttonProps` to customize the button child.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "children",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L46",
          "type": "never"
        },
        {
          "documentation": {
            "contents": [
              "<p>Text to show when no timezone has been selected (<code>value === undefined</code>).</p>\n"
            ],
            "contentsRaw": "Text to show when no timezone has been selected (`value === undefined`).",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "placeholder",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L77",
          "defaultValue": "\"Select timezone...\"",
          "type": "string"
        },
        {
          "documentation": {
            "contents": [
              "<p>Props to spread to <code>Popover</code>. Note that <code>content</code> cannot be changed.</p>\n"
            ],
            "contentsRaw": "Props to spread to `Popover`. Note that `content` cannot be changed.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "popoverProps",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L91",
          "type": "Partial<IPopoverProps>"
        },
        {
          "documentation": {
            "contents": [
              "<p>Whether to show the local timezone at the top of the list of initial timezone suggestions.</p>\n"
            ],
            "contentsRaw": "Whether to show the local timezone at the top of the list of initial timezone suggestions.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "showLocalTimezone",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L65",
          "defaultValue": "true",
          "type": "boolean"
        },
        {
          "documentation": {
            "contents": [
              "<p>The currently selected timezone UTC identifier, e.g. &quot;Pacific/Honolulu&quot;.\nSee <a href=\"https://www.iana.org/time-zones\">https://www.iana.org/time-zones</a> for more information.</p>\n"
            ],
            "contentsRaw": "The currently selected timezone UTC identifier, e.g. \"Pacific/Honolulu\".\nSee https://www.iana.org/time-zones for more information.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "value",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L35",
          "type": "string | undefined"
        },
        {
          "documentation": {
            "contents": [
              "<p>Format to use when displaying the selected (or default) timezone within the target element.</p>\n"
            ],
            "contentsRaw": "Format to use when displaying the selected (or default) timezone within the target element.",
            "metadata": {}
          },
          "fileName": "../timezone/src/components/timezone-picker/timezonePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": true,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "property",
          "name": "valueDisplayFormat",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/timezone/src/components/timezone-picker/timezonePicker.tsx#L71",
          "defaultValue": "TimezoneDisplayFormat.OFFSET",
          "type": "TimezoneDisplayFormat"
        }
      ]
    },
    "Alignment": {
      "documentation": {
        "contents": [
          "<p>Alignment along the horizontal axis.</p>\n"
        ],
        "contentsRaw": "Alignment along the horizontal axis.",
        "metadata": {}
      },
      "fileName": "../core/src/common/alignment.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Alignment",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/alignment.ts#L8",
      "members": [
        {
          "fileName": "../core/src/common/alignment.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CENTER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/alignment.ts#L9",
          "defaultValue": "\"center\""
        },
        {
          "fileName": "../core/src/common/alignment.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LEFT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/alignment.ts#L10",
          "defaultValue": "\"left\""
        },
        {
          "fileName": "../core/src/common/alignment.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "RIGHT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/alignment.ts#L11",
          "defaultValue": "\"right\""
        }
      ]
    },
    "Elevation": {
      "fileName": "../core/src/common/elevation.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Elevation",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/elevation.ts#L8",
      "members": [
        {
          "fileName": "../core/src/common/elevation.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "FOUR",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/elevation.ts#L13",
          "defaultValue": "4"
        },
        {
          "fileName": "../core/src/common/elevation.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "ONE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/elevation.ts#L10",
          "defaultValue": "1"
        },
        {
          "fileName": "../core/src/common/elevation.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "THREE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/elevation.ts#L12",
          "defaultValue": "3"
        },
        {
          "fileName": "../core/src/common/elevation.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "TWO",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/elevation.ts#L11",
          "defaultValue": "2"
        },
        {
          "fileName": "../core/src/common/elevation.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "ZERO",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/elevation.ts#L9",
          "defaultValue": "0"
        }
      ]
    },
    "Intent": {
      "documentation": {
        "contents": [
          "<p>The four basic intents.</p>\n"
        ],
        "contentsRaw": "The four basic intents.",
        "metadata": {}
      },
      "fileName": "../core/src/common/intent.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Intent",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/intent.ts#L12",
      "members": [
        {
          "fileName": "../core/src/common/intent.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "DANGER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/intent.ts#L17",
          "defaultValue": "\"danger\""
        },
        {
          "fileName": "../core/src/common/intent.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NONE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/intent.ts#L13",
          "defaultValue": "\"none\""
        },
        {
          "fileName": "../core/src/common/intent.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "PRIMARY",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/intent.ts#L14",
          "defaultValue": "\"primary\""
        },
        {
          "fileName": "../core/src/common/intent.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "SUCCESS",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/intent.ts#L15",
          "defaultValue": "\"success\""
        },
        {
          "fileName": "../core/src/common/intent.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "WARNING",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/intent.ts#L16",
          "defaultValue": "\"warning\""
        }
      ]
    },
    "Boundary": {
      "documentation": {
        "contents": [
          "<p>Boundary of a one-dimensional interval.</p>\n"
        ],
        "contentsRaw": "Boundary of a one-dimensional interval.",
        "metadata": {}
      },
      "fileName": "../core/src/common/boundary.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Boundary",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/boundary.ts#L8",
      "members": [
        {
          "fileName": "../core/src/common/boundary.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "END",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/boundary.ts#L11",
          "defaultValue": "\"end\""
        },
        {
          "fileName": "../core/src/common/boundary.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "START",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/boundary.ts#L9",
          "defaultValue": "\"start\""
        }
      ]
    },
    "Position": {
      "fileName": "../core/src/common/position.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "Position",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L7",
      "members": [
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "RIGHT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L14",
          "defaultValue": "\"right\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "BOTTOM",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L8",
          "defaultValue": "\"bottom\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "BOTTOM_RIGHT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L10",
          "defaultValue": "\"bottom-right\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LEFT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L11",
          "defaultValue": "\"left\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LEFT_BOTTOM",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L12",
          "defaultValue": "\"left-bottom\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LEFT_TOP",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L13",
          "defaultValue": "\"left-top\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "BOTTOM_LEFT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L9",
          "defaultValue": "\"bottom-left\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "RIGHT_BOTTOM",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L15",
          "defaultValue": "\"right-bottom\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "RIGHT_TOP",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L16",
          "defaultValue": "\"right-top\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "TOP",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L17",
          "defaultValue": "\"top\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "TOP_LEFT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L18",
          "defaultValue": "\"top-left\""
        },
        {
          "fileName": "../core/src/common/position.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "TOP_RIGHT",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/position.ts#L19",
          "defaultValue": "\"top-right\""
        }
      ]
    },
    "PopoverPosition": {
      "documentation": {
        "contents": [
          "<p><code>Position</code> with <code>&quot;auto&quot;</code> values, used by <code>Popover</code> and <code>Tooltip</code>.</p>\n"
        ],
        "contentsRaw": "`Position` with `\"auto\"` values, used by `Popover` and `Tooltip`.",
        "metadata": {}
      },
      "fileName": "../core/src/components/popover/popoverSharedProps.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "PopoverPosition",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L16",
      "members": [
        {
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "AUTO",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L18",
          "defaultValue": "\"auto\""
        },
        {
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "AUTO_END",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L19",
          "defaultValue": "\"auto-end\""
        },
        {
          "fileName": "../core/src/components/popover/popoverSharedProps.ts",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "AUTO_START",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popoverSharedProps.ts#L20",
          "defaultValue": "\"auto-start\""
        }
      ]
    },
    "PopoverInteractionKind": {
      "fileName": "../core/src/components/popover/popover.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "PopoverInteractionKind",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L25",
      "members": [
        {
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CLICK",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L26",
          "defaultValue": "\"click\""
        },
        {
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "CLICK_TARGET_ONLY",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L27",
          "defaultValue": "\"click-target\""
        },
        {
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "HOVER",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L28",
          "defaultValue": "\"hover\""
        },
        {
          "fileName": "../core/src/components/popover/popover.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "HOVER_TARGET_ONLY",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/popover/popover.tsx#L29",
          "defaultValue": "\"hover-target\""
        }
      ]
    },
    "HandleType": {
      "fileName": "../core/src/components/slider/handleProps.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "HandleType",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L9",
      "members": [
        {
          "documentation": {
            "contents": [
              "<p>An end handle appears as the right or bottom half of a square.</p>\n"
            ],
            "contentsRaw": "An end handle appears as the right or bottom half of a square.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "END",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L17",
          "defaultValue": "\"end\""
        },
        {
          "documentation": {
            "contents": [
              "<p>A full handle appears as a small square.</p>\n"
            ],
            "contentsRaw": "A full handle appears as a small square.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "FULL",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L11",
          "defaultValue": "\"full\""
        },
        {
          "documentation": {
            "contents": [
              "<p>A start handle appears as the left or top half of a square.</p>\n"
            ],
            "contentsRaw": "A start handle appears as the left or top half of a square.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "START",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L14",
          "defaultValue": "\"start\""
        }
      ]
    },
    "HandleInteractionKind": {
      "fileName": "../core/src/components/slider/handleProps.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "HandleInteractionKind",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L21",
      "members": [
        {
          "documentation": {
            "contents": [
              "<p>Locked handles prevent other handles from being dragged past then.</p>\n"
            ],
            "contentsRaw": "Locked handles prevent other handles from being dragged past then.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "LOCK",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L23",
          "defaultValue": "\"lock\""
        },
        {
          "documentation": {
            "contents": [
              "<p>Handles marked &quot;none&quot; are not interactive and do not appear in the UI.\nThey serve only to break the track into subsections that can be colored separately.</p>\n"
            ],
            "contentsRaw": "Handles marked \"none\" are not interactive and do not appear in the UI.\nThey serve only to break the track into subsections that can be colored separately.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "NONE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L32",
          "defaultValue": "\"none\""
        },
        {
          "documentation": {
            "contents": [
              "<p>Push handles move overlapping handles with them as they are dragged.</p>\n"
            ],
            "contentsRaw": "Push handles move overlapping handles with them as they are dragged.",
            "metadata": {}
          },
          "fileName": "../core/src/components/slider/handleProps.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "PUSH",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/handleProps.tsx#L26",
          "defaultValue": "\"push\""
        }
      ]
    },
    "TimePrecision": {
      "fileName": "../datetime/src/timePicker.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "enum",
      "name": "TimePrecision",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L33",
      "members": [
        {
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "MILLISECOND",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L34",
          "defaultValue": "\"millisecond\""
        },
        {
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "MINUTE",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L35",
          "defaultValue": "\"minute\""
        },
        {
          "fileName": "../datetime/src/timePicker.tsx",
          "flags": {
            "isExported": true,
            "isExternal": true,
            "isOptional": false,
            "isPrivate": false,
            "isProtected": false,
            "isPublic": false,
            "isStatic": false
          },
          "kind": "enum member",
          "name": "SECOND",
          "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/timePicker.tsx#L36",
          "defaultValue": "\"second\""
        }
      ]
    },
    "ICellInterval": {
      "documentation": {
        "contents": [
          "<p>An <em>inclusive</em> interval of ZERO-indexed cell indices.</p>\n"
        ],
        "contentsRaw": "An _inclusive_ interval of ZERO-indexed cell indices.",
        "metadata": {}
      },
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ICellInterval",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L80",
      "type": "[number, number]"
    },
    "HTMLDivProps": {
      "documentation": {
        "contents": [
          "<p>Alias for all valid HTML props for <code>&lt;div&gt;</code> element.\nDoes not include React&#39;s <code>ref</code> or <code>key</code>.</p>\n"
        ],
        "contentsRaw": "Alias for all valid HTML props for `<div>` element.\nDoes not include React's `ref` or `key`.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "HTMLDivProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L18",
      "type": "HTMLAttributes<HTMLDivElement>"
    },
    "MaybeElement": {
      "documentation": {
        "contents": [
          "<p>Alias for a <code>JSX.Element</code> or a value that renders nothing.</p>\n<p>In React, <code>boolean</code>, <code>null</code>, and <code>undefined</code> do not produce any output.</p>\n"
        ],
        "contentsRaw": "Alias for a `JSX.Element` or a value that renders nothing.\n\nIn React, `boolean`, `null`, and `undefined` do not produce any output.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "MaybeElement",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L31",
      "type": "Element | false | null | undefined"
    },
    "NumberRange": {
      "fileName": "../core/src/components/slider/rangeSlider.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "NumberRange",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/slider/rangeSlider.tsx#L15",
      "type": "[number, number]"
    },
    "TabId": {
      "fileName": "../core/src/components/tabs/tab.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "TabId",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tabs/tab.tsx#L13",
      "type": "string | number"
    },
    "IToastOptions": {
      "fileName": "../core/src/components/toast/toaster.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IToastOptions",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L21",
      "type": "IToastProps & "
    },
    "ToasterPosition": {
      "fileName": "../core/src/components/toast/toaster.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ToasterPosition",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/toast/toaster.tsx#L22",
      "type": "\"top\" | \"top-left\" | \"top-right\" | \"bottom\" | \"bottom-left\" | \"bottom-right\""
    },
    "TreeEventHandler": {
      "fileName": "../core/src/components/tree/tree.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "TreeEventHandler",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/components/tree/tree.tsx#L15",
      "type": "(node: ITreeNode<T>, nodePath: number[], e: MouseEvent<HTMLElement>) => void"
    },
    "DateRange": {
      "fileName": "../datetime/src/common/dateUtils.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "DateRange",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/datetime/src/common/dateUtils.ts#L9",
      "type": "[Date | undefined, Date | undefined]"
    },
    "IDocsData": {
      "documentation": {
        "contents": [
          "<p>This docs theme requires Markdown data and optionally supports Typescript and KSS data.</p>\n"
        ],
        "contentsRaw": "This docs theme requires Markdown data and optionally supports Typescript and KSS data.",
        "metadata": {}
      },
      "fileName": "../docs-theme/src/common/context.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IDocsData",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/common/context.ts#L18",
      "type": "IMarkdownPluginData & any & any & any"
    },
    "Renderer": {
      "fileName": "../docs-theme/src/components/typescript/interfaceTable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "Renderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/docs-theme/src/components/typescript/interfaceTable.tsx#L24",
      "type": "(props: T) => React.ReactNode"
    },
    "IconName": {
      "documentation": {
        "contents": [
          "<p>String literal union type of all Blueprint UI icon names.</p>\n"
        ],
        "contentsRaw": "String literal union type of all Blueprint UI icon names.",
        "metadata": {}
      },
      "fileName": "../icons/src/iconName.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IconName",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/icons/src/iconName.ts#L8",
      "type": "any"
    },
    "ItemListRenderer": {
      "documentation": {
        "contents": [
          "<p>Type alias for a function that renders the list of items.</p>\n"
        ],
        "contentsRaw": "Type alias for a function that renders the list of items.",
        "metadata": {}
      },
      "fileName": "../select/src/common/itemListRenderer.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ItemListRenderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemListRenderer.ts#L51",
      "type": "(itemListProps: IItemListRendererProps<T>) => Element"
    },
    "ItemRenderer": {
      "documentation": {
        "contents": [
          "<p>Type alias for a function that receives an item and props and renders a JSX element (or <code>null</code>).</p>\n"
        ],
        "contentsRaw": "Type alias for a function that receives an item and props and renders a JSX element (or `null`).",
        "metadata": {}
      },
      "fileName": "../select/src/common/itemRenderer.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ItemRenderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/itemRenderer.ts#L38",
      "type": "(item: T, itemProps: IItemRendererProps) => Element | null"
    },
    "ItemListPredicate": {
      "documentation": {
        "contents": [
          "<p>Customize querying of entire <code>items</code> array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)</p>\n<p>If defined with <code>itemPredicate</code>, this prop takes priority and the other will be ignored.</p>\n"
        ],
        "contentsRaw": "Customize querying of entire `items` array. Return new list of items.\nThis method can reorder, add, or remove items at will.\n(Supports filter algorithms that operate on the entire set, rather than individual items.)\n\nIf defined with `itemPredicate`, this prop takes priority and the other will be ignored.",
        "metadata": {}
      },
      "fileName": "../select/src/common/predicate.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ItemListPredicate",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/predicate.ts#L14",
      "type": "(query: string, items: T[]) => T[]"
    },
    "ItemPredicate": {
      "documentation": {
        "contents": [
          "<p>Customize querying of individual items. Return <code>true</code> to keep the item, <code>false</code> to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use <code>itemListPredicate</code> to operate once on the entire array.</p>\n<p>If defined with <code>itemListPredicate</code>, this prop will be ignored.</p>\n"
        ],
        "contentsRaw": "Customize querying of individual items. Return `true` to keep the item, `false` to hide.\nThis method will be invoked once for each item, so it should be performant. For more complex\nqueries, use `itemListPredicate` to operate once on the entire array.\n\nIf defined with `itemListPredicate`, this prop will be ignored.",
        "metadata": {}
      },
      "fileName": "../select/src/common/predicate.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ItemPredicate",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/select/src/common/predicate.ts#L23",
      "type": "(query: string, item: T, index?: number) => boolean"
    },
    "HTMLInputProps": {
      "documentation": {
        "contents": [
          "<p>Alias for all valid HTML props for <code>&lt;input&gt;</code> element.\nDoes not include React&#39;s <code>ref</code> or <code>key</code>.</p>\n"
        ],
        "contentsRaw": "Alias for all valid HTML props for `<input>` element.\nDoes not include React's `ref` or `key`.",
        "metadata": {}
      },
      "fileName": "../core/src/common/props.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "HTMLInputProps",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/core/src/common/props.ts#L24",
      "type": "InputHTMLAttributes<HTMLInputElement>"
    },
    "ICellCoordinate": {
      "documentation": {
        "contents": [
          "<p>Small datastructure for storing cell coordinates [row, column]</p>\n"
        ],
        "contentsRaw": "Small datastructure for storing cell coordinates [row, column]",
        "metadata": {}
      },
      "fileName": "../table/src/regions.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ICellCoordinate",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/regions.ts#L85",
      "type": "[number, number]"
    },
    "AnyRect": {
      "fileName": "../table/src/common/rect.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "AnyRect",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/rect.ts#L9",
      "type": "Rect | ClientRect"
    },
    "ICellMapper": {
      "fileName": "../table/src/common/grid.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ICellMapper",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L14",
      "type": "(rowIndex: number, columnIndex: number) => T"
    },
    "IRowMapper": {
      "fileName": "../table/src/common/grid.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IRowMapper",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L15",
      "type": "(rowIndex: number) => T"
    },
    "IColumnMapper": {
      "fileName": "../table/src/common/grid.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IColumnMapper",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/grid.ts#L16",
      "type": "(columnIndex: number) => T"
    },
    "ICellRenderer": {
      "fileName": "../table/src/cell/cell.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ICellRenderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/cell/cell.tsx#L98",
      "type": "(rowIndex: number, columnIndex: number) => ReactElement<ICellProps>"
    },
    "IClientCoordinates": {
      "fileName": "../table/src/interactions/draggable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IClientCoordinates",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/draggable.tsx#L13",
      "type": "[number, number]"
    },
    "IIndexedResizeCallback": {
      "fileName": "../table/src/interactions/resizable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IIndexedResizeCallback",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/resizable.tsx#L12",
      "type": "(index: number, size: number) => void"
    },
    "ISelectedRegionTransform": {
      "fileName": "../table/src/interactions/selectable.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ISelectedRegionTransform",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/selectable.tsx#L18",
      "type": "(region: IRegion, event: MouseEvent | KeyboardEvent, coords?: ICoordinateData) => IRegion"
    },
    "IHeaderCellRenderer": {
      "fileName": "../table/src/headers/header.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IHeaderCellRenderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/header.tsx#L24",
      "type": "(index: number) => ReactElement<IHeaderCellProps>"
    },
    "IColumnHeaderRenderer": {
      "fileName": "../table/src/headers/columnHeader.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IColumnHeaderRenderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/columnHeader.tsx#L20",
      "type": "(columnIndex: number) => ReactElement<IColumnHeaderCellProps>"
    },
    "IContextMenuRenderer": {
      "fileName": "../table/src/interactions/menus/menuContext.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IContextMenuRenderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/interactions/menus/menuContext.ts#L9",
      "type": "(context: IMenuContext) => Element"
    },
    "IRowHeaderRenderer": {
      "fileName": "../table/src/headers/rowHeader.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IRowHeaderRenderer",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/headers/rowHeader.tsx#L19",
      "type": "(rowIndex: number) => ReactElement<IRowHeaderCellProps>"
    },
    "IRegionStyler": {
      "fileName": "../table/src/layers/regions.tsx",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "IRegionStyler",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/layers/regions.tsx#L14",
      "type": "(region: IRegion, quadrantType?: QuadrantType) => CSSProperties"
    },
    "ScrollKey": {
      "fileName": "../table/src/quadrants/tableQuadrantStackCache.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "ScrollKey",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/quadrants/tableQuadrantStackCache.ts#L7",
      "type": "\"scrollLeft\" | \"scrollTop\""
    },
    "SimpleStringifyable": {
      "fileName": "../table/src/common/batcher.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "SimpleStringifyable",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/batcher.ts#L10",
      "type": "string | number | null | undefined"
    },
    "Callback": {
      "fileName": "../table/src/common/batcher.ts",
      "flags": {
        "isExported": true,
        "isExternal": true,
        "isOptional": false,
        "isPrivate": false,
        "isProtected": false,
        "isPublic": false,
        "isStatic": false
      },
      "kind": "type alias",
      "name": "Callback",
      "sourceUrl": "https://github.com/palantir/blueprint/blob/cde3dc28/packages/table/src/common/batcher.ts#L12",
      "type": "() => void"
    }
  },
  "css": {
    "blockquote": {
      "documentation": "",
      "markup": "<blockquote class=\"bp3-blockquote\">\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n  ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n  ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</blockquote>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>blockquote</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-blockquote</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;Lorem&nbsp;ipsum&nbsp;dolor&nbsp;sit&nbsp;amet,&nbsp;consectetur&nbsp;adipiscing&nbsp;elit,&nbsp;sed&nbsp;do&nbsp;eiusmod&nbsp;tempor&nbsp;incididunt</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;ut&nbsp;labore&nbsp;et&nbsp;dolore&nbsp;magna&nbsp;aliqua.&nbsp;Ut&nbsp;enim&nbsp;ad&nbsp;minim&nbsp;veniam,&nbsp;quis&nbsp;nostrud&nbsp;exercitation</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;ullamco&nbsp;laboris&nbsp;nisi&nbsp;ut&nbsp;aliquip&nbsp;ex&nbsp;ea&nbsp;commodo&nbsp;consequat.&nbsp;Duis&nbsp;aute&nbsp;irure&nbsp;dolor&nbsp;in</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;reprehenderit&nbsp;in&nbsp;voluptate&nbsp;velit&nbsp;esse&nbsp;cillum&nbsp;dolore&nbsp;eu&nbsp;fugiat&nbsp;nulla&nbsp;pariatur.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>blockquote</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "blockquote"
    },
    "breadcrumbs": {
      "documentation": "",
      "markup": "<ul class=\"bp3-breadcrumbs\">\n  <li><a class=\"bp3-breadcrumbs-collapsed\" href=\"#\"></a></li>\n  <li><a class=\"bp3-breadcrumb bp3-disabled\">Folder one</a></li>\n  <li><a class=\"bp3-breadcrumb\" href=\"#\">Folder two</a></li>\n  <li><a class=\"bp3-breadcrumb\" href=\"#\">Folder three</a></li>\n  <li><span class=\"bp3-breadcrumb bp3-breadcrumb-current\">File</span></li>\n</ul>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-breadcrumbs</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-breadcrumbs-collapsed</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>#</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-breadcrumb&nbsp;bp3-disabled</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Folder&nbsp;one</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-breadcrumb</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>#</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Folder&nbsp;two</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-breadcrumb</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>#</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Folder&nbsp;three</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-breadcrumb&nbsp;bp3-breadcrumb-current</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>File</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "breadcrumbs"
    },
    "button": {
      "documentation": "",
      "markup": "<a role=\"button\" class=\"bp3-button {{.modifier}}\" {{:modifier}} tabindex=\"0\">Anchor</a>\n<button type=\"button\" class=\"bp3-button bp3-icon-add {{.modifier}}\" {{:modifier}}>Button</button>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Anchor</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-add&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Button</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disabled state</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Active appearance</p>\n",
          "name": ".bp3-active"
        },
        {
          "documentation": "<p>Disabled appearance</p>\n",
          "name": ".bp3-disabled"
        },
        {
          "documentation": "<p>Primary intent</p>\n",
          "name": ".bp3-intent-primary"
        },
        {
          "documentation": "<p>Success intent</p>\n",
          "name": ".bp3-intent-success"
        },
        {
          "documentation": "<p>Warning intent</p>\n",
          "name": ".bp3-intent-warning"
        },
        {
          "documentation": "<p>Danger intent</p>\n",
          "name": ".bp3-intent-danger"
        },
        {
          "documentation": "<p>More subtle appearance</p>\n",
          "name": ".bp3-minimal"
        },
        {
          "documentation": "<p>Larger size</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Smaller size</p>\n",
          "name": ".bp3-small"
        },
        {
          "documentation": "<p>Fill parent container</p>\n",
          "name": ".bp3-fill"
        }
      ],
      "reference": "button"
    },
    "button-group": {
      "documentation": "",
      "markup": "<div class=\"bp3-button-group {{.modifier}}\">\n  <button type=\"button\" class=\"bp3-button bp3-intent-success\">Save</button>\n  <button type=\"button\" class=\"bp3-button bp3-intent-success bp3-icon-caret-down\"></button>\n</div>\n<div class=\"bp3-button-group {{.modifier}}\">\n  <a class=\"bp3-button bp3-icon-database\" tabindex=\"0\" role=\"button\">Queries</a>\n  <a class=\"bp3-button bp3-icon-function\" tabindex=\"0\" role=\"button\">Functions</a>\n  <a class=\"bp3-button\" tabindex=\"0\" role=\"button\">\n    Options <span class=\"bp3-icon-standard bp3-icon-caret-down bp3-align-right\"></span>\n  </a>\n</div>\n<div class=\"bp3-button-group {{.modifier}}\">\n  <a class=\"bp3-button bp3-icon-chart\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-control\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-graph\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-camera\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-map\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-code\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-th\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-time\" tabindex=\"0\" role=\"button\"></a>\n  <a class=\"bp3-button bp3-icon-compressed\" tabindex=\"0\" role=\"button\"></a>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-success</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Save</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-success&nbsp;bp3-icon-caret-down</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-database</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Queries</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-function</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Functions</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Options&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon-standard&nbsp;bp3-icon-caret-down&nbsp;bp3-align-right</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-chart</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-control</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-graph</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-camera</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-map</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-code</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-th</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-time</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-compressed</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Buttons expand equally to fill container</p>\n",
          "name": ".bp3-fill"
        },
        {
          "documentation": "<p>Use large buttons</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Use minimal buttons</p>\n",
          "name": ".bp3-minimal"
        },
        {
          "documentation": "<p>Vertical layout</p>\n",
          "name": ".bp3-vertical"
        }
      ],
      "reference": "button-group"
    },
    "button-group-vertical": {
      "documentation": "",
      "markup": "<div class=\"bp3-button-group bp3-vertical\">\n  <a class=\"bp3-button bp3-icon-search-template\" role=\"button\" tabindex=\"0\"></a>\n  <a class=\"bp3-button bp3-icon-zoom-in\" role=\"button\" tabindex=\"0\"></a>\n  <a class=\"bp3-button bp3-icon-zoom-out\" role=\"button\" tabindex=\"0\"></a>\n  <a class=\"bp3-button bp3-icon-zoom-to-fit\" role=\"button\" tabindex=\"0\"></a>\n</div>\n<div class=\"bp3-button-group bp3-vertical\">\n  <button type=\"button\" class=\"bp3-button bp3-active\">Home</button>\n  <button type=\"button\" class=\"bp3-button\">Pages</button>\n  <button type=\"button\" class=\"bp3-button\">Blog</button>\n  <button type=\"button\" class=\"bp3-button\">Calendar</button>\n</div>\n<div class=\"bp3-button-group bp3-vertical bp3-align-left bp3-large\">\n  <button type=\"button\" class=\"bp3-button bp3-intent-primary bp3-icon-document\">Text</button>\n  <button type=\"button\" class=\"bp3-button bp3-intent-primary bp3-icon-media bp3-active\">Media</button>\n  <button type=\"button\" class=\"bp3-button bp3-intent-primary bp3-icon-link\">Sources</button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;bp3-vertical</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-search-template</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-zoom-in</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-zoom-out</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-zoom-to-fit</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;bp3-vertical</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-active</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Home</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Pages</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Blog</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Calendar</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;bp3-vertical&nbsp;bp3-align-left&nbsp;bp3-large</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary&nbsp;bp3-icon-document</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Text</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary&nbsp;bp3-icon-media&nbsp;bp3-active</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Media</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary&nbsp;bp3-icon-link</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Sources</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "button-group-vertical"
    },
    "button-group}-fill": {
      "documentation": "",
      "markup": "<div class=\"bp3-button-group bp3-large bp3-fill\">\n  <a class=\"bp3-button bp3-intent-primary bp3-fixed\" tabindex=\"0\" role=\"button\">Start</a>\n  <a class=\"bp3-button bp3-intent-primary\" tabindex=\"0\" role=\"button\">Left</a>\n  <a class=\"bp3-button bp3-intent-primary bp3-active\" tabindex=\"0\" role=\"button\">Middle</a>\n  <a class=\"bp3-button bp3-intent-primary\" tabindex=\"0\" role=\"button\">Right</a>\n  <a class=\"bp3-button bp3-intent-primary bp3-fixed\" tabindex=\"0\" role=\"button\">End</a>\n</div>\n<br />\n<div class=\"bp3-button-group bp3-fill\">\n  <button class=\"bp3-button bp3-icon-arrow-left\"></button>\n  <button class=\"bp3-button bp3-fill\">Middle</button>\n  <button class=\"bp3-button bp3-icon-arrow-right\"></button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;bp3-large&nbsp;bp3-fill</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary&nbsp;bp3-fixed</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Start</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Left</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary&nbsp;bp3-active</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Middle</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Right</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary&nbsp;bp3-fixed</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>End</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>br</span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button-group&nbsp;bp3-fill</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-arrow-left</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-fill</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Middle</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-arrow-right</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "button-group}-fill"
    },
    "callout": {
      "documentation": "",
      "markup": "<div class=\"bp3-callout {{.modifier}}\">\n  <h4 class=\"bp3-heading\">Callout Heading</h4>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex, delectus!\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-callout&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Callout&nbsp;Heading</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;Lorem&nbsp;ipsum&nbsp;dolor&nbsp;sit&nbsp;amet,&nbsp;consectetur&nbsp;adipisicing&nbsp;elit.&nbsp;Ex,&nbsp;delectus!</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Primary intent</p>\n",
          "name": ".bp3-intent-primary"
        },
        {
          "documentation": "<p>Success intent</p>\n",
          "name": ".bp3-intent-success"
        },
        {
          "documentation": "<p>Warning intent</p>\n",
          "name": ".bp3-intent-warning"
        },
        {
          "documentation": "<p>Danger intent</p>\n",
          "name": ".bp3-intent-danger"
        },
        {
          "documentation": "<p>With an icon</p>\n",
          "name": ".bp3-icon-info-sign"
        }
      ],
      "reference": "callout"
    },
    "card": {
      "documentation": "",
      "markup": "<div class=\"bp3-card {{.modifier}}\">\n  We build products that make people better at their most important work.\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-card&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;We&nbsp;build&nbsp;products&nbsp;that&nbsp;make&nbsp;people&nbsp;better&nbsp;at&nbsp;their&nbsp;most&nbsp;important&nbsp;work.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Ground floor. This level provides just a gentle border shadow.</p>\n",
          "name": ".bp3-elevation-0"
        },
        {
          "documentation": "<p>First. Subtle drop shadow intended for static containers.</p>\n",
          "name": ".bp3-elevation-1"
        },
        {
          "documentation": "<p>Second. An even stronger shadow, moving on up.</p>\n",
          "name": ".bp3-elevation-2"
        },
        {
          "documentation": "<p>Third. For containers overlaying content temporarily.</p>\n",
          "name": ".bp3-elevation-3"
        },
        {
          "documentation": "<p>Fourth. The strongest shadow, usually for overlay containers on top of backdrops.</p>\n",
          "name": ".bp3-elevation-4"
        },
        {
          "documentation": "<p>On hover, increase elevation and use pointer cursor.</p>\n",
          "name": ".bp3-interactive"
        }
      ],
      "reference": "card"
    },
    "checkbox": {
      "documentation": "",
      "markup": "<label class=\"bp3-control bp3-checkbox {{.modifier}}\">\n  <input type=\"checkbox\" {{:modifier}} />\n  <span class=\"bp3-control-indicator\"></span>\n  Checkbox\n</label>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control&nbsp;bp3-checkbox&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>checkbox</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-indicator</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;Checkbox</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Checked</p>\n",
          "name": ":checked"
        },
        {
          "documentation": "<p>Disabled. Also add <code>.bp3-disabled</code> to <code>.bp3-control</code> to change text color (not shown below).</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Indeterminate. Note that this style can only be achieved via JavaScript <code>input.indeterminate = true</code>.</p>\n",
          "name": ":indeterminate"
        },
        {
          "documentation": "<p>Right-aligned indicator</p>\n",
          "name": ".bp3-align-right"
        },
        {
          "documentation": "<p>Large</p>\n",
          "name": ".bp3-large"
        }
      ],
      "reference": "checkbox"
    },
    "checkbox-inline": {
      "documentation": "",
      "markup": "<div>\n  <label class=\"bp3-label\">A group of related options</label>\n  <label class=\"bp3-control bp3-checkbox bp3-inline\">\n    <input type=\"checkbox\" />\n    <span class=\"bp3-control-indicator\"></span>\n    First\n  </label>\n  <label class=\"bp3-control bp3-checkbox bp3-inline\">\n    <input type=\"checkbox\" />\n    <span class=\"bp3-control-indicator\"></span>\n    Second\n  </label>\n  <label class=\"bp3-control bp3-checkbox bp3-inline\">\n    <input type=\"checkbox\" />\n    <span class=\"bp3-control-indicator\"></span>\n    Third\n  </label>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-label</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>A&nbsp;group&nbsp;of&nbsp;related&nbsp;options</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control&nbsp;bp3-checkbox&nbsp;bp3-inline</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>checkbox</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-indicator</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;First</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control&nbsp;bp3-checkbox&nbsp;bp3-inline</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>checkbox</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-indicator</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Second</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control&nbsp;bp3-checkbox&nbsp;bp3-inline</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>checkbox</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-indicator</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Third</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "checkbox-inline"
    },
    "control-group": {
      "documentation": "",
      "markup": "<div class=\"bp3-control-group\">\n  <button class=\"bp3-button bp3-icon-filter\">Filter</button>\n  <input type=\"text\" class=\"bp3-input\" placeholder=\"Find filters...\" />\n</div>\n<div class=\"bp3-control-group\">\n  <div class=\"bp3-select\">\n    <select>\n      <option selected>Filter...</option>\n      <option value=\"1\">Issues</option>\n      <option value=\"2\">Requests</option>\n      <option value=\"3\">Projects</option>\n    </select>\n  </div>\n  <div class=\"bp3-input-group\">\n    <span class=\"bp3-icon bp3-icon-search\"></span>\n    <input type=\"text\" class=\"bp3-input\" value=\"from:ggray to:allorca\" />\n  </div>\n</div>\n<div class=\"bp3-control-group\">\n  <div class=\"bp3-input-group\">\n    <span class=\"bp3-icon bp3-icon-people\"></span>\n    <input type=\"text\" class=\"bp3-input\" placeholder=\"Find collaborators...\" style=\"padding-right:94px\" />\n    <div class=\"bp3-input-action\">\n      <button class=\"bp3-button bp3-minimal bp3-intent-primary\">\n        can view<span class=\"bp3-icon-standard bp3-icon-caret-down bp3-align-right\"></span>\n      </button>\n    </div>\n  </div>\n  <button class=\"bp3-button bp3-intent-primary\">Add</button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-group</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-filter</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Filter</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Find&nbsp;filters...</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-group</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-select</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>select</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;selected</span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Filter...</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>1</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Issues</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>2</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Requests</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>3</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Projects</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>select</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-search</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>from:ggray&nbsp;to:allorca</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-group</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-people</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Find&nbsp;collaborators...</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>padding-right:94px</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-action</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;can&nbsp;view</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon-standard&nbsp;bp3-icon-caret-down&nbsp;bp3-align-right</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Add</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "control-group"
    },
    "control-group-fill": {
      "documentation": "",
      "markup": "<div class=\"bp3-control-group\">\n  <div class=\"bp3-input-group bp3-fill\">\n    <span class=\"bp3-icon bp3-icon-people\"></span>\n    <input type=\"text\" class=\"bp3-input\" placeholder=\"Find collaborators...\" />\n  </div>\n  <button class=\"bp3-button bp3-intent-primary\">Add</button>\n</div>\n<div class=\"bp3-control-group bp3-fill\">\n  <button class=\"bp3-button bp3-icon-minus bp3-fixed\"></button>\n  <input type=\"text\" class=\"bp3-input\" placeholder=\"Enter a value...\" />\n  <button class=\"bp3-button bp3-icon-plus bp3-fixed\"></button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-group</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;bp3-fill</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-people</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Find&nbsp;collaborators...</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Add</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-group&nbsp;bp3-fill</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-minus&nbsp;bp3-fixed</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Enter&nbsp;a&nbsp;value...</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-plus&nbsp;bp3-fixed</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "control-group-fill"
    },
    "control-group-vertical": {
      "documentation": "",
      "markup": "<div class=\"bp3-control-group bp3-vertical\" style=\"width: 300px;\">\n  <div class=\"bp3-input-group bp3-large\">\n    <span class=\"bp3-icon bp3-icon-person\"></span>\n    <input type=\"text\" class=\"bp3-input\" placeholder=\"Username\" />\n  </div>\n  <div class=\"bp3-input-group bp3-large\">\n    <span class=\"bp3-icon bp3-icon-lock\"></span>\n    <input type=\"password\" class=\"bp3-input\" placeholder=\"Password\" />\n  </div>\n  <button class=\"bp3-button bp3-large bp3-intent-primary\">Login</button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-group&nbsp;bp3-vertical</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;300px;</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;bp3-large</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-person</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Username</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;bp3-large</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-lock</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>password</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Password</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-large&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Login</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "control-group-vertical"
    },
    "dialog": {
      "documentation": "",
      "markup": "<!-- this container element fills its parent and centers the .bp3-dialog within it -->\n<div class=\"bp3-dialog-container\">\n  <div class=\"bp3-dialog\">\n    <div class=\"bp3-dialog-header\">\n      <span class=\"bp3-icon-large bp3-icon-inbox\"></span>\n      <h4 class=\"bp3-heading\">Dialog header</h4>\n      <button aria-label=\"Close\" class=\"bp3-dialog-close-button bp3-icon-small-cross\"></button>\n    </div>\n    <div class=\"bp3-dialog-body\">\n      This dialog hasn't been wired up with any open or close interactions.\n      It's just an example of markup and styles.\n    </div>\n    <div class=\"bp3-dialog-footer\">\n      <div class=\"bp3-dialog-footer-actions\">\n        <button type=\"button\" class=\"bp3-button\">Secondary button</button>\n        <button type=\"submit\" class=\"bp3-button bp3-intent-primary\">Primary button</button>\n      </div>\n    </div>\n  </div>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;this&nbsp;container&nbsp;element&nbsp;fills&nbsp;its&nbsp;parent&nbsp;and&nbsp;centers&nbsp;the&nbsp;.bp3-dialog&nbsp;within&nbsp;it&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-dialog-container</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-dialog</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-dialog-header</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon-large&nbsp;bp3-icon-inbox</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Dialog&nbsp;header</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>aria-label</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Close</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-dialog-close-button&nbsp;bp3-icon-small-cross</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-dialog-body</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;dialog&nbsp;hasn&#39;t&nbsp;been&nbsp;wired&nbsp;up&nbsp;with&nbsp;any&nbsp;open&nbsp;or&nbsp;close&nbsp;interactions.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It&#39;s&nbsp;just&nbsp;an&nbsp;example&nbsp;of&nbsp;markup&nbsp;and&nbsp;styles.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-dialog-footer</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-dialog-footer-actions</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Secondary&nbsp;button</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>submit</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Primary&nbsp;button</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "dialog"
    },
    "file-input": {
      "documentation": "",
      "markup": "<label class=\"bp3-file-input {{.modifier}}\">\n  <input type=\"file\" {{:modifier}}/>\n  <span class=\"bp3-file-upload-input\">Choose file...</span>\n</label>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-file-input&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>file</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-file-upload-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Choose&nbsp;file...</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disabled</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Larger size</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Take up full width of parent element</p>\n",
          "name": ".bp3-fill"
        }
      ],
      "reference": "file-input"
    },
    "form-group": {
      "documentation": "",
      "markup": "<div class=\"bp3-form-group {{.modifier}}\">\n  <label class=\"bp3-label\" for=\"form-group-input\">\n    Label\n    <span class=\"bp3-text-muted\">(required)</span>\n  </label>\n  <div class=\"bp3-form-content\">\n    <div class=\"bp3-input-group {{.modifier}}\">\n      <span class=\"bp3-icon bp3-icon-calendar\"></span>\n      <input id=\"form-group-input\" type=\"text\" {{:modifier}} class=\"bp3-input\"\n             style=\"width: 200px;\" placeholder=\"Placeholder text\" dir=\"auto\" />\n    </div>\n    <div class=\"bp3-form-helper-text\">Please enter a value</div>\n  </div>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-form-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-label</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>for</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>form-group-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Label</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-text-muted</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>(required)</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-form-content</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-calendar</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"meta attribute-with-value id html\"><span class=\"entity other attribute-name id html\"><span>id</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>form-group-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;200px;</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Placeholder&nbsp;text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>dir</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>auto</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-form-helper-text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Please&nbsp;enter&nbsp;a&nbsp;value</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disable the input.</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Disabled styles. Input must be disabled separately via attribute.</p>\n",
          "name": ".bp3-disabled"
        },
        {
          "documentation": "<p>Label and content appear side by side.</p>\n",
          "name": ".bp3-inline"
        },
        {
          "documentation": "<p>Apply intent to form group and input separately.</p>\n",
          "name": ".bp3-intent-primary"
        }
      ],
      "reference": "form-group"
    },
    "headings": {
      "documentation": "",
      "markup": "<div>\n  <h1 class=\"bp3-heading\">H1 heading</h1>\n  <h2 class=\"bp3-heading\">H2 heading</h2>\n  <h3 class=\"bp3-heading\">H3 heading</h3>\n  <h4 class=\"bp3-heading\">H4 heading</h4>\n  <h5 class=\"bp3-heading\">H5 heading</h5>\n  <h6 class=\"bp3-heading\">H6 heading</h6>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h1</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>H1&nbsp;heading</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h1</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h2</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>H2&nbsp;heading</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h2</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h3</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>H3&nbsp;heading</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h3</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>H4&nbsp;heading</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>H5&nbsp;heading</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h6</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>H6&nbsp;heading</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h6</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "headings"
    },
    "html-table": {
      "documentation": "",
      "markup": "<table class=\"bp3-html-table {{.modifier}}\">\n  <thead>\n    <tr>\n      <th>Project</th>\n      <th>Description</th>\n      <th>Technologies</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Blueprint</td>\n      <td>CSS framework and UI toolkit</td>\n      <td>Sass, TypeScript, React</td>\n    </tr>\n    <tr>\n      <td>TSLint</td>\n      <td>Static analysis linter for TypeScript</td>\n      <td>TypeScript</td>\n    </tr>\n    <tr>\n      <td>Plottable</td>\n      <td>Composable charting library built on top of D3</td>\n      <td>SVG, TypeScript, D3</td>\n    </tr>\n  </tbody>\n</table>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>table</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-html-table&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>thead</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>th</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Project</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>th</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>th</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Description</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>th</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>th</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Technologies</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>th</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>thead</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>tbody</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Blueprint</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>CSS&nbsp;framework&nbsp;and&nbsp;UI&nbsp;toolkit</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Sass,&nbsp;TypeScript,&nbsp;React</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>TSLint</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Static&nbsp;analysis&nbsp;linter&nbsp;for&nbsp;TypeScript</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>TypeScript</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Plottable</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Composable&nbsp;charting&nbsp;library&nbsp;built&nbsp;on&nbsp;top&nbsp;of&nbsp;D3</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>SVG,&nbsp;TypeScript,&nbsp;D3</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>td</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>tr</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>tbody</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>table</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Bordered appearance</p>\n",
          "name": ".bp3-html-table-bordered"
        },
        {
          "documentation": "<p>Condensed smaller appearance</p>\n",
          "name": ".bp3-html-table-condensed"
        },
        {
          "documentation": "<p>Striped appearance</p>\n",
          "name": ".bp3-html-table-striped"
        },
        {
          "documentation": "<p>Enables hover styles on rows</p>\n",
          "name": ".bp3-interactive"
        },
        {
          "documentation": "<p>Small, condensed appearance for this element <em>and all child elements</em></p>\n",
          "name": ".bp3-small"
        }
      ],
      "reference": "html-table"
    },
    "input": {
      "documentation": "",
      "markup": "<input class=\"bp3-input {{.modifier}}\" {{:modifier}} type=\"text\" placeholder=\"Text input\" dir=\"auto\" />",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Text&nbsp;input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>dir</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>auto</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disabled</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Readonly</p>\n",
          "name": ":readonly"
        },
        {
          "documentation": "<p>Rounded ends</p>\n",
          "name": ".bp3-round"
        },
        {
          "documentation": "<p>Larger size</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Small size</p>\n",
          "name": ".bp3-small"
        },
        {
          "documentation": "<p>Primary intent</p>\n",
          "name": ".bp3-intent-primary"
        },
        {
          "documentation": "<p>Success intent</p>\n",
          "name": ".bp3-intent-success"
        },
        {
          "documentation": "<p>Warning intent</p>\n",
          "name": ".bp3-intent-warning"
        },
        {
          "documentation": "<p>Danger intent</p>\n",
          "name": ".bp3-intent-danger"
        },
        {
          "documentation": "<p>Take up full width of parent element</p>\n",
          "name": ".bp3-fill"
        }
      ],
      "reference": "input"
    },
    "input-group": {
      "documentation": "",
      "markup": "<div class=\"bp3-input-group {{.modifier}}\">\n  <span class=\"bp3-icon bp3-icon-filter\"></span>\n  <input type=\"text\" class=\"bp3-input\" {{:modifier}} placeholder=\"Filter histogram...\" />\n</div>\n<div class=\"bp3-input-group {{.modifier}}\">\n  <input type=\"password\" class=\"bp3-input\" {{:modifier}} placeholder=\"Enter your password...\" />\n  <button class=\"bp3-button bp3-minimal bp3-intent-warning bp3-icon-lock\" {{:modifier}}></button>\n</div>\n<div class=\"bp3-input-group {{.modifier}}\">\n  <span class=\"bp3-icon bp3-icon-search\"></span>\n  <input type=\"text\" class=\"bp3-input\" {{:modifier}} placeholder=\"Search\" />\n  <button class=\"bp3-button bp3-minimal bp3-intent-primary bp3-icon-arrow-right\" {{:modifier}}></button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-filter</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Filter&nbsp;histogram...</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>password</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Enter&nbsp;your&nbsp;password...</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-intent-warning&nbsp;bp3-icon-lock</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-search</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Search</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-intent-primary&nbsp;bp3-icon-arrow-right</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disabled input. Must be added separately to the <code>&#60;input&#62;</code> and <code>&#60;button&#62;</code>. Also add <code>.bp3-disabled</code> to <code>.bp3-input-group</code> for icon coloring (not shown below).</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Rounded caps. Button will also be rounded.</p>\n",
          "name": ".bp3-round"
        },
        {
          "documentation": "<p>Large group. Children will adjust size accordingly.</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Small group. Children will adjust size accordingly.</p>\n",
          "name": ".bp3-small"
        },
        {
          "documentation": "<p>Primary intent. (All 4 intents are supported.)</p>\n",
          "name": ".bp3-intent-primary"
        },
        {
          "documentation": "<p>Take up full width of parent element.</p>\n",
          "name": ".bp3-fill"
        }
      ],
      "reference": "input-group"
    },
    "input-search": {
      "documentation": "",
      "markup": "<div class=\"bp3-input-group {{.modifier}}\">\n  <span class=\"bp3-icon bp3-icon-search\"></span>\n  <input class=\"bp3-input\" {{:modifier}} type=\"search\" placeholder=\"Search input\" dir=\"auto\" />\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-search</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>search</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Search&nbsp;input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>dir</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>auto</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disabled. Also add <code>.bp3-disabled</code> to <code>.bp3-input-group</code> for icon coloring (not shown below).</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Large</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Small</p>\n",
          "name": ".bp3-small"
        }
      ],
      "reference": "input-search"
    },
    "label": {
      "documentation": "",
      "markup": "<div>\n  <label class=\"bp3-label {{.modifier}}\">\n    Label A\n    <span class=\"bp3-text-muted\">(optional)</span>\n    <input {{:modifier}} class=\"bp3-input\" style=\"width: 200px;\" type=\"text\" placeholder=\"Text input\" dir=\"auto\" />\n  </label>\n  <label class=\"bp3-label {{.modifier}}\">\n    Label B\n    <div class=\"bp3-input-group {{.modifier}}\">\n      <span class=\"bp3-icon bp3-icon-calendar\"></span>\n      <input {{:modifier}} class=\"bp3-input\" style=\"width: 200px;\" type=\"text\" placeholder=\"Input group\" dir=\"auto\" />\n    </div>\n  </label>\n  <label class=\"bp3-label {{.modifier}}\">\n    Label C\n    <div class=\"bp3-select {{.modifier}}\">\n      <select {{:modifier}}>\n        <option selected>Choose an item...</option>\n        <option value=\"1\">One</option>\n      </select>\n    </div>\n  </label>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-label&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;A</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-text-muted</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>(optional)</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;200px;</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Text&nbsp;input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>dir</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>auto</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-label&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;B</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input-group&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-calendar</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;200px;</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Input&nbsp;group</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>dir</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>auto</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-label&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Label&nbsp;C</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-select&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>select</span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;selected</span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Choose&nbsp;an&nbsp;item...</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>1</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>One</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>select</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disable the input.</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Disabled styles. Input must be disabled separately via attribute.</p>\n",
          "name": ".bp3-disabled"
        },
        {
          "documentation": "<p>Label and content appear side by side.</p>\n",
          "name": ".bp3-inline"
        }
      ],
      "reference": "label"
    },
    "lists": {
      "documentation": "",
      "markup": "<ol class=\"{{.modifier}}\">\n  <li>Item the first</li>\n  <li>Item the second</li>\n  <li>\n    Item the third\n    <ul class=\"{{.modifier}}\">\n      <li>Item the fourth</li>\n      <li>Item the fifth</li>\n    </ul>\n  </li>\n</ol>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ol</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Item&nbsp;the&nbsp;first</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Item&nbsp;the&nbsp;second</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Item&nbsp;the&nbsp;third</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Item&nbsp;the&nbsp;fourth</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Item&nbsp;the&nbsp;fifth</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ol</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Add a little spacing between items for readability.</p>\n",
          "name": ".bp3-list"
        },
        {
          "documentation": "<p>Remove all list styling (including indicators) so you can add your own.</p>\n",
          "name": ".bp3-list-unstyled"
        }
      ],
      "reference": "lists"
    },
    "menu": {
      "documentation": "",
      "markup": "<ul class=\"bp3-menu {{.modifier}} bp3-elevation-1\">\n  <li>\n    <a class=\"bp3-menu-item bp3-icon-people\" tabindex=\"0\">Share...</a>\n  </li>\n  <li>\n    <a class=\"bp3-menu-item bp3-icon-circle-arrow-right\" tabindex=\"0\">Move...</a>\n  </li>\n  <li>\n    <a class=\"bp3-menu-item bp3-icon-edit\" tabindex=\"0\">Rename</a>\n  </li>\n  <li class=\"bp3-menu-divider\"></li>\n  <li>\n    <a class=\"bp3-menu-item bp3-icon-trash bp3-intent-danger\" tabindex=\"0\">Delete</a>\n  </li>\n</ul>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;bp3-elevation-1</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-people</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Share...</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-circle-arrow-right</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Move...</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-edit</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Rename</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-divider</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-trash&nbsp;bp3-intent-danger</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Delete</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Large size (only supported on <code>.bp3-menu</code>)</p>\n",
          "name": ".bp3-large"
        }
      ],
      "reference": "menu"
    },
    "menu-header": {
      "documentation": "",
      "markup": "<ul class=\"bp3-menu bp3-elevation-1\">\n  <li class=\"bp3-menu-header\"><h6 class=\"bp3-heading\">Layouts</h6></li>\n  <li><button type=\"button\" class=\"bp3-menu-item bp3-icon-layout-auto\">Auto</button></li>\n  <li><button type=\"button\" class=\"bp3-menu-item bp3-icon-layout-circle\">Circle</button></li>\n  <li><button type=\"button\" class=\"bp3-menu-item bp3-icon-layout-grid\">Grid</button></li>\n  <li class=\"bp3-menu-header\"><h6 class=\"bp3-heading\">Views</h6></li>\n  <li><button type=\"button\" class=\"bp3-menu-item bp3-icon-history\">History</button></li>\n  <li><button type=\"button\" class=\"bp3-menu-item bp3-icon-star\">Favorites</button></li>\n  <li><button type=\"button\" class=\"bp3-menu-item bp3-icon-envelope\">Messages</button></li>\n</ul>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu&nbsp;bp3-elevation-1</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-header</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h6</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Layouts</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h6</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-layout-auto</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Auto</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-layout-circle</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Circle</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-layout-grid</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Grid</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-header</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h6</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Views</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h6</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-history</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>History</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-star</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Favorites</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-menu-item&nbsp;bp3-icon-envelope</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Messages</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "menu-header"
    },
    "navbar": {
      "documentation": "",
      "markup": "<nav class=\"bp3-navbar {{.modifier}}\">\n  <div class=\"bp3-navbar-group bp3-align-left\">\n    <div class=\"bp3-navbar-heading\">Blueprint</div>\n    <input class=\"bp3-input\" placeholder=\"Search files...\" type=\"text\" />\n  </div>\n  <div class=\"bp3-navbar-group bp3-align-right\">\n    <button class=\"bp3-button bp3-minimal bp3-icon-home\">Home</button>\n    <button class=\"bp3-button bp3-minimal bp3-icon-document\">Files</button>\n    <span class=\"bp3-navbar-divider\"></span>\n    <button class=\"bp3-button bp3-minimal bp3-icon-user\"></button>\n    <button class=\"bp3-button bp3-minimal bp3-icon-notifications\"></button>\n    <button class=\"bp3-button bp3-minimal bp3-icon-cog\"></button>\n  </div>\n</nav>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>nav</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-group&nbsp;bp3-align-left</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Blueprint</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>placeholder</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>Search&nbsp;files...</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-group&nbsp;bp3-align-right</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-home</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Home</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-document</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Files</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-divider</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-user</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-notifications</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-cog</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>nav</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Dark theme</p>\n",
          "name": ".bp3-dark"
        }
      ],
      "reference": "navbar"
    },
    "navbar-container": {
      "documentation": "",
      "markup": "<nav class=\"bp3-navbar bp3-dark\">\n  <div style=\"margin: 0 auto; width: 480px;\"> <!-- ADD ME -->\n    <div class=\"bp3-navbar-group bp3-align-left\">\n      <div class=\"bp3-navbar-heading\">Blueprint</div>\n    </div>\n    <div class=\"bp3-navbar-group bp3-align-right\">\n      <button class=\"bp3-button bp3-minimal bp3-icon-home\">Home</button>\n      <button class=\"bp3-button bp3-minimal bp3-icon-document\">Files</button>\n      <span class=\"bp3-navbar-divider\"></span>\n      <button class=\"bp3-button bp3-minimal bp3-icon-user\"></button>\n      <button class=\"bp3-button bp3-minimal bp3-icon-notifications\"></button>\n      <button class=\"bp3-button bp3-minimal bp3-icon-cog\"></button>\n    </div>\n  </div>\n</nav>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>nav</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar&nbsp;bp3-dark</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>margin:&nbsp;0&nbsp;auto;&nbsp;width:&nbsp;480px;</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>&nbsp;</span><span class=\"comment block html\"><span class=\"punctuation definition comment html\"><span>&lt;!--</span></span><span>&nbsp;ADD&nbsp;ME&nbsp;</span><span class=\"punctuation definition comment html\"><span>--&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-group&nbsp;bp3-align-left</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Blueprint</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-group&nbsp;bp3-align-right</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-home</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Home</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-document</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Files</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-navbar-divider</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-user</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-notifications</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-minimal&nbsp;bp3-icon-cog</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>nav</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "navbar-container"
    },
    "non-ideal-state": {
      "documentation": "",
      "markup": "<div class=\"bp3-non-ideal-state\">\n  <div class=\"bp3-non-ideal-state-visual\">\n    <span class=\"bp3-icon bp3-icon-folder-open\"></span>\n  </div>\n  <h4 class=\"bp3-heading\">This folder is empty</h4>\n  <div>Create a new file to populate the folder.</div>\n  <button class=\"bp3-button bp3-intent-primary\">Create</button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-non-ideal-state</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-non-ideal-state-visual</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-icon&nbsp;bp3-icon-folder-open</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>This&nbsp;folder&nbsp;is&nbsp;empty</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h4</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Create&nbsp;a&nbsp;new&nbsp;file&nbsp;to&nbsp;populate&nbsp;the&nbsp;folder.</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-intent-primary</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Create</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "non-ideal-state"
    },
    "preformatted": {
      "documentation": "",
      "markup": "<div>\n  <p>Use the <code class=\"bp3-code\">&lt;code></code> tag for snippets of code.</p>\n  <pre class=\"bp3-code-block\">Use the &lt;pre> tag for blocks of code.</pre>\n  <pre class=\"bp3-code-block\"><code>// code sample\nexport function hasModifier(\n  modifiers: ts.ModifiersArray,\n  ...modifierKinds: ts.SyntaxKind[],\n) {\n  if (modifiers == null || modifierKinds == null) {\n    return false;\n  }\n  return modifiers.some(m => modifierKinds.some(k => m.kind === k));\n}</code></pre>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Use&nbsp;the&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>code</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-code</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"constant character entity html\"><span class=\"punctuation definition entity html\"><span>&amp;</span></span><span>lt</span><span class=\"punctuation definition entity html\"><span>;</span></span></span><span>code&gt;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>code</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>&nbsp;tag&nbsp;for&nbsp;snippets&nbsp;of&nbsp;code.</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>pre</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-code-block</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Use&nbsp;the&nbsp;</span><span class=\"constant character entity html\"><span class=\"punctuation definition entity html\"><span>&amp;</span></span><span>lt</span><span class=\"punctuation definition entity html\"><span>;</span></span></span><span>pre&gt;&nbsp;tag&nbsp;for&nbsp;blocks&nbsp;of&nbsp;code.</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>pre</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>pre</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-code-block</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>code</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>//&nbsp;code&nbsp;sample</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>export&nbsp;function&nbsp;hasModifier(</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;modifiers:&nbsp;ts.ModifiersArray,</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;...modifierKinds:&nbsp;ts.SyntaxKind[],</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>)&nbsp;{</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;if&nbsp;(modifiers&nbsp;==&nbsp;null&nbsp;||&nbsp;modifierKinds&nbsp;==&nbsp;null)&nbsp;{</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;return&nbsp;modifiers.some(m&nbsp;=&gt;&nbsp;modifierKinds.some(k&nbsp;=&gt;&nbsp;m.kind&nbsp;===&nbsp;k));</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>}</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>code</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>pre</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "preformatted"
    },
    "progress-bar": {
      "documentation": "",
      "markup": "<div class=\"bp3-progress-bar {{.modifier}}\">\n  <div class=\"bp3-progress-meter\" style=\"width: 25%\"></div>\n</div>\n<div class=\"bp3-progress-bar bp3-intent-primary {{.modifier}}\">\n  <div class=\"bp3-progress-meter\" style=\"width: 50%\"></div>\n</div>\n<div class=\"bp3-progress-bar bp3-intent-success {{.modifier}}\">\n  <div class=\"bp3-progress-meter\" style=\"width: 75%\"></div>\n</div>\n<div class=\"bp3-progress-bar bp3-intent-danger {{.modifier}}\">\n  <div class=\"bp3-progress-meter\" style=\"width: 100%\"></div>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-bar&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-meter</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;25%</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-bar&nbsp;bp3-intent-primary&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-meter</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;50%</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-bar&nbsp;bp3-intent-success&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-meter</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;75%</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-bar&nbsp;bp3-intent-danger&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-progress-meter</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>style</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>width:&nbsp;100%</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>No stripes</p>\n",
          "name": ".bp3-no-stripes"
        },
        {
          "documentation": "<p>No animation</p>\n",
          "name": ".bp3-no-animation"
        }
      ],
      "reference": "progress-bar"
    },
    "radio": {
      "documentation": "",
      "markup": "<label class=\"bp3-control bp3-radio {{.modifier}}\">\n  <input type=\"radio\" name=\"docs-radio-regular\" {{:modifier}} />\n  <span class=\"bp3-control-indicator\"></span>\n  Radio\n</label>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control&nbsp;bp3-radio&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>radio</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>name</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>docs-radio-regular</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-indicator</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;Radio</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Selected</p>\n",
          "name": ":checked"
        },
        {
          "documentation": "<p>Disabled. Also add <code>.bp3-disabled</code> to <code>.bp3-control</code> to change text color (not shown below).</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Right-aligned indicator</p>\n",
          "name": ".bp3-align-right"
        },
        {
          "documentation": "<p>Large</p>\n",
          "name": ".bp3-large"
        }
      ],
      "reference": "radio"
    },
    "rtl": {
      "documentation": "",
      "markup": "<h5 class=\"bp3-heading\">Arabic:</h5>\n<p class=\"bp3-rtl\">\n  لكل لأداء بمحاولة من. مدينة الواقعة يبق أي, وإعلان وقوعها، حول كل, حدى عجّل مشروط الخاسرة قد.\n  من الذود تكبّد بين, و لها واحدة الأراضي. عل الصفحة والروسية يتم, أي للحكومة استعملت شيء. أم وصل زهاء اليا\n</p>\n<h5 class=\"bp3-heading\">Hebrew:</h5>\n<p class=\"bp3-rtl\">\n  כדי על עזרה יידיש הבהרה, מלא באגים טכניים דת. תנך או ברית ביולי. כתב בה הטבע למנוע, דת כלים פיסיקה החופשית זכר.\n  מתן החלל מאמרשיחהצפה ב. הספרות אנציקלופדיה אם זכר, על שימושי שימושיים תאולוגיה עזה\n</p>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Arabic:</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-rtl</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;لكل&nbsp;لأداء&nbsp;بمحاولة&nbsp;من.&nbsp;مدينة&nbsp;الواقعة&nbsp;يبق&nbsp;أي,&nbsp;وإعلان&nbsp;وقوعها،&nbsp;حول&nbsp;كل,&nbsp;حدى&nbsp;عجّل&nbsp;مشروط&nbsp;الخاسرة&nbsp;قد.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;من&nbsp;الذود&nbsp;تكبّد&nbsp;بين,&nbsp;و&nbsp;لها&nbsp;واحدة&nbsp;الأراضي.&nbsp;عل&nbsp;الصفحة&nbsp;والروسية&nbsp;يتم,&nbsp;أي&nbsp;للحكومة&nbsp;استعملت&nbsp;شيء.&nbsp;أم&nbsp;وصل&nbsp;زهاء&nbsp;اليا</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Hebrew:</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-rtl</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;כדי&nbsp;על&nbsp;עזרה&nbsp;יידיש&nbsp;הבהרה,&nbsp;מלא&nbsp;באגים&nbsp;טכניים&nbsp;דת.&nbsp;תנך&nbsp;או&nbsp;ברית&nbsp;ביולי.&nbsp;כתב&nbsp;בה&nbsp;הטבע&nbsp;למנוע,&nbsp;דת&nbsp;כלים&nbsp;פיסיקה&nbsp;החופשית&nbsp;זכר.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;מתן&nbsp;החלל&nbsp;מאמרשיחהצפה&nbsp;ב.&nbsp;הספרות&nbsp;אנציקלופדיה&nbsp;אם&nbsp;זכר,&nbsp;על&nbsp;שימושי&nbsp;שימושיים&nbsp;תאולוגיה&nbsp;עזה</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "rtl"
    },
    "running-text": {
      "documentation": "",
      "markup": "<div class=\"bp3-running-text {{.modifier}}\">\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n    eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  </p>\n  <ul>\n    <li>Item the <code>first</code>.</li>\n    <li>Item the <strong>second</strong></code>.</li>\n    <li>Item the <a href=\"#core/typography.running-text\">third</a>.</li>\n  </ul>\n  <h3>New section</h3>\n  <p>\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n    nisi ut aliquip ex ea commodo consequat.\n  </p>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-running-text&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Lorem&nbsp;ipsum&nbsp;dolor&nbsp;sit&nbsp;amet,&nbsp;consectetur&nbsp;adipiscing&nbsp;elit,&nbsp;sed&nbsp;do</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;eiusmod&nbsp;tempor&nbsp;incididunt&nbsp;ut&nbsp;labore&nbsp;et&nbsp;dolore&nbsp;magna&nbsp;aliqua.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Item&nbsp;the&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>code</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>first</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>code</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>.</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Item&nbsp;the&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>strong</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>second</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>strong</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>code</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>.</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Item&nbsp;the&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>#core/typography.running-text</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>third</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>.</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h3</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>New&nbsp;section</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h3</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Ut&nbsp;enim&nbsp;ad&nbsp;minim&nbsp;veniam,&nbsp;quis&nbsp;nostrud&nbsp;exercitation&nbsp;ullamco&nbsp;laboris</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;nisi&nbsp;ut&nbsp;aliquip&nbsp;ex&nbsp;ea&nbsp;commodo&nbsp;consequat.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Use larger font size.</p>\n",
          "name": ".bp3-text-large"
        }
      ],
      "reference": "running-text"
    },
    "select": {
      "documentation": "",
      "markup": "<div class=\"bp3-select {{.modifier}}\">\n  <select {{:modifier}}>\n    <option selected>Choose an item...</option>\n    <option value=\"1\">One</option>\n    <option value=\"2\">Two</option>\n    <option value=\"3\">Three</option>\n    <option value=\"4\">Four</option>\n  </select>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-select&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>select</span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;selected</span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Choose&nbsp;an&nbsp;item...</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>1</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>One</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>2</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Two</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>3</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Three</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>value</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>4</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Four</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>option</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>select</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disabled. Also add <code>.bp3-disabled</code> to <code>.bp3-select</code> for icon coloring (not shown below).</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Expand to fill parent container</p>\n",
          "name": ".bp3-fill"
        },
        {
          "documentation": "<p>Large size</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Minimal appearance</p>\n",
          "name": ".bp3-minimal"
        }
      ],
      "reference": "select"
    },
    "skeleton": {
      "documentation": "",
      "markup": "<div class=\"bp3-card\">\n  <h5 class=\"bp3-heading\"><a class=\"{{.modifier}}\" href=\"#\" tabindex=\"-1\">Card heading</a></h5>\n  <p class=\"{{.modifier}}\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque eget tortor felis.\n    Fusce dapibus metus in dapibus mollis. Quisque eget ex diam.\n  </p>\n  <button type=\"button\" class=\"bp3-button bp3-icon-add {{.modifier}}\" tabindex=\"-1\">Submit</button>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-card</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-heading</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>href</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>#</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>-1</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Card&nbsp;heading</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>a</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>h5</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Lorem&nbsp;ipsum&nbsp;dolor&nbsp;sit&nbsp;amet,&nbsp;consectetur&nbsp;adipiscing&nbsp;elit.&nbsp;Quisque&nbsp;eget&nbsp;tortor&nbsp;felis.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;Fusce&nbsp;dapibus&nbsp;metus&nbsp;in&nbsp;dapibus&nbsp;mollis.&nbsp;Quisque&nbsp;eget&nbsp;ex&nbsp;diam.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>p</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>button</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-button&nbsp;bp3-icon-add&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>tabindex</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>-1</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Submit</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Render this element as a skeleton, an outline of its true self.</p>\n",
          "name": ".bp3-skeleton"
        }
      ],
      "reference": "skeleton"
    },
    "switch": {
      "documentation": "",
      "markup": "<label class=\"bp3-control bp3-switch {{.modifier}}\">\n  <input type=\"checkbox\" {{:modifier}} />\n  <span class=\"bp3-control-indicator\"></span>\n  Switch\n</label>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control&nbsp;bp3-switch&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>input</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>type</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>checkbox</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition tag html\"><span>&nbsp;/&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-control-indicator</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;Switch</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>label</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Selected</p>\n",
          "name": ":checked"
        },
        {
          "documentation": "<p>Disabled. Also add <code>.bp3-disabled</code> to <code>.bp3-control</code> to change text color (not shown below).</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Right-aligned indicator</p>\n",
          "name": ".bp3-align-right"
        },
        {
          "documentation": "<p>Large</p>\n",
          "name": ".bp3-large"
        }
      ],
      "reference": "switch"
    },
    "tabs": {
      "documentation": "",
      "markup": "<div class=\"bp3-tabs\">\n    <ul class=\"bp3-tab-list {{.modifier}}\" role=\"tablist\">\n        <li class=\"bp3-tab\" role=\"tab\" aria-selected=\"true\">Selected tab</li>\n        <li class=\"bp3-tab\" role=\"tab\">Another tab</li>\n        <li class=\"bp3-tab\" role=\"tab\" aria-disabled=\"true\">Disabled tab</li>\n    </ul>\n    <div class=\"bp3-tab-panel\" role=\"tabpanel\">Selected panel</div>\n    <div class=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden=\"true\">Another panel</div>\n    <div class=\"bp3-tab-panel\" role=\"tabpanel\" aria-hidden=\"true\">Disabled panel</div>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tabs</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tab-list&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>tablist</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tab</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>tab</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>aria-selected</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>true</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Selected&nbsp;tab</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tab</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>tab</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Another&nbsp;tab</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tab</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>tab</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>aria-disabled</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>true</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Disabled&nbsp;tab</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tab-panel</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>tabpanel</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Selected&nbsp;panel</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tab-panel</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>tabpanel</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>aria-hidden</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>true</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Another&nbsp;panel</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tab-panel</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>role</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>tabpanel</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>aria-hidden</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>true</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Disabled&nbsp;panel</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Large tabs</p>\n",
          "name": ".bp3-large"
        }
      ],
      "reference": "tabs"
    },
    "tag": {
      "documentation": "",
      "markup": "<span class=\"bp3-tag {{.modifier}}\">125</span>\n<span class=\"bp3-tag {{.modifier}}\">Done</span>\n<span class=\"bp3-tag {{.modifier}}\">\n  Tracking\n  <button class=\"bp3-tag-remove\"></button>\n</span>\n<span class=\"bp3-tag {{.modifier}}\">\n  Crushed\n  <button class=\"bp3-tag-remove\"></button>\n</span>\n<span class=\"bp3-tag {{.modifier}}\">\n  A rather long string of text that wraps to multiple lines\n  demonstrates the position of the remove button.\n  <button class=\"bp3-tag-remove\"></button>\n</span>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>125</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Done</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;Tracking</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag-remove</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;Crushed</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag-remove</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;A&nbsp;rather&nbsp;long&nbsp;string&nbsp;of&nbsp;text&nbsp;that&nbsp;wraps&nbsp;to&nbsp;multiple&nbsp;lines</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;demonstrates&nbsp;the&nbsp;position&nbsp;of&nbsp;the&nbsp;remove&nbsp;button.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>button</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tag-remove</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>button</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Large</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Minimal appearance</p>\n",
          "name": ".bp3-minimal"
        },
        {
          "documentation": "<p>Rounded corners, ideal for badges</p>\n",
          "name": ".bp3-round"
        },
        {
          "documentation": "<p>Hover and active effects</p>\n",
          "name": ".bp3-interactive"
        },
        {
          "documentation": "<p>Primary intent</p>\n",
          "name": ".bp3-intent-primary"
        },
        {
          "documentation": "<p>Success intent</p>\n",
          "name": ".bp3-intent-success"
        },
        {
          "documentation": "<p>Warning intent</p>\n",
          "name": ".bp3-intent-warning"
        },
        {
          "documentation": "<p>Danger intent</p>\n",
          "name": ".bp3-intent-danger"
        }
      ],
      "reference": "tag"
    },
    "textarea": {
      "documentation": "",
      "markup": "<textarea class=\"bp3-input {{.modifier}}\" {{:modifier}} dir=\"auto\"></textarea>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>textarea</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-input&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span>&nbsp;</span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span>:modifier</span><span class=\"support constant handlebars\"><span>}}</span></span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>dir</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>auto</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>textarea</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Disabled</p>\n",
          "name": ":disabled"
        },
        {
          "documentation": "<p>Readonly</p>\n",
          "name": ":readonly"
        },
        {
          "documentation": "<p>Larger font size</p>\n",
          "name": ".bp3-large"
        },
        {
          "documentation": "<p>Small font size</p>\n",
          "name": ".bp3-small"
        },
        {
          "documentation": "<p>Primary intent</p>\n",
          "name": ".bp3-intent-primary"
        },
        {
          "documentation": "<p>Danger intent</p>\n",
          "name": ".bp3-intent-danger"
        },
        {
          "documentation": "<p>Take up full width of parent element</p>\n",
          "name": ".bp3-fill"
        }
      ],
      "reference": "textarea"
    },
    "tree": {
      "documentation": "",
      "markup": "<div class=\"bp3-tree bp3-elevation-0\">\n  <ul class=\"bp3-tree-node-list bp3-tree-root\">\n    <li class=\"bp3-tree-node bp3-tree-node-expanded\">\n      <div class=\"bp3-tree-node-content\">\n        <span class=\"bp3-tree-node-caret bp3-tree-node-caret-open bp3-icon-standard\"></span>\n        <span class=\"bp3-tree-node-icon bp3-icon-standard bp3-icon-folder-close\"></span>\n        <span class=\"bp3-tree-node-label\">Label</span>\n        <span class=\"bp3-tree-node-secondary-label\">Secondary label</span>\n      </div>\n      <ul class=\"bp3-tree-node-list\">\n        <li class=\"bp3-tree-node\">\n          <div class=\"bp3-tree-node-content\">\n            <span class=\"bp3-tree-node-caret-none bp3-icon-standard\"></span>\n            <span class=\"bp3-tree-node-icon bp3-icon-standard bp3-icon-document\"></span>\n          <span class=\"bp3-tree-node-label\">A Document</span>\n          </div>\n        </li>\n        <li class=\"bp3-tree-node\">\n          <div class=\"bp3-tree-node-content\">\n            <span class=\"bp3-tree-node-caret-none bp3-icon-standard\"></span>\n            <span class=\"bp3-tree-node-icon bp3-icon-standard bp3-icon-document\"></span>\n            <span class=\"bp3-tree-node-label\">Another Document</span>\n          </div>\n        </li>\n      </ul>\n    </li>\n  </ul>\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree&nbsp;bp3-elevation-0</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-list&nbsp;bp3-tree-root</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node&nbsp;bp3-tree-node-expanded</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-content</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-caret&nbsp;bp3-tree-node-caret-open&nbsp;bp3-icon-standard</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-icon&nbsp;bp3-icon-standard&nbsp;bp3-icon-folder-close</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-label</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Label</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-secondary-label</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Secondary&nbsp;label</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-list</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-content</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-caret-none&nbsp;bp3-icon-standard</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-icon&nbsp;bp3-icon-standard&nbsp;bp3-icon-document</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-label</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>A&nbsp;Document</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-content</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-caret-none&nbsp;bp3-icon-standard</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-icon&nbsp;bp3-icon-standard&nbsp;bp3-icon-document</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span class=\"meta scope between-tag-pair html\"><span>&lt;</span></span><span>/</span></span><span class=\"entity name tag html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>bp3-tree-node-label</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span><span>Another&nbsp;Document</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>span</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>li</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;</span><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>ul</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [],
      "reference": "tree"
    },
    "typography.links": {
      "documentation": "<p>Simply use an <code>&lt;a href=&quot;&quot;&gt;</code> tag as you normally would. No class is necessary for Blueprint styles.\nLinks are underlined only when hovered.</p>\n<p>Putting an icon inside a link will cause it to inherit the link&#39;s text color.</p>\n",
      "markup": "",
      "markupHtml": "undefined",
      "modifiers": [],
      "reference": "typography.links"
    },
    "ui-text": {
      "documentation": "",
      "markup": "<div class=\"{{.modifier}}\">\n  More than a decade ago, we set out to create products that would transform\n  the way organizations use their data. Today, our products are deployed at\n  the most critical government, commercial, and non-profit institutions in\n  the world to solve problems we hadn’t even dreamed of back then.\n</div>",
      "markupHtml": "<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span>&nbsp;</span><span class=\"entity other attribute-name html\"><span class=\"entity other attribute-name generic html\"><span>class</span></span><span class=\"punctuation separator key-value html\"><span>=</span></span></span><span class=\"string quoted double handlebars\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span class=\"meta function inline other handlebars\"><span class=\"support constant handlebars\"><span>{{</span></span><span class=\"variable parameter handlebars\"><span>.modifier</span></span><span class=\"support constant handlebars\"><span>}}</span></span></span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;More&nbsp;than&nbsp;a&nbsp;decade&nbsp;ago,&nbsp;we&nbsp;set&nbsp;out&nbsp;to&nbsp;create&nbsp;products&nbsp;that&nbsp;would&nbsp;transform</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;the&nbsp;way&nbsp;organizations&nbsp;use&nbsp;their&nbsp;data.&nbsp;Today,&nbsp;our&nbsp;products&nbsp;are&nbsp;deployed&nbsp;at</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;the&nbsp;most&nbsp;critical&nbsp;government,&nbsp;commercial,&nbsp;and&nbsp;non-profit&nbsp;institutions&nbsp;in</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span>&nbsp;&nbsp;the&nbsp;world&nbsp;to&nbsp;solve&nbsp;problems&nbsp;we&nbsp;hadn’t&nbsp;even&nbsp;dreamed&nbsp;of&nbsp;back&nbsp;then.</span></span></div><div class=\"line\"><span class=\"text html handlebars\"><span class=\"meta tag block any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag block any html\"><span>div</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div></pre>",
      "modifiers": [
        {
          "documentation": "<p>Default Blueprint font styles, applied to the <code>&lt;body&gt;</code> tag and available as a class for nested resets.</p>\n",
          "name": ".bp3-ui-text"
        },
        {
          "documentation": "<p>Use a monospace font (ideal for code).</p>\n",
          "name": ".bp3-monospace-text"
        },
        {
          "documentation": "<p>Increase line height ideal for longform text. See <a href=\"#core/typography.running-text\">Running text</a> below for additional features.</p>\n",
          "name": ".bp3-running-text"
        },
        {
          "documentation": "<p>Use a larger font size.</p>\n",
          "name": ".bp3-text-large"
        },
        {
          "documentation": "<p>Use a smaller font size.</p>\n",
          "name": ".bp3-text-small"
        },
        {
          "documentation": "<p>Change text color to a gentler gray.</p>\n",
          "name": ".bp3-text-muted"
        },
        {
          "documentation": "<p>Change text color to a transparent, faded gray.</p>\n",
          "name": ".bp3-text-disabled"
        },
        {
          "documentation": "<p>Truncate a single line of text with an ellipsis if it overflows its container.</p>\n",
          "name": ".bp3-text-overflow-ellipsis"
        }
      ],
      "reference": "ui-text"
    }
  },
  "npm": {
    "@blueprintjs/core": {
      "name": "@blueprintjs/core",
      "published": true,
      "version": "3.10.0",
      "description": "Core styles & components",
      "latestVersion": "3.10.0",
      "nextVersion": "3.0.0-rc.1",
      "private": false,
      "sourcePath": "packages/core/package.json",
      "versions": [
        "3.10.0",
        "2.3.1",
        "1.40.0",
        "0.1.0"
      ]
    },
    "@blueprintjs/datetime": {
      "name": "@blueprintjs/datetime",
      "published": true,
      "version": "3.5.0",
      "description": "Components for interacting with dates and times",
      "latestVersion": "3.5.0",
      "nextVersion": "3.0.0-rc.0",
      "private": false,
      "sourcePath": "packages/datetime/package.json",
      "versions": [
        "3.5.0",
        "2.0.3",
        "1.25.5",
        "0.1.0"
      ]
    },
    "@blueprintjs/docs-app": {
      "name": "@blueprintjs/docs-app",
      "published": false,
      "version": "3.0.0",
      "description": "Blueprint Documentation Site",
      "private": true,
      "sourcePath": "packages/docs-app/package.json",
      "versions": [
        "3.0.0"
      ]
    },
    "@blueprintjs/docs-data": {
      "name": "@blueprintjs/docs-data",
      "published": false,
      "version": "3.0.0",
      "private": true,
      "sourcePath": "packages/docs-data/package.json",
      "versions": [
        "3.0.0"
      ]
    },
    "@blueprintjs/docs-theme": {
      "name": "@blueprintjs/docs-theme",
      "published": true,
      "version": "3.0.3",
      "description": "Blueprint theme for documentalist",
      "latestVersion": "3.0.3",
      "nextVersion": "3.0.0-rc.0",
      "private": false,
      "sourcePath": "packages/docs-theme/package.json",
      "versions": [
        "3.0.3",
        "2.1.2",
        "1.0.2"
      ]
    },
    "@blueprintjs/icons": {
      "name": "@blueprintjs/icons",
      "published": true,
      "version": "3.4.0",
      "description": "Components, fonts, icons, and css files for creating and displaying icons.",
      "latestVersion": "3.4.0",
      "nextVersion": "3.0.0-rc.0",
      "private": false,
      "sourcePath": "packages/icons/package.json",
      "versions": [
        "3.4.0",
        "2.2.1"
      ]
    },
    "@blueprintjs/karma-build-scripts": {
      "name": "@blueprintjs/karma-build-scripts",
      "published": true,
      "version": "0.9.0",
      "description": "Karma build scripts for @blueprintjs packages",
      "latestVersion": "0.9.0",
      "nextVersion": "0.7.0",
      "private": false,
      "sourcePath": "packages/karma-build-scripts/package.json",
      "versions": [
        "0.9.0"
      ]
    },
    "@blueprintjs/labs": {
      "name": "@blueprintjs/labs",
      "published": true,
      "version": "0.16.2",
      "description": "Incubator for unstable and in-development Blueprint components",
      "latestVersion": "0.16.2",
      "nextVersion": "0.16.1",
      "private": false,
      "sourcePath": "packages/labs/package.json",
      "versions": [
        "0.16.2"
      ]
    },
    "@blueprintjs/landing-app": {
      "name": "@blueprintjs/landing-app",
      "published": false,
      "version": "3.0.0",
      "description": "Blueprint landing page",
      "private": true,
      "sourcePath": "packages/landing-app/package.json",
      "versions": [
        "3.0.0"
      ]
    },
    "@blueprintjs/node-build-scripts": {
      "name": "@blueprintjs/node-build-scripts",
      "published": true,
      "version": "0.8.0",
      "description": "Node.js build scripts for @blueprintjs packages",
      "latestVersion": "0.8.0",
      "nextVersion": "0.6.2",
      "private": false,
      "sourcePath": "packages/node-build-scripts/package.json",
      "versions": [
        "0.8.0"
      ]
    },
    "@blueprintjs/select": {
      "name": "@blueprintjs/select",
      "published": true,
      "version": "3.4.0",
      "description": "Components related to selecting items from a list",
      "latestVersion": "3.4.0",
      "nextVersion": "3.0.0-rc.0",
      "private": false,
      "sourcePath": "packages/select/package.json",
      "versions": [
        "3.4.0",
        "2.0.1"
      ]
    },
    "@blueprintjs/table-dev-app": {
      "name": "@blueprintjs/table-dev-app",
      "published": false,
      "version": "3.0.0",
      "description": "Dev application for @blueprintjs/table",
      "private": true,
      "sourcePath": "packages/table-dev-app/package.json",
      "versions": [
        "3.0.0"
      ]
    },
    "@blueprintjs/table": {
      "name": "@blueprintjs/table",
      "published": true,
      "version": "3.3.0",
      "description": "Scalable interactive table component",
      "latestVersion": "3.3.0",
      "nextVersion": "3.0.0-rc.0",
      "private": false,
      "sourcePath": "packages/table/package.json",
      "versions": [
        "3.3.0",
        "2.1.1",
        "1.31.3",
        "0.1.0"
      ]
    },
    "@blueprintjs/test-commons": {
      "name": "@blueprintjs/test-commons",
      "published": true,
      "version": "0.8.0",
      "description": "Common utilities for tests in @blueprintjs packages",
      "latestVersion": "0.8.0",
      "nextVersion": "0.7.0",
      "private": false,
      "sourcePath": "packages/test-commons/package.json",
      "versions": [
        "0.8.0"
      ]
    },
    "test-react15": {
      "name": "test-react15",
      "published": false,
      "version": "1.1.0",
      "description": "React 15 dependencies for testing",
      "private": true,
      "sourcePath": "packages/test-react15/package.json",
      "versions": [
        "1.1.0"
      ]
    },
    "@blueprintjs/timezone": {
      "name": "@blueprintjs/timezone",
      "published": true,
      "version": "3.1.0",
      "description": "Components related to timezone selection and UI",
      "latestVersion": "3.1.0",
      "nextVersion": "3.0.0-rc.0",
      "private": false,
      "sourcePath": "packages/timezone/package.json",
      "versions": [
        "3.1.0",
        "2.0.1"
      ]
    },
    "@blueprintjs/tslint-config": {
      "name": "@blueprintjs/tslint-config",
      "published": true,
      "version": "1.7.0",
      "description": "TSLint configuration for @blueprintjs packages",
      "latestVersion": "1.7.0",
      "nextVersion": "1.4.1",
      "private": false,
      "sourcePath": "packages/tslint-config/package.json",
      "versions": [
        "1.7.0"
      ]
    },
    "@blueprintjs/webpack-build-scripts": {
      "name": "@blueprintjs/webpack-build-scripts",
      "published": true,
      "version": "0.7.0",
      "description": "Webpack build scripts for @blueprintjs packages",
      "latestVersion": "0.7.0",
      "nextVersion": "0.5.3",
      "private": false,
      "sourcePath": "packages/webpack-build-scripts/package.json",
      "versions": [
        "0.7.0"
      ]
    }
  }
}